// Automatically generated by MockGen. DO NOT EDIT!
// Source: desk.go

package interfaces

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	room "steve/client_pb/room"
	gate_rpc "steve/structs/proto/gate_rpc"
)

// Mock of Desk interface
type MockDesk struct {
	ctrl     *gomock.Controller
	recorder *_MockDeskRecorder
}

// Recorder for MockDesk (not exported)
type _MockDeskRecorder struct {
	mock *MockDesk
}

func NewMockDesk(ctrl *gomock.Controller) *MockDesk {
	mock := &MockDesk{ctrl: ctrl}
	mock.recorder = &_MockDeskRecorder{mock}
	return mock
}

func (_m *MockDesk) EXPECT() *_MockDeskRecorder {
	return _m.recorder
}

func (_m *MockDesk) GetUID() uint64 {
	ret := _m.ctrl.Call(_m, "GetUID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockDeskRecorder) GetUID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUID")
}

func (_m *MockDesk) GetGameID() int {
	ret := _m.ctrl.Call(_m, "GetGameID")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDeskRecorder) GetGameID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGameID")
}

func (_m *MockDesk) GetPlayers() []*room.RoomPlayerInfo {
	ret := _m.ctrl.Call(_m, "GetPlayers")
	ret0, _ := ret[0].([]*room.RoomPlayerInfo)
	return ret0
}

func (_mr *_MockDeskRecorder) GetPlayers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPlayers")
}

func (_m *MockDesk) Start(finish func()) error {
	ret := _m.ctrl.Call(_m, "Start", finish)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDeskRecorder) Start(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0)
}

func (_m *MockDesk) PushRequest(playerID uint64, head *gate_rpc.Header, body proto.Message) {
	_m.ctrl.Call(_m, "PushRequest", playerID, head, body)
}

func (_mr *_MockDeskRecorder) PushRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PushRequest", arg0, arg1, arg2)
}

// Mock of DeskMgr interface
type MockDeskMgr struct {
	ctrl     *gomock.Controller
	recorder *_MockDeskMgrRecorder
}

// Recorder for MockDeskMgr (not exported)
type _MockDeskMgrRecorder struct {
	mock *MockDeskMgr
}

func NewMockDeskMgr(ctrl *gomock.Controller) *MockDeskMgr {
	mock := &MockDeskMgr{ctrl: ctrl}
	mock.recorder = &_MockDeskMgrRecorder{mock}
	return mock
}

func (_m *MockDeskMgr) EXPECT() *_MockDeskMgrRecorder {
	return _m.recorder
}

func (_m *MockDeskMgr) RunDesk(desk Desk) error {
	ret := _m.ctrl.Call(_m, "RunDesk", desk)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDeskMgrRecorder) RunDesk(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunDesk", arg0)
}

func (_m *MockDeskMgr) HandlePlayerRequest(playerID uint64, head *gate_rpc.Header, body proto.Message) {
	_m.ctrl.Call(_m, "HandlePlayerRequest", playerID, head, body)
}

func (_mr *_MockDeskMgrRecorder) HandlePlayerRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandlePlayerRequest", arg0, arg1, arg2)
}

// Mock of DeskFactory interface
type MockDeskFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockDeskFactoryRecorder
}

// Recorder for MockDeskFactory (not exported)
type _MockDeskFactoryRecorder struct {
	mock *MockDeskFactory
}

func NewMockDeskFactory(ctrl *gomock.Controller) *MockDeskFactory {
	mock := &MockDeskFactory{ctrl: ctrl}
	mock.recorder = &_MockDeskFactoryRecorder{mock}
	return mock
}

func (_m *MockDeskFactory) EXPECT() *_MockDeskFactoryRecorder {
	return _m.recorder
}

func (_m *MockDeskFactory) CreateDesk(players []uint64, gameID int, opt CreateDeskOptions) (CreateDeskResult, error) {
	ret := _m.ctrl.Call(_m, "CreateDesk", players, gameID, opt)
	ret0, _ := ret[0].(CreateDeskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeskFactoryRecorder) CreateDesk(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDesk", arg0, arg1, arg2)
}
