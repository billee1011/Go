// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exchanger.proto

/*
Package steve_proto_base is a generated protocol buffer package.

It is generated from these files:
	exchanger.proto
	head.proto

It has these top-level messages:
	ExchangeContext
	Header
*/
package steve_proto_base

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExchangeContext struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ExchangeContext) Reset()                    { *m = ExchangeContext{} }
func (m *ExchangeContext) String() string            { return proto.CompactTextString(m) }
func (*ExchangeContext) ProtoMessage()               {}
func (*ExchangeContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExchangeContext) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ExchangeContext)(nil), "steve.proto.base.ExchangeContext")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Exchanger service

type ExchangerClient interface {
	Exchange(ctx context.Context, opts ...grpc.CallOption) (Exchanger_ExchangeClient, error)
}

type exchangerClient struct {
	cc *grpc.ClientConn
}

func NewExchangerClient(cc *grpc.ClientConn) ExchangerClient {
	return &exchangerClient{cc}
}

func (c *exchangerClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (Exchanger_ExchangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Exchanger_serviceDesc.Streams[0], c.cc, "/steve.proto.base.Exchanger/Exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangerExchangeClient{stream}
	return x, nil
}

type Exchanger_ExchangeClient interface {
	Send(*ExchangeContext) error
	Recv() (*ExchangeContext, error)
	grpc.ClientStream
}

type exchangerExchangeClient struct {
	grpc.ClientStream
}

func (x *exchangerExchangeClient) Send(m *ExchangeContext) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exchangerExchangeClient) Recv() (*ExchangeContext, error) {
	m := new(ExchangeContext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Exchanger service

type ExchangerServer interface {
	Exchange(Exchanger_ExchangeServer) error
}

func RegisterExchangerServer(s *grpc.Server, srv ExchangerServer) {
	s.RegisterService(&_Exchanger_serviceDesc, srv)
}

func _Exchanger_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangerServer).Exchange(&exchangerExchangeServer{stream})
}

type Exchanger_ExchangeServer interface {
	Send(*ExchangeContext) error
	Recv() (*ExchangeContext, error)
	grpc.ServerStream
}

type exchangerExchangeServer struct {
	grpc.ServerStream
}

func (x *exchangerExchangeServer) Send(m *ExchangeContext) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exchangerExchangeServer) Recv() (*ExchangeContext, error) {
	m := new(ExchangeContext)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Exchanger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "steve.proto.base.Exchanger",
	HandlerType: (*ExchangerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _Exchanger_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "exchanger.proto",
}

func init() { proto.RegisterFile("exchanger.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xad, 0x48, 0xce,
	0x48, 0xcc, 0x4b, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0x2e, 0x49,
	0x2d, 0x4b, 0x85, 0x70, 0xf4, 0x92, 0x12, 0x8b, 0x53, 0x95, 0x54, 0xb9, 0xf8, 0x5d, 0xa1, 0x8a,
	0x9c, 0xf3, 0xf3, 0x4a, 0x52, 0x2b, 0x4a, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0xa3, 0x64, 0x2e, 0x4e, 0x98, 0xb2, 0x22, 0xa1,
	0x30, 0x2e, 0x0e, 0x18, 0x47, 0x48, 0x51, 0x0f, 0xdd, 0x48, 0x3d, 0x34, 0xf3, 0xa4, 0x08, 0x2b,
	0x51, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0xab, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x74, 0xc9, 0x9f, 0x58, 0xb7, 0x00, 0x00, 0x00,
}
