// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gate_rpc.proto

package steve_proto_gaterpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 广播类型
type BroadCastType int32

const (
	BroadCastType_TO_ALL     BroadCastType = 0
	BroadCastType_TO_CHANNEL BroadCastType = 1
	BroadCastType_TO_PROV    BroadCastType = 2
	BroadCastType_TO_CITY    BroadCastType = 3
)

var BroadCastType_name = map[int32]string{
	0: "TO_ALL",
	1: "TO_CHANNEL",
	2: "TO_PROV",
	3: "TO_CITY",
}
var BroadCastType_value = map[string]int32{
	"TO_ALL":     0,
	"TO_CHANNEL": 1,
	"TO_PROV":    2,
	"TO_CITY":    3,
}

func (x BroadCastType) String() string {
	return proto.EnumName(BroadCastType_name, int32(x))
}
func (BroadCastType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{0}
}

type Header struct {
	MsgId                uint32   `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (dst *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(dst, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetMsgId() uint32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

// 客户端消息
type ClientMessage struct {
	// 玩家 ID
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// 消息头
	Header *Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	// 消息内容
	RequestData          []byte   `protobuf:"bytes,4,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{1}
}
func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage.Unmarshal(m, b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
}
func (dst *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(dst, src)
}
func (m *ClientMessage) XXX_Size() int {
	return xxx_messageInfo_ClientMessage.Size(m)
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

func (m *ClientMessage) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ClientMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientMessage) GetRequestData() []byte {
	if m != nil {
		return m.RequestData
	}
	return nil
}

// ResponseMessage 回复消息
type ResponseMessage struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body                 []byte   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseMessage) Reset()         { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()    {}
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{2}
}
func (m *ResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseMessage.Unmarshal(m, b)
}
func (m *ResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseMessage.Marshal(b, m, deterministic)
}
func (dst *ResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessage.Merge(dst, src)
}
func (m *ResponseMessage) XXX_Size() int {
	return xxx_messageInfo_ResponseMessage.Size(m)
}
func (m *ResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessage proto.InternalMessageInfo

func (m *ResponseMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ResponseMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// 处理结果
type HandleResult struct {
	// 回复数据， 长度为空时则不需要回复
	Responses            []*ResponseMessage `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HandleResult) Reset()         { *m = HandleResult{} }
func (m *HandleResult) String() string { return proto.CompactTextString(m) }
func (*HandleResult) ProtoMessage()    {}
func (*HandleResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{3}
}
func (m *HandleResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandleResult.Unmarshal(m, b)
}
func (m *HandleResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandleResult.Marshal(b, m, deterministic)
}
func (dst *HandleResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleResult.Merge(dst, src)
}
func (m *HandleResult) XXX_Size() int {
	return xxx_messageInfo_HandleResult.Size(m)
}
func (m *HandleResult) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleResult.DiscardUnknown(m)
}

var xxx_messageInfo_HandleResult proto.InternalMessageInfo

func (m *HandleResult) GetResponses() []*ResponseMessage {
	if m != nil {
		return m.Responses
	}
	return nil
}

// 消息发送请求
type SendMessageRequest struct {
	// 玩家 ID 列表
	PlayerId []uint64 `protobuf:"varint,1,rep,packed,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// 消息头
	Header *Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// 消息内容
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMessageRequest) Reset()         { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()    {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{4}
}
func (m *SendMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMessageRequest.Unmarshal(m, b)
}
func (m *SendMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMessageRequest.Marshal(b, m, deterministic)
}
func (dst *SendMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageRequest.Merge(dst, src)
}
func (m *SendMessageRequest) XXX_Size() int {
	return xxx_messageInfo_SendMessageRequest.Size(m)
}
func (m *SendMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageRequest proto.InternalMessageInfo

func (m *SendMessageRequest) GetPlayerId() []uint64 {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *SendMessageRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SendMessageRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 消息发送结果
type SendMessageResult struct {
	// 是否发送成功
	Ok                   bool     `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMessageResult) Reset()         { *m = SendMessageResult{} }
func (m *SendMessageResult) String() string { return proto.CompactTextString(m) }
func (*SendMessageResult) ProtoMessage()    {}
func (*SendMessageResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{5}
}
func (m *SendMessageResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMessageResult.Unmarshal(m, b)
}
func (m *SendMessageResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMessageResult.Marshal(b, m, deterministic)
}
func (dst *SendMessageResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageResult.Merge(dst, src)
}
func (m *SendMessageResult) XXX_Size() int {
	return xxx_messageInfo_SendMessageResult.Size(m)
}
func (m *SendMessageResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageResult.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageResult proto.InternalMessageInfo

func (m *SendMessageResult) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// 通过nsq发布广播消息到GateWay, GateWay需要订阅 broadcast_msg 主题
// topic: broadcast_msg
// arg: BroadcastMsgRequest
type BroadcastMsgRequest struct {
	SendType BroadCastType `protobuf:"varint,1,opt,name=send_type,json=sendType,proto3,enum=steve.proto.gaterpc.BroadCastType" json:"send_type,omitempty"`
	SendId   int64         `protobuf:"varint,2,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`
	// 消息头
	Header *Header `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	// 消息内容
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastMsgRequest) Reset()         { *m = BroadcastMsgRequest{} }
func (m *BroadcastMsgRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastMsgRequest) ProtoMessage()    {}
func (*BroadcastMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gate_rpc_82e280abc3e5c7d4, []int{6}
}
func (m *BroadcastMsgRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BroadcastMsgRequest.Unmarshal(m, b)
}
func (m *BroadcastMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BroadcastMsgRequest.Marshal(b, m, deterministic)
}
func (dst *BroadcastMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastMsgRequest.Merge(dst, src)
}
func (m *BroadcastMsgRequest) XXX_Size() int {
	return xxx_messageInfo_BroadcastMsgRequest.Size(m)
}
func (m *BroadcastMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastMsgRequest proto.InternalMessageInfo

func (m *BroadcastMsgRequest) GetSendType() BroadCastType {
	if m != nil {
		return m.SendType
	}
	return BroadCastType_TO_ALL
}

func (m *BroadcastMsgRequest) GetSendId() int64 {
	if m != nil {
		return m.SendId
	}
	return 0
}

func (m *BroadcastMsgRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BroadcastMsgRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "steve.proto.gaterpc.Header")
	proto.RegisterType((*ClientMessage)(nil), "steve.proto.gaterpc.ClientMessage")
	proto.RegisterType((*ResponseMessage)(nil), "steve.proto.gaterpc.ResponseMessage")
	proto.RegisterType((*HandleResult)(nil), "steve.proto.gaterpc.HandleResult")
	proto.RegisterType((*SendMessageRequest)(nil), "steve.proto.gaterpc.SendMessageRequest")
	proto.RegisterType((*SendMessageResult)(nil), "steve.proto.gaterpc.SendMessageResult")
	proto.RegisterType((*BroadcastMsgRequest)(nil), "steve.proto.gaterpc.BroadcastMsgRequest")
	proto.RegisterEnum("steve.proto.gaterpc.BroadCastType", BroadCastType_name, BroadCastType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageHandlerClient is the client API for MessageHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageHandlerClient interface {
	HandleClientMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*HandleResult, error)
}

type messageHandlerClient struct {
	cc *grpc.ClientConn
}

func NewMessageHandlerClient(cc *grpc.ClientConn) MessageHandlerClient {
	return &messageHandlerClient{cc}
}

func (c *messageHandlerClient) HandleClientMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*HandleResult, error) {
	out := new(HandleResult)
	err := c.cc.Invoke(ctx, "/steve.proto.gaterpc.MessageHandler/HandleClientMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageHandlerServer is the server API for MessageHandler service.
type MessageHandlerServer interface {
	HandleClientMessage(context.Context, *ClientMessage) (*HandleResult, error)
}

func RegisterMessageHandlerServer(s *grpc.Server, srv MessageHandlerServer) {
	s.RegisterService(&_MessageHandler_serviceDesc, srv)
}

func _MessageHandler_HandleClientMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageHandlerServer).HandleClientMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/steve.proto.gaterpc.MessageHandler/HandleClientMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageHandlerServer).HandleClientMessage(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "steve.proto.gaterpc.MessageHandler",
	HandlerType: (*MessageHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleClientMessage",
			Handler:    _MessageHandler_HandleClientMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gate_rpc.proto",
}

// MessageSenderClient is the client API for MessageSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageSenderClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResult, error)
}

type messageSenderClient struct {
	cc *grpc.ClientConn
}

func NewMessageSenderClient(cc *grpc.ClientConn) MessageSenderClient {
	return &messageSenderClient{cc}
}

func (c *messageSenderClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResult, error) {
	out := new(SendMessageResult)
	err := c.cc.Invoke(ctx, "/steve.proto.gaterpc.MessageSender/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageSenderServer is the server API for MessageSender service.
type MessageSenderServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResult, error)
}

func RegisterMessageSenderServer(s *grpc.Server, srv MessageSenderServer) {
	s.RegisterService(&_MessageSender_serviceDesc, srv)
}

func _MessageSender_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSenderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/steve.proto.gaterpc.MessageSender/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSenderServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "steve.proto.gaterpc.MessageSender",
	HandlerType: (*MessageSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageSender_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gate_rpc.proto",
}

func init() { proto.RegisterFile("gate_rpc.proto", fileDescriptor_gate_rpc_82e280abc3e5c7d4) }

var fileDescriptor_gate_rpc_82e280abc3e5c7d4 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xad, 0xed, 0xd4, 0x4d, 0xc6, 0x89, 0xbf, 0x7c, 0x1b, 0x21, 0xac, 0xf6, 0x40, 0xba, 0x20,
	0x88, 0x38, 0xe4, 0xe0, 0xfe, 0x00, 0xd4, 0x86, 0x4a, 0x89, 0x94, 0x36, 0x68, 0xb1, 0x90, 0xe0,
	0x80, 0xd9, 0x66, 0x47, 0x26, 0x6a, 0x6a, 0xbb, 0xbb, 0x5b, 0xa4, 0x70, 0xe6, 0x47, 0xf1, 0xf3,
	0x90, 0xd7, 0x8e, 0x52, 0x17, 0x23, 0xe8, 0x6d, 0x66, 0xf7, 0xcd, 0xbc, 0x79, 0x6f, 0x06, 0xfc,
	0x84, 0x6b, 0x8c, 0x65, 0xbe, 0x1c, 0xe7, 0x32, 0xd3, 0x19, 0x19, 0x28, 0x8d, 0xdf, 0xb0, 0x4c,
	0xc6, 0xc5, 0x9f, 0xcc, 0x97, 0xf4, 0x19, 0xb8, 0x53, 0xe4, 0x02, 0x25, 0x79, 0x02, 0xee, 0x8d,
	0x4a, 0xe2, 0x95, 0x08, 0xac, 0xa1, 0x35, 0xea, 0xb1, 0xfd, 0x1b, 0x95, 0xcc, 0x04, 0xfd, 0x61,
	0x41, 0x6f, 0xb2, 0x5e, 0x61, 0xaa, 0x2f, 0x50, 0x29, 0x9e, 0x20, 0x39, 0x82, 0x4e, 0xbe, 0xe6,
	0x1b, 0x94, 0x5b, 0x6c, 0x8b, 0xb5, 0xcb, 0x87, 0x99, 0x20, 0x27, 0xe0, 0x7e, 0x35, 0xfd, 0x02,
	0x67, 0x68, 0x8d, 0xbc, 0xf0, 0x68, 0xdc, 0xc0, 0x3a, 0x2e, 0x29, 0x59, 0x05, 0x25, 0xc7, 0xd0,
	0x95, 0x78, 0x7b, 0x87, 0x4a, 0xc7, 0x82, 0x6b, 0x1e, 0xb4, 0x86, 0xd6, 0xa8, 0xcb, 0xbc, 0xea,
	0xed, 0x2d, 0xd7, 0x9c, 0x7e, 0x82, 0xff, 0x18, 0xaa, 0x3c, 0x4b, 0x15, 0x6e, 0xe7, 0xd8, 0x51,
	0x59, 0xff, 0x4e, 0x45, 0xa0, 0x75, 0x95, 0x89, 0x4d, 0x60, 0x1b, 0x0a, 0x13, 0x53, 0x06, 0xdd,
	0x29, 0x4f, 0xc5, 0x1a, 0x19, 0xaa, 0xbb, 0xb5, 0x26, 0x67, 0xd0, 0x91, 0x15, 0x97, 0x0a, 0xac,
	0xa1, 0x33, 0xf2, 0xc2, 0x17, 0x8d, 0xbd, 0x1f, 0x4c, 0xc4, 0x76, 0x65, 0xf4, 0x3b, 0x90, 0xf7,
	0x98, 0x8a, 0xed, 0x4f, 0xa9, 0xe4, 0xa1, 0x75, 0xce, 0x1f, 0xac, 0xb3, 0x1f, 0xa5, 0xc7, 0x58,
	0xe6, 0x94, 0x7a, 0x8a, 0x98, 0x3e, 0x87, 0xff, 0x6b, 0xdc, 0x46, 0x94, 0x0f, 0x76, 0x76, 0x6d,
	0x3a, 0xb7, 0x99, 0x9d, 0x5d, 0xd3, 0x9f, 0x16, 0x0c, 0xce, 0x64, 0xc6, 0xc5, 0x92, 0x2b, 0x7d,
	0xa1, 0x92, 0xed, 0x88, 0x6f, 0xa0, 0xa3, 0x30, 0x15, 0xb1, 0xde, 0xe4, 0x68, 0x8c, 0xf5, 0x43,
	0xda, 0x38, 0x88, 0x29, 0x9e, 0x70, 0xa5, 0xa3, 0x4d, 0x8e, 0xac, 0x5d, 0x14, 0x15, 0x11, 0x79,
	0x0a, 0x07, 0xa6, 0xc1, 0x4a, 0x18, 0x36, 0x87, 0xb9, 0x45, 0x5a, 0xd3, 0xd7, 0x7a, 0xbc, 0xbe,
	0xfd, 0x9d, 0xbe, 0xd7, 0xe7, 0xd0, 0xab, 0x91, 0x13, 0x00, 0x37, 0x5a, 0xc4, 0xa7, 0xf3, 0x79,
	0x7f, 0x8f, 0xf8, 0x00, 0xd1, 0x22, 0x9e, 0x4c, 0x4f, 0x2f, 0x2f, 0xcf, 0xe7, 0x7d, 0x8b, 0x78,
	0x70, 0x10, 0x2d, 0xe2, 0x77, 0x6c, 0xf1, 0xa1, 0x6f, 0x57, 0xc9, 0x64, 0x16, 0x7d, 0xec, 0x3b,
	0x61, 0x0e, 0x7e, 0x65, 0x51, 0xb9, 0x7d, 0x49, 0x3e, 0xc3, 0xa0, 0x0c, 0xeb, 0x07, 0xdf, 0xac,
	0xbf, 0x86, 0x39, 0x3c, 0x6e, 0x16, 0x73, 0xef, 0xac, 0xe8, 0x5e, 0x78, 0x0b, 0xbd, 0x0a, 0x5f,
	0xec, 0x07, 0x25, 0xf9, 0x02, 0xde, 0xbd, 0x4d, 0x91, 0x57, 0x8d, 0x4d, 0x7e, 0xbf, 0xa3, 0xc3,
	0x97, 0x7f, 0x07, 0x96, 0x94, 0x57, 0xae, 0x81, 0x9c, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x8b,
	0xf4, 0xed, 0x25, 0x0d, 0x04, 0x00, 0x00,
}
