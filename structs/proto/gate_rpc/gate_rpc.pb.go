// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gate_rpc.proto

/*
Package steve_proto_gaterpc is a generated protocol buffer package.

It is generated from these files:
	gate_rpc.proto

It has these top-level messages:
	Header
	ClientMessage
	ResponseMessage
	HandleResult
	SendMessageRequest
	SendMessageResult
*/
package steve_proto_gaterpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	MsgId uint32 `protobuf:"varint,1,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Header) GetMsgId() uint32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

// 客户端消息
type ClientMessage struct {
	// 客户端 ID
	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// 消息头
	Header *Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	// 消息内容
	RequestData []byte `protobuf:"bytes,3,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
}

func (m *ClientMessage) Reset()                    { *m = ClientMessage{} }
func (m *ClientMessage) String() string            { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()               {}
func (*ClientMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClientMessage) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ClientMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientMessage) GetRequestData() []byte {
	if m != nil {
		return m.RequestData
	}
	return nil
}

// ResponseMessage 回复消息
type ResponseMessage struct {
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Body   []byte  `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *ResponseMessage) Reset()                    { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string            { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()               {}
func (*ResponseMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ResponseMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// 处理结果
type HandleResult struct {
	// 回复数据， 长度为空时则不需要回复
	Responses []*ResponseMessage `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *HandleResult) Reset()                    { *m = HandleResult{} }
func (m *HandleResult) String() string            { return proto.CompactTextString(m) }
func (*HandleResult) ProtoMessage()               {}
func (*HandleResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HandleResult) GetResponses() []*ResponseMessage {
	if m != nil {
		return m.Responses
	}
	return nil
}

// 消息发送请求
type SendMessageRequest struct {
	// 客户端 ID 列表
	ClientId []uint64 `protobuf:"varint,1,rep,packed,name=client_id,json=clientId" json:"client_id,omitempty"`
	// 消息头
	Header *Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	// 消息内容
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendMessageRequest) Reset()                    { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()               {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SendMessageRequest) GetClientId() []uint64 {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *SendMessageRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SendMessageRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 消息发送结果
type SendMessageResult struct {
	// 是否发送成功
	Ok bool `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *SendMessageResult) Reset()                    { *m = SendMessageResult{} }
func (m *SendMessageResult) String() string            { return proto.CompactTextString(m) }
func (*SendMessageResult) ProtoMessage()               {}
func (*SendMessageResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SendMessageResult) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Header)(nil), "steve.proto.gaterpc.Header")
	proto.RegisterType((*ClientMessage)(nil), "steve.proto.gaterpc.ClientMessage")
	proto.RegisterType((*ResponseMessage)(nil), "steve.proto.gaterpc.ResponseMessage")
	proto.RegisterType((*HandleResult)(nil), "steve.proto.gaterpc.HandleResult")
	proto.RegisterType((*SendMessageRequest)(nil), "steve.proto.gaterpc.SendMessageRequest")
	proto.RegisterType((*SendMessageResult)(nil), "steve.proto.gaterpc.SendMessageResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageHandler service

type MessageHandlerClient interface {
	HandleClientMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*HandleResult, error)
}

type messageHandlerClient struct {
	cc *grpc.ClientConn
}

func NewMessageHandlerClient(cc *grpc.ClientConn) MessageHandlerClient {
	return &messageHandlerClient{cc}
}

func (c *messageHandlerClient) HandleClientMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*HandleResult, error) {
	out := new(HandleResult)
	err := grpc.Invoke(ctx, "/steve.proto.gaterpc.MessageHandler/HandleClientMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageHandler service

type MessageHandlerServer interface {
	HandleClientMessage(context.Context, *ClientMessage) (*HandleResult, error)
}

func RegisterMessageHandlerServer(s *grpc.Server, srv MessageHandlerServer) {
	s.RegisterService(&_MessageHandler_serviceDesc, srv)
}

func _MessageHandler_HandleClientMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageHandlerServer).HandleClientMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/steve.proto.gaterpc.MessageHandler/HandleClientMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageHandlerServer).HandleClientMessage(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "steve.proto.gaterpc.MessageHandler",
	HandlerType: (*MessageHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleClientMessage",
			Handler:    _MessageHandler_HandleClientMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gate_rpc.proto",
}

// Client API for MessageSender service

type MessageSenderClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResult, error)
}

type messageSenderClient struct {
	cc *grpc.ClientConn
}

func NewMessageSenderClient(cc *grpc.ClientConn) MessageSenderClient {
	return &messageSenderClient{cc}
}

func (c *messageSenderClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResult, error) {
	out := new(SendMessageResult)
	err := grpc.Invoke(ctx, "/steve.proto.gaterpc.MessageSender/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageSender service

type MessageSenderServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResult, error)
}

func RegisterMessageSenderServer(s *grpc.Server, srv MessageSenderServer) {
	s.RegisterService(&_MessageSender_serviceDesc, srv)
}

func _MessageSender_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSenderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/steve.proto.gaterpc.MessageSender/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSenderServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "steve.proto.gaterpc.MessageSender",
	HandlerType: (*MessageSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageSender_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gate_rpc.proto",
}

func init() { proto.RegisterFile("gate_rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xdf, 0x02, 0x6f, 0x03, 0xd3, 0xc2, 0x9b, 0x77, 0x89, 0x49, 0x03, 0x07, 0xcb, 0x6a,
	0xb4, 0xa7, 0x1e, 0xca, 0x37, 0x50, 0x0f, 0x70, 0xf0, 0xb2, 0xde, 0x3c, 0x88, 0x0b, 0x3b, 0xa9,
	0x04, 0x68, 0xcb, 0xee, 0x62, 0xa2, 0x67, 0x3f, 0xb8, 0x61, 0xb7, 0x84, 0x3f, 0x36, 0xd1, 0xc4,
	0xdb, 0x74, 0xe6, 0xe9, 0x3c, 0xbf, 0x79, 0x16, 0x3a, 0x29, 0xd7, 0x38, 0x91, 0xc5, 0x2c, 0x2e,
	0x64, 0xae, 0x73, 0xd2, 0x55, 0x1a, 0x5f, 0xd1, 0x7e, 0xc4, 0xdb, 0x99, 0x2c, 0x66, 0xf4, 0x1c,
	0xdc, 0x11, 0x72, 0x81, 0x92, 0x9c, 0x81, 0xbb, 0x52, 0xe9, 0x64, 0x2e, 0x02, 0x27, 0x74, 0xa2,
	0x36, 0xfb, 0xbb, 0x52, 0xe9, 0x58, 0xd0, 0x0f, 0x07, 0xda, 0xb7, 0xcb, 0x39, 0x66, 0xfa, 0x1e,
	0x95, 0xe2, 0x29, 0x92, 0x3e, 0xb4, 0x66, 0xa6, 0xb1, 0xd3, 0x36, 0x58, 0xd3, 0x36, 0xc6, 0x82,
	0x0c, 0xc1, 0x7d, 0x31, 0xfb, 0x82, 0x5a, 0xe8, 0x44, 0x5e, 0xd2, 0x8f, 0x2b, 0x5c, 0x63, 0x6b,
	0xc9, 0x4a, 0x29, 0x19, 0x80, 0x2f, 0x71, 0xbd, 0x41, 0xa5, 0x27, 0x82, 0x6b, 0x1e, 0xd4, 0x43,
	0x27, 0xf2, 0x99, 0x57, 0xf6, 0xee, 0xb8, 0xe6, 0xf4, 0x11, 0xfe, 0x31, 0x54, 0x45, 0x9e, 0x29,
	0xdc, 0x71, 0xec, 0xad, 0x9c, 0x9f, 0x5b, 0x11, 0x68, 0x4c, 0x73, 0xf1, 0x66, 0xe8, 0x7c, 0x66,
	0x6a, 0xca, 0xc0, 0x1f, 0xf1, 0x4c, 0x2c, 0x91, 0xa1, 0xda, 0x2c, 0x35, 0xb9, 0x81, 0x96, 0x2c,
	0xbd, 0x54, 0xe0, 0x84, 0xf5, 0xc8, 0x4b, 0x2e, 0x2b, 0x77, 0x9f, 0x10, 0xb1, 0xfd, 0x6f, 0xf4,
	0x1d, 0xc8, 0x03, 0x66, 0x62, 0x37, 0xb1, 0x97, 0x9c, 0x46, 0x57, 0xff, 0x7d, 0x74, 0x04, 0x1a,
	0x07, 0x91, 0x99, 0x9a, 0x5e, 0xc0, 0xff, 0x23, 0x6f, 0x73, 0x54, 0x07, 0x6a, 0xf9, 0xc2, 0x6c,
	0x6e, 0xb2, 0x5a, 0xbe, 0x48, 0x0a, 0xe8, 0x94, 0x02, 0x7b, 0xbb, 0x24, 0x4f, 0xd0, 0xb5, 0xe5,
	0xf1, 0x73, 0xd3, 0x4a, 0x8c, 0x23, 0x4d, 0x6f, 0x50, 0x8d, 0x7a, 0x10, 0x2a, 0xfd, 0x93, 0xac,
	0xa1, 0x5d, 0xea, 0xb7, 0x74, 0x28, 0xc9, 0x33, 0x78, 0x07, 0x9c, 0xe4, 0xba, 0x72, 0xc9, 0xd7,
	0x14, 0x7b, 0x57, 0xdf, 0x0b, 0xad, 0xe5, 0xd4, 0x35, 0x92, 0xe1, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb0, 0x43, 0xb0, 0xa6, 0x0b, 0x03, 0x00, 0x00,
}
