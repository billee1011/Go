// Automatically generated by MockGen. DO NOT EDIT!
// Source: socket.go

package socket

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
)

// Mock of Socket interface
type MockSocket struct {
	ctrl     *gomock.Controller
	recorder *_MockSocketRecorder
}

// Recorder for MockSocket (not exported)
type _MockSocketRecorder struct {
	mock *MockSocket
}

func NewMockSocket(ctrl *gomock.Controller) *MockSocket {
	mock := &MockSocket{ctrl: ctrl}
	mock.recorder = &_MockSocketRecorder{mock}
	return mock
}

func (_m *MockSocket) EXPECT() *_MockSocketRecorder {
	return _m.recorder
}

func (_m *MockSocket) SendPackage(pkg []byte) error {
	ret := _m.ctrl.Call(_m, "SendPackage", pkg)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) SendPackage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendPackage", arg0)
}

func (_m *MockSocket) RecvPackage() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "RecvPackage")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSocketRecorder) RecvPackage() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RecvPackage")
}

func (_m *MockSocket) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of SocketFactory interface
type MockSocketFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockSocketFactoryRecorder
}

// Recorder for MockSocketFactory (not exported)
type _MockSocketFactoryRecorder struct {
	mock *MockSocketFactory
}

func NewMockSocketFactory(ctrl *gomock.Controller) *MockSocketFactory {
	mock := &MockSocketFactory{ctrl: ctrl}
	mock.recorder = &_MockSocketFactoryRecorder{mock}
	return mock
}

func (_m *MockSocketFactory) EXPECT() *_MockSocketFactoryRecorder {
	return _m.recorder
}

func (_m *MockSocketFactory) NewSocket(conn net.Conn, unpacker Unpacker) (Socket, error) {
	ret := _m.ctrl.Call(_m, "NewSocket", conn, unpacker)
	ret0, _ := ret[0].(Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSocketFactoryRecorder) NewSocket(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewSocket", arg0, arg1)
}
