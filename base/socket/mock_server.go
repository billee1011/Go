// Automatically generated by MockGen. DO NOT EDIT!
// Source: server.go

package socket

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockServerRecorder
}

// Recorder for MockServer (not exported)
type _MockServerRecorder struct {
	mock *MockServer
}

func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &_MockServerRecorder{mock}
	return mock
}

func (_m *MockServer) EXPECT() *_MockServerRecorder {
	return _m.recorder
}

func (_m *MockServer) Listen(addr string) error {
	ret := _m.ctrl.Call(_m, "Listen", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Listen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Listen", arg0)
}

func (_m *MockServer) Accept() (Socket, error) {
	ret := _m.ctrl.Call(_m, "Accept")
	ret0, _ := ret[0].(Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) Accept() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Accept")
}

func (_m *MockServer) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
