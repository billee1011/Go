// Code generated by protoc-gen-go. DO NOT EDIT.
// source: errors.proto

package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ErrCode 错误码
type ErrCode int32

const (
	ErrCode_EC_SUCCESS ErrCode = 0
	ErrCode_EC_FAIL    ErrCode = 1
	// 匹配错误
	ErrCode_EC_MATCH_ALREADY_GAMEING ErrCode = 257
	// 身份认证
	ErrCode_EC_INVALID_ID_CARD_OR_NAME ErrCode = 288
	ErrCode_EC_REAL_NAME_ALREADY       ErrCode = 289
)

var ErrCode_name = map[int32]string{
	0:   "EC_SUCCESS",
	1:   "EC_FAIL",
	257: "EC_MATCH_ALREADY_GAMEING",
	288: "EC_INVALID_ID_CARD_OR_NAME",
	289: "EC_REAL_NAME_ALREADY",
}
var ErrCode_value = map[string]int32{
	"EC_SUCCESS":                 0,
	"EC_FAIL":                    1,
	"EC_MATCH_ALREADY_GAMEING":   257,
	"EC_INVALID_ID_CARD_OR_NAME": 288,
	"EC_REAL_NAME_ALREADY":       289,
}

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}
func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}
func (x *ErrCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrCode_value, data, "ErrCode")
	if err != nil {
		return err
	}
	*x = ErrCode(value)
	return nil
}
func (ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func init() {
	proto.RegisterEnum("common.ErrCode", ErrCode_name, ErrCode_value)
}

func init() { proto.RegisterFile("errors.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xce, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x80, 0x61, 0xdb, 0x83, 0x85, 0x51, 0x24, 0x04, 0x91, 0x2a, 0x88, 0x77, 0x0f, 0xf6, 0x19,
	0xc6, 0xc9, 0x58, 0x03, 0x69, 0x85, 0x54, 0x05, 0xbd, 0x0c, 0x58, 0x73, 0x10, 0x6c, 0x53, 0xd2,
	0xb2, 0xf7, 0xbe, 0xc9, 0xee, 0x9b, 0x2e, 0xec, 0xb2, 0xd7, 0xff, 0xf0, 0xf3, 0xc1, 0x65, 0x48,
	0x29, 0xa6, 0xf9, 0x69, 0x4a, 0x71, 0x89, 0xfa, 0xbc, 0x8f, 0xc3, 0x10, 0xc7, 0xc7, 0x35, 0x83,
	0x82, 0x53, 0xa2, 0xf8, 0x1b, 0xf4, 0x15, 0x00, 0x93, 0x74, 0x1f, 0x44, 0xdc, 0x75, 0xea, 0x4c,
	0x5f, 0x40, 0xc1, 0x24, 0x2f, 0x68, 0x9d, 0xca, 0xf4, 0x3d, 0x94, 0x4c, 0xd2, 0xe0, 0x3b, 0xbd,
	0x0a, 0x3a, 0xcf, 0x68, 0xbe, 0xa4, 0xc6, 0x86, 0x6d, 0x5b, 0xab, 0x35, 0xd7, 0x0f, 0x70, 0xc7,
	0x24, 0xb6, 0xfd, 0x44, 0x67, 0x8d, 0x58, 0x23, 0x84, 0xde, 0xc8, 0x9b, 0x97, 0x16, 0x1b, 0x56,
	0xdb, 0x5c, 0xdf, 0xc2, 0x35, 0x93, 0x78, 0x46, 0x77, 0x48, 0xa7, 0x87, 0xda, 0xe5, 0xcf, 0xe5,
	0xf7, 0xcd, 0xbc, 0x84, 0x4d, 0xa8, 0xfa, 0xff, 0xbf, 0x30, 0x2e, 0x32, 0xfd, 0x54, 0x47, 0xdd,
	0x3e, 0x00, 0x00, 0xff, 0xff, 0x67, 0x7b, 0xc6, 0xfe, 0xb4, 0x00, 0x00, 0x00,
}
