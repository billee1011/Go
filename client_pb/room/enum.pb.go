// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enum.proto

package room

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CardColor 卡牌花色
type CardColor int32

const (
	CardColor_CC_WAN  CardColor = 1
	CardColor_CC_TIAO CardColor = 2
	CardColor_CC_TONG CardColor = 3
	CardColor_CC_ZI   CardColor = 4
	CardColor_CC_HUA  CardColor = 5
)

var CardColor_name = map[int32]string{
	1: "CC_WAN",
	2: "CC_TIAO",
	3: "CC_TONG",
	4: "CC_ZI",
	5: "CC_HUA",
}
var CardColor_value = map[string]int32{
	"CC_WAN":  1,
	"CC_TIAO": 2,
	"CC_TONG": 3,
	"CC_ZI":   4,
	"CC_HUA":  5,
}

func (x CardColor) Enum() *CardColor {
	p := new(CardColor)
	*p = x
	return p
}
func (x CardColor) String() string {
	return proto.EnumName(CardColor_name, int32(x))
}
func (x *CardColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CardColor_value, data, "CardColor")
	if err != nil {
		return err
	}
	*x = CardColor(value)
	return nil
}
func (CardColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Direction 换三张方向
type Direction int32

const (
	Direction_ClockWise     Direction = 0
	Direction_Opposite      Direction = 1
	Direction_AntiClockWise Direction = 2
)

var Direction_name = map[int32]string{
	0: "ClockWise",
	1: "Opposite",
	2: "AntiClockWise",
}
var Direction_value = map[string]int32{
	"ClockWise":     0,
	"Opposite":      1,
	"AntiClockWise": 2,
}

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}
func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}
func (x *Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Direction_value, data, "Direction")
	if err != nil {
		return err
	}
	*x = Direction(value)
	return nil
}
func (Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// XingpaiAction 行牌 ACTION
type XingpaiAction int32

const (
	XingpaiAction_XA_CHI  XingpaiAction = 0
	XingpaiAction_XA_PENG XingpaiAction = 1
	XingpaiAction_XA_GANG XingpaiAction = 2
	XingpaiAction_XA_HU   XingpaiAction = 3
	XingpaiAction_XA_QI   XingpaiAction = 4
)

var XingpaiAction_name = map[int32]string{
	0: "XA_CHI",
	1: "XA_PENG",
	2: "XA_GANG",
	3: "XA_HU",
	4: "XA_QI",
}
var XingpaiAction_value = map[string]int32{
	"XA_CHI":  0,
	"XA_PENG": 1,
	"XA_GANG": 2,
	"XA_HU":   3,
	"XA_QI":   4,
}

func (x XingpaiAction) Enum() *XingpaiAction {
	p := new(XingpaiAction)
	*p = x
	return p
}
func (x XingpaiAction) String() string {
	return proto.EnumName(XingpaiAction_name, int32(x))
}
func (x *XingpaiAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(XingpaiAction_value, data, "XingpaiAction")
	if err != nil {
		return err
	}
	*x = XingpaiAction(value)
	return nil
}
func (XingpaiAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// GangType 杠的类型
type GangType int32

const (
	GangType_MingGang GangType = 0
	GangType_BuGang   GangType = 1
	GangType_AnGang   GangType = 2
)

var GangType_name = map[int32]string{
	0: "MingGang",
	1: "BuGang",
	2: "AnGang",
}
var GangType_value = map[string]int32{
	"MingGang": 0,
	"BuGang":   1,
	"AnGang":   2,
}

func (x GangType) Enum() *GangType {
	p := new(GangType)
	*p = x
	return p
}
func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (x *GangType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GangType_value, data, "GangType")
	if err != nil {
		return err
	}
	*x = GangType(value)
	return nil
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// HuType 胡类型
type HuType int32

const (
	HuType_HT_GANGHOUPAO        HuType = 0
	HuType_HT_QIANGGANGHU       HuType = 1
	HuType_HT_DIANPAO           HuType = 2
	HuType_HT_GANGKAI           HuType = 3
	HuType_HT_HAIDILAO          HuType = 4
	HuType_HT_GANGSHANGHAIDILAO HuType = 5
	HuType_HT_ZIMO              HuType = 6
	HuType_HT_TIANHU            HuType = 7
	HuType_HT_DIHU              HuType = 8
	HuType_HT_MIAOSHOUHUICHUN   HuType = 9
)

var HuType_name = map[int32]string{
	0: "HT_GANGHOUPAO",
	1: "HT_QIANGGANGHU",
	2: "HT_DIANPAO",
	3: "HT_GANGKAI",
	4: "HT_HAIDILAO",
	5: "HT_GANGSHANGHAIDILAO",
	6: "HT_ZIMO",
	7: "HT_TIANHU",
	8: "HT_DIHU",
	9: "HT_MIAOSHOUHUICHUN",
}
var HuType_value = map[string]int32{
	"HT_GANGHOUPAO":        0,
	"HT_QIANGGANGHU":       1,
	"HT_DIANPAO":           2,
	"HT_GANGKAI":           3,
	"HT_HAIDILAO":          4,
	"HT_GANGSHANGHAIDILAO": 5,
	"HT_ZIMO":              6,
	"HT_TIANHU":            7,
	"HT_DIHU":              8,
	"HT_MIAOSHOUHUICHUN":   9,
}

func (x HuType) Enum() *HuType {
	p := new(HuType)
	*p = x
	return p
}
func (x HuType) String() string {
	return proto.EnumName(HuType_name, int32(x))
}
func (x *HuType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HuType_value, data, "HuType")
	if err != nil {
		return err
	}
	*x = HuType(value)
	return nil
}
func (HuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

// 麻将组类型
type CardsGroupType int32

const (
	CardsGroupType_CGT_HAND     CardsGroupType = 0
	CardsGroupType_CGT_CHI      CardsGroupType = 1
	CardsGroupType_CGT_PENG     CardsGroupType = 2
	CardsGroupType_CGT_MINGGANG CardsGroupType = 3
	CardsGroupType_CGT_ANGANG   CardsGroupType = 4
	CardsGroupType_CGT_BUGANG   CardsGroupType = 5
	CardsGroupType_CGT_HU       CardsGroupType = 6
	CardsGroupType_CGT_HUA      CardsGroupType = 7
	CardsGroupType_CGT_OUT      CardsGroupType = 8
)

var CardsGroupType_name = map[int32]string{
	0: "CGT_HAND",
	1: "CGT_CHI",
	2: "CGT_PENG",
	3: "CGT_MINGGANG",
	4: "CGT_ANGANG",
	5: "CGT_BUGANG",
	6: "CGT_HU",
	7: "CGT_HUA",
	8: "CGT_OUT",
}
var CardsGroupType_value = map[string]int32{
	"CGT_HAND":     0,
	"CGT_CHI":      1,
	"CGT_PENG":     2,
	"CGT_MINGGANG": 3,
	"CGT_ANGANG":   4,
	"CGT_BUGANG":   5,
	"CGT_HU":       6,
	"CGT_HUA":      7,
	"CGT_OUT":      8,
}

func (x CardsGroupType) Enum() *CardsGroupType {
	p := new(CardsGroupType)
	*p = x
	return p
}
func (x CardsGroupType) String() string {
	return proto.EnumName(CardsGroupType_name, int32(x))
}
func (x *CardsGroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CardsGroupType_value, data, "CardsGroupType")
	if err != nil {
		return err
	}
	*x = CardsGroupType(value)
	return nil
}
func (CardsGroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// SettleType 结算类型
type SettleType int32

const (
	SettleType_ST_ANGANG    SettleType = 0
	SettleType_ST_MINGGANG  SettleType = 1
	SettleType_ST_BUGANG    SettleType = 2
	SettleType_ST_DIANPAO   SettleType = 3
	SettleType_ST_ZIMO      SettleType = 4
	SettleType_ST_FLOWERPIG SettleType = 5
	SettleType_ST_YELL      SettleType = 6
	SettleType_ST_TAXREBEAT SettleType = 7
	SettleType_ST_CALLDIVER SettleType = 8
)

var SettleType_name = map[int32]string{
	0: "ST_ANGANG",
	1: "ST_MINGGANG",
	2: "ST_BUGANG",
	3: "ST_DIANPAO",
	4: "ST_ZIMO",
	5: "ST_FLOWERPIG",
	6: "ST_YELL",
	7: "ST_TAXREBEAT",
	8: "ST_CALLDIVER",
}
var SettleType_value = map[string]int32{
	"ST_ANGANG":    0,
	"ST_MINGGANG":  1,
	"ST_BUGANG":    2,
	"ST_DIANPAO":   3,
	"ST_ZIMO":      4,
	"ST_FLOWERPIG": 5,
	"ST_YELL":      6,
	"ST_TAXREBEAT": 7,
	"ST_CALLDIVER": 8,
}

func (x SettleType) Enum() *SettleType {
	p := new(SettleType)
	*p = x
	return p
}
func (x SettleType) String() string {
	return proto.EnumName(SettleType_name, int32(x))
}
func (x *SettleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettleType_value, data, "SettleType")
	if err != nil {
		return err
	}
	*x = SettleType(value)
	return nil
}
func (SettleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

// FanType 胡牌牌型
type FanType int32

const (
	FanType_FT_PINGHU            FanType = 0
	FanType_FT_QINGYISE          FanType = 1
	FanType_FT_QIDUI             FanType = 2
	FanType_FT_QINGQIDUI         FanType = 3
	FanType_FT_LONGQIDUI         FanType = 4
	FanType_FT_QINGLONGQIDUI     FanType = 5
	FanType_FT_PENGPENGHU        FanType = 6
	FanType_FT_QINGPENG          FanType = 7
	FanType_FT_JINGGOUDIAO       FanType = 8
	FanType_FT_QINGJINGGOUDIAO   FanType = 9
	FanType_FT_SHIBALUOHAN       FanType = 10
	FanType_FT_QINGSHIBALUOHAN   FanType = 11
	FanType_FT_DASIXI            FanType = 12
	FanType_FT_DASANYUAN         FanType = 13
	FanType_FT_JIULIANBAODENG    FanType = 14
	FanType_FT_DAYUWU            FanType = 15
	FanType_FT_XIAOYUWU          FanType = 16
	FanType_FT_DAQIXING          FanType = 17
	FanType_FT_LIANQIDUI         FanType = 18
	FanType_FT_SIGANG            FanType = 19
	FanType_FT_XIAOSIXI          FanType = 20
	FanType_FT_XIAOSANYUAN       FanType = 21
	FanType_FT_SHUANGLONGHUI     FanType = 22
	FanType_FT_ZIYISE            FanType = 23
	FanType_FT_SIANKE            FanType = 24
	FanType_FT_SITONGSHUN        FanType = 25
	FanType_FT_SANYUANQIDUI      FanType = 26
	FanType_FT_SIXIQIDUI         FanType = 27
	FanType_FT_SILIANKE          FanType = 28
	FanType_FT_SIBUGAO           FanType = 29
	FanType_FT_HUNYAOJIU         FanType = 30
	FanType_FT_SANGANG           FanType = 31
	FanType_FT_TIANTING          FanType = 32
	FanType_FT_SIZIKE            FanType = 33
	FanType_FT_DASANFENG         FanType = 34
	FanType_FT_SANTONGSHUN       FanType = 35
	FanType_FT_SANLIANKE         FanType = 36
	FanType_FT_QUANHUA           FanType = 37
	FanType_FT_SANANKE           FanType = 38
	FanType_FT_QINGLONG          FanType = 39
	FanType_FT_SANBUGAO          FanType = 40
	FanType_FT_SHUANGJIANKE      FanType = 41
	FanType_FT_SHUANGANGANG      FanType = 42
	FanType_FT_XIAOSANFENG       FanType = 43
	FanType_FT_HUNYISE           FanType = 44
	FanType_FT_QUANDAIYAO        FanType = 45
	FanType_FT_SHUANGMINGGANG    FanType = 46
	FanType_FT_BAOTING           FanType = 47
	FanType_FT_BAOTINGYIFA       FanType = 48
	FanType_FT_CHUNXIAQIUDONG    FanType = 49
	FanType_FT_MEILANZHUJU       FanType = 50
	FanType_FT_WUHUA             FanType = 51
	FanType_FT_MENFENGKE         FanType = 52
	FanType_FT_QUANFENGKE        FanType = 53
	FanType_FT_JIANKE            FanType = 54
	FanType_FT_SIGUIYI           FanType = 55
	FanType_FT_DUANYAO           FanType = 56
	FanType_FT_SHUANGANKE        FanType = 57
	FanType_FT_ANGANG            FanType = 58
	FanType_FT_MENQIANQING       FanType = 59
	FanType_FT_YIBANGAO          FanType = 60
	FanType_FT_LIANLIU           FanType = 61
	FanType_FT_LAOSHAOFU         FanType = 62
	FanType_FT_HUAPAI            FanType = 63
	FanType_FT_MINGGANG          FanType = 64
	FanType_FT_BIANZHANG         FanType = 65
	FanType_FT_KANZHANG          FanType = 66
	FanType_FT_DANDIAOJIANG      FanType = 67
	FanType_FT_TIANHU            FanType = 68
	FanType_FT_DIHU              FanType = 69
	FanType_FT_RENHU             FanType = 70
	FanType_FT_MIAOSHOUHUICHUN   FanType = 71
	FanType_FT_QUANQIUREN        FanType = 72
	FanType_FT_BUQIUREN          FanType = 73
	FanType_FT_JUEZHANG          FanType = 74
	FanType_FT_ZIMO              FanType = 75
	FanType_FT_GANGSHANGKAIHUA   FanType = 76
	FanType_FT_GANGSHANGHAIDILAO FanType = 77
	FanType_FT_GANGHOUPAO        FanType = 78
	FanType_FT_HAIDILAOYUE       FanType = 79
	FanType_FT_QIANGGANGHU       FanType = 80
	FanType_FT_DIANPAO           FanType = 81
)

var FanType_name = map[int32]string{
	0:  "FT_PINGHU",
	1:  "FT_QINGYISE",
	2:  "FT_QIDUI",
	3:  "FT_QINGQIDUI",
	4:  "FT_LONGQIDUI",
	5:  "FT_QINGLONGQIDUI",
	6:  "FT_PENGPENGHU",
	7:  "FT_QINGPENG",
	8:  "FT_JINGGOUDIAO",
	9:  "FT_QINGJINGGOUDIAO",
	10: "FT_SHIBALUOHAN",
	11: "FT_QINGSHIBALUOHAN",
	12: "FT_DASIXI",
	13: "FT_DASANYUAN",
	14: "FT_JIULIANBAODENG",
	15: "FT_DAYUWU",
	16: "FT_XIAOYUWU",
	17: "FT_DAQIXING",
	18: "FT_LIANQIDUI",
	19: "FT_SIGANG",
	20: "FT_XIAOSIXI",
	21: "FT_XIAOSANYUAN",
	22: "FT_SHUANGLONGHUI",
	23: "FT_ZIYISE",
	24: "FT_SIANKE",
	25: "FT_SITONGSHUN",
	26: "FT_SANYUANQIDUI",
	27: "FT_SIXIQIDUI",
	28: "FT_SILIANKE",
	29: "FT_SIBUGAO",
	30: "FT_HUNYAOJIU",
	31: "FT_SANGANG",
	32: "FT_TIANTING",
	33: "FT_SIZIKE",
	34: "FT_DASANFENG",
	35: "FT_SANTONGSHUN",
	36: "FT_SANLIANKE",
	37: "FT_QUANHUA",
	38: "FT_SANANKE",
	39: "FT_QINGLONG",
	40: "FT_SANBUGAO",
	41: "FT_SHUANGJIANKE",
	42: "FT_SHUANGANGANG",
	43: "FT_XIAOSANFENG",
	44: "FT_HUNYISE",
	45: "FT_QUANDAIYAO",
	46: "FT_SHUANGMINGGANG",
	47: "FT_BAOTING",
	48: "FT_BAOTINGYIFA",
	49: "FT_CHUNXIAQIUDONG",
	50: "FT_MEILANZHUJU",
	51: "FT_WUHUA",
	52: "FT_MENFENGKE",
	53: "FT_QUANFENGKE",
	54: "FT_JIANKE",
	55: "FT_SIGUIYI",
	56: "FT_DUANYAO",
	57: "FT_SHUANGANKE",
	58: "FT_ANGANG",
	59: "FT_MENQIANQING",
	60: "FT_YIBANGAO",
	61: "FT_LIANLIU",
	62: "FT_LAOSHAOFU",
	63: "FT_HUAPAI",
	64: "FT_MINGGANG",
	65: "FT_BIANZHANG",
	66: "FT_KANZHANG",
	67: "FT_DANDIAOJIANG",
	68: "FT_TIANHU",
	69: "FT_DIHU",
	70: "FT_RENHU",
	71: "FT_MIAOSHOUHUICHUN",
	72: "FT_QUANQIUREN",
	73: "FT_BUQIUREN",
	74: "FT_JUEZHANG",
	75: "FT_ZIMO",
	76: "FT_GANGSHANGKAIHUA",
	77: "FT_GANGSHANGHAIDILAO",
	78: "FT_GANGHOUPAO",
	79: "FT_HAIDILAOYUE",
	80: "FT_QIANGGANGHU",
	81: "FT_DIANPAO",
}
var FanType_value = map[string]int32{
	"FT_PINGHU":            0,
	"FT_QINGYISE":          1,
	"FT_QIDUI":             2,
	"FT_QINGQIDUI":         3,
	"FT_LONGQIDUI":         4,
	"FT_QINGLONGQIDUI":     5,
	"FT_PENGPENGHU":        6,
	"FT_QINGPENG":          7,
	"FT_JINGGOUDIAO":       8,
	"FT_QINGJINGGOUDIAO":   9,
	"FT_SHIBALUOHAN":       10,
	"FT_QINGSHIBALUOHAN":   11,
	"FT_DASIXI":            12,
	"FT_DASANYUAN":         13,
	"FT_JIULIANBAODENG":    14,
	"FT_DAYUWU":            15,
	"FT_XIAOYUWU":          16,
	"FT_DAQIXING":          17,
	"FT_LIANQIDUI":         18,
	"FT_SIGANG":            19,
	"FT_XIAOSIXI":          20,
	"FT_XIAOSANYUAN":       21,
	"FT_SHUANGLONGHUI":     22,
	"FT_ZIYISE":            23,
	"FT_SIANKE":            24,
	"FT_SITONGSHUN":        25,
	"FT_SANYUANQIDUI":      26,
	"FT_SIXIQIDUI":         27,
	"FT_SILIANKE":          28,
	"FT_SIBUGAO":           29,
	"FT_HUNYAOJIU":         30,
	"FT_SANGANG":           31,
	"FT_TIANTING":          32,
	"FT_SIZIKE":            33,
	"FT_DASANFENG":         34,
	"FT_SANTONGSHUN":       35,
	"FT_SANLIANKE":         36,
	"FT_QUANHUA":           37,
	"FT_SANANKE":           38,
	"FT_QINGLONG":          39,
	"FT_SANBUGAO":          40,
	"FT_SHUANGJIANKE":      41,
	"FT_SHUANGANGANG":      42,
	"FT_XIAOSANFENG":       43,
	"FT_HUNYISE":           44,
	"FT_QUANDAIYAO":        45,
	"FT_SHUANGMINGGANG":    46,
	"FT_BAOTING":           47,
	"FT_BAOTINGYIFA":       48,
	"FT_CHUNXIAQIUDONG":    49,
	"FT_MEILANZHUJU":       50,
	"FT_WUHUA":             51,
	"FT_MENFENGKE":         52,
	"FT_QUANFENGKE":        53,
	"FT_JIANKE":            54,
	"FT_SIGUIYI":           55,
	"FT_DUANYAO":           56,
	"FT_SHUANGANKE":        57,
	"FT_ANGANG":            58,
	"FT_MENQIANQING":       59,
	"FT_YIBANGAO":          60,
	"FT_LIANLIU":           61,
	"FT_LAOSHAOFU":         62,
	"FT_HUAPAI":            63,
	"FT_MINGGANG":          64,
	"FT_BIANZHANG":         65,
	"FT_KANZHANG":          66,
	"FT_DANDIAOJIANG":      67,
	"FT_TIANHU":            68,
	"FT_DIHU":              69,
	"FT_RENHU":             70,
	"FT_MIAOSHOUHUICHUN":   71,
	"FT_QUANQIUREN":        72,
	"FT_BUQIUREN":          73,
	"FT_JUEZHANG":          74,
	"FT_ZIMO":              75,
	"FT_GANGSHANGKAIHUA":   76,
	"FT_GANGSHANGHAIDILAO": 77,
	"FT_GANGHOUPAO":        78,
	"FT_HAIDILAOYUE":       79,
	"FT_QIANGGANGHU":       80,
	"FT_DIANPAO":           81,
}

func (x FanType) Enum() *FanType {
	p := new(FanType)
	*p = x
	return p
}
func (x FanType) String() string {
	return proto.EnumName(FanType_name, int32(x))
}
func (x *FanType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FanType_value, data, "FanType")
	if err != nil {
		return err
	}
	*x = FanType(value)
	return nil
}
func (FanType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

// 结算类型
type BillType int32

const (
	BillType_BILL_GANG       BillType = 0
	BillType_BILL_DIANPAO    BillType = 1
	BillType_BILL_ZIMO       BillType = 2
	BillType_BILL_CHECKPIG   BillType = 3
	BillType_BILL_CHECKSHOUT BillType = 4
	BillType_BILL_REFUND     BillType = 5
	BillType_BILL_TRANSFER   BillType = 6
)

var BillType_name = map[int32]string{
	0: "BILL_GANG",
	1: "BILL_DIANPAO",
	2: "BILL_ZIMO",
	3: "BILL_CHECKPIG",
	4: "BILL_CHECKSHOUT",
	5: "BILL_REFUND",
	6: "BILL_TRANSFER",
}
var BillType_value = map[string]int32{
	"BILL_GANG":       0,
	"BILL_DIANPAO":    1,
	"BILL_ZIMO":       2,
	"BILL_CHECKPIG":   3,
	"BILL_CHECKSHOUT": 4,
	"BILL_REFUND":     5,
	"BILL_TRANSFER":   6,
}

func (x BillType) Enum() *BillType {
	p := new(BillType)
	*p = x
	return p
}
func (x BillType) String() string {
	return proto.EnumName(BillType_name, int32(x))
}
func (x *BillType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BillType_value, data, "BillType")
	if err != nil {
		return err
	}
	*x = BillType(value)
	return nil
}
func (BillType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

// CartoonType 动画类型
type CartoonType int32

const (
	CartoonType_CTNT_FAPAI        CartoonType = 1
	CartoonType_CTNT_HUANSANZHANG CartoonType = 2
	CartoonType_CTNT_DDZ_FAPAI    CartoonType = 3
)

var CartoonType_name = map[int32]string{
	1: "CTNT_FAPAI",
	2: "CTNT_HUANSANZHANG",
	3: "CTNT_DDZ_FAPAI",
}
var CartoonType_value = map[string]int32{
	"CTNT_FAPAI":        1,
	"CTNT_HUANSANZHANG": 2,
	"CTNT_DDZ_FAPAI":    3,
}

func (x CartoonType) Enum() *CartoonType {
	p := new(CartoonType)
	*p = x
	return p
}
func (x CartoonType) String() string {
	return proto.EnumName(CartoonType_name, int32(x))
}
func (x *CartoonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CartoonType_value, data, "CartoonType")
	if err != nil {
		return err
	}
	*x = CartoonType(value)
	return nil
}
func (CartoonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

// GameStage:恢复对局当前游戏状态
type GameStage int32

const (
	GameStage_GAMESTAGE_INIT         GameStage = 0
	GameStage_GAMESTAGE_HUANSANZHANG GameStage = 1
	GameStage_GAMESTAGE_DINGQUE      GameStage = 2
	GameStage_GAMESTAGE_PLAYCARD     GameStage = 3
	GameStage_GAMESTAGE_END          GameStage = 4
)

var GameStage_name = map[int32]string{
	0: "GAMESTAGE_INIT",
	1: "GAMESTAGE_HUANSANZHANG",
	2: "GAMESTAGE_DINGQUE",
	3: "GAMESTAGE_PLAYCARD",
	4: "GAMESTAGE_END",
}
var GameStage_value = map[string]int32{
	"GAMESTAGE_INIT":         0,
	"GAMESTAGE_HUANSANZHANG": 1,
	"GAMESTAGE_DINGQUE":      2,
	"GAMESTAGE_PLAYCARD":     3,
	"GAMESTAGE_END":          4,
}

func (x GameStage) Enum() *GameStage {
	p := new(GameStage)
	*p = x
	return p
}
func (x GameStage) String() string {
	return proto.EnumName(GameStage_name, int32(x))
}
func (x *GameStage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameStage_value, data, "GameStage")
	if err != nil {
		return err
	}
	*x = GameStage(value)
	return nil
}
func (GameStage) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

// DeviceType 设备类型
type DeviceType int32

const (
	DeviceType_DT_ANDROID DeviceType = 0
	DeviceType_DT_IPHONE  DeviceType = 1
)

var DeviceType_name = map[int32]string{
	0: "DT_ANDROID",
	1: "DT_IPHONE",
}
var DeviceType_value = map[string]int32{
	"DT_ANDROID": 0,
	"DT_IPHONE":  1,
}

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}
func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (x *DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceType_value, data, "DeviceType")
	if err != nil {
		return err
	}
	*x = DeviceType(value)
	return nil
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

// GameId 游戏id
type GameId int32

const (
	GameId_GAMEID_XUELIU   GameId = 1
	GameId_GAMEID_XUEZHAN  GameId = 2
	GameId_GAMEID_DOUDIZHU GameId = 3
	GameId_GAMEID_ERRENMJ  GameId = 4
)

var GameId_name = map[int32]string{
	1: "GAMEID_XUELIU",
	2: "GAMEID_XUEZHAN",
	3: "GAMEID_DOUDIZHU",
	4: "GAMEID_ERRENMJ",
}
var GameId_value = map[string]int32{
	"GAMEID_XUELIU":   1,
	"GAMEID_XUEZHAN":  2,
	"GAMEID_DOUDIZHU": 3,
	"GAMEID_ERRENMJ":  4,
}

func (x GameId) Enum() *GameId {
	p := new(GameId)
	*p = x
	return p
}
func (x GameId) String() string {
	return proto.EnumName(GameId_name, int32(x))
}
func (x *GameId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameId_value, data, "GameId")
	if err != nil {
		return err
	}
	*x = GameId(value)
	return nil
}
func (GameId) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

// LocSourceType 位置信息来源类型
type LocSourceType int32

const (
	LocSourceType_LOC_SOURCE_BAIDU  LocSourceType = 0
	LocSourceType_LOC_SOURCE_JIZHAN LocSourceType = 1
)

var LocSourceType_name = map[int32]string{
	0: "LOC_SOURCE_BAIDU",
	1: "LOC_SOURCE_JIZHAN",
}
var LocSourceType_value = map[string]int32{
	"LOC_SOURCE_BAIDU":  0,
	"LOC_SOURCE_JIZHAN": 1,
}

func (x LocSourceType) Enum() *LocSourceType {
	p := new(LocSourceType)
	*p = x
	return p
}
func (x LocSourceType) String() string {
	return proto.EnumName(LocSourceType_name, int32(x))
}
func (x *LocSourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LocSourceType_value, data, "LocSourceType")
	if err != nil {
		return err
	}
	*x = LocSourceType(value)
	return nil
}
func (LocSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

// XingPaiState 玩家行牌状态，前端显示
type XingPaiState int32

const (
	XingPaiState_XP_STATE_NORMAL XingPaiState = 0
	XingPaiState_XP_STATE_HU     XingPaiState = 1
	XingPaiState_XP_STATE_GIVEUP XingPaiState = 2
)

var XingPaiState_name = map[int32]string{
	0: "XP_STATE_NORMAL",
	1: "XP_STATE_HU",
	2: "XP_STATE_GIVEUP",
}
var XingPaiState_value = map[string]int32{
	"XP_STATE_NORMAL": 0,
	"XP_STATE_HU":     1,
	"XP_STATE_GIVEUP": 2,
}

func (x XingPaiState) Enum() *XingPaiState {
	p := new(XingPaiState)
	*p = x
	return p
}
func (x XingPaiState) String() string {
	return proto.EnumName(XingPaiState_name, int32(x))
}
func (x *XingPaiState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(XingPaiState_value, data, "XingPaiState")
	if err != nil {
		return err
	}
	*x = XingPaiState(value)
	return nil
}
func (XingPaiState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

// TingType 听牌类型
type TingType int32

const (
	TingType_TT_NORMAL_TING TingType = 0
	TingType_TT_TIAN_TING   TingType = 1
)

var TingType_name = map[int32]string{
	0: "TT_NORMAL_TING",
	1: "TT_TIAN_TING",
}
var TingType_value = map[string]int32{
	"TT_NORMAL_TING": 0,
	"TT_TIAN_TING":   1,
}

func (x TingType) Enum() *TingType {
	p := new(TingType)
	*p = x
	return p
}
func (x TingType) String() string {
	return proto.EnumName(TingType_name, int32(x))
}
func (x *TingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TingType_value, data, "TingType")
	if err != nil {
		return err
	}
	*x = TingType(value)
	return nil
}
func (TingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

// QuitEnterType 退出加入类型，后面扩展 断线
type QuitEnterType int32

const (
	QuitEnterType_QET_QUIT  QuitEnterType = 0
	QuitEnterType_QET_ENTER QuitEnterType = 1
)

var QuitEnterType_name = map[int32]string{
	0: "QET_QUIT",
	1: "QET_ENTER",
}
var QuitEnterType_value = map[string]int32{
	"QET_QUIT":  0,
	"QET_ENTER": 1,
}

func (x QuitEnterType) Enum() *QuitEnterType {
	p := new(QuitEnterType)
	*p = x
	return p
}
func (x QuitEnterType) String() string {
	return proto.EnumName(QuitEnterType_name, int32(x))
}
func (x *QuitEnterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QuitEnterType_value, data, "QuitEnterType")
	if err != nil {
		return err
	}
	*x = QuitEnterType(value)
	return nil
}
func (QuitEnterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

// PropType 互动道具类型
type PropType int32

const (
	PropType_INVALID_PROP PropType = 0
	PropType_ROSE         PropType = 1
	PropType_BEER         PropType = 2
	PropType_BOMB         PropType = 3
	PropType_GRAB_CHICKEN PropType = 4
	PropType_EGG_GUN      PropType = 5
)

var PropType_name = map[int32]string{
	0: "INVALID_PROP",
	1: "ROSE",
	2: "BEER",
	3: "BOMB",
	4: "GRAB_CHICKEN",
	5: "EGG_GUN",
}
var PropType_value = map[string]int32{
	"INVALID_PROP": 0,
	"ROSE":         1,
	"BEER":         2,
	"BOMB":         3,
	"GRAB_CHICKEN": 4,
	"EGG_GUN":      5,
}

func (x PropType) Enum() *PropType {
	p := new(PropType)
	*p = x
	return p
}
func (x PropType) String() string {
	return proto.EnumName(PropType_name, int32(x))
}
func (x *PropType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PropType_value, data, "PropType")
	if err != nil {
		return err
	}
	*x = PropType(value)
	return nil
}
func (PropType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func init() {
	proto.RegisterEnum("room.CardColor", CardColor_name, CardColor_value)
	proto.RegisterEnum("room.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("room.XingpaiAction", XingpaiAction_name, XingpaiAction_value)
	proto.RegisterEnum("room.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("room.HuType", HuType_name, HuType_value)
	proto.RegisterEnum("room.CardsGroupType", CardsGroupType_name, CardsGroupType_value)
	proto.RegisterEnum("room.SettleType", SettleType_name, SettleType_value)
	proto.RegisterEnum("room.FanType", FanType_name, FanType_value)
	proto.RegisterEnum("room.BillType", BillType_name, BillType_value)
	proto.RegisterEnum("room.CartoonType", CartoonType_name, CartoonType_value)
	proto.RegisterEnum("room.GameStage", GameStage_name, GameStage_value)
	proto.RegisterEnum("room.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("room.GameId", GameId_name, GameId_value)
	proto.RegisterEnum("room.LocSourceType", LocSourceType_name, LocSourceType_value)
	proto.RegisterEnum("room.XingPaiState", XingPaiState_name, XingPaiState_value)
	proto.RegisterEnum("room.TingType", TingType_name, TingType_value)
	proto.RegisterEnum("room.QuitEnterType", QuitEnterType_name, QuitEnterType_value)
	proto.RegisterEnum("room.PropType", PropType_name, PropType_value)
}

func init() { proto.RegisterFile("enum.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0x4b, 0x93, 0xe2, 0xc8,
	0x11, 0x6e, 0x01, 0x4d, 0x43, 0x75, 0xd3, 0x93, 0xad, 0xed, 0x19, 0xaf, 0xd7, 0xef, 0xb7, 0xad,
	0x5d, 0xef, 0xac, 0xdf, 0x8f, 0x5d, 0x3f, 0x52, 0x52, 0x21, 0x15, 0x88, 0x12, 0x48, 0xaa, 0x69,
	0xe0, 0xa2, 0xc0, 0xbd, 0x8a, 0x09, 0xc2, 0x3d, 0xd0, 0xc1, 0xd0, 0x13, 0xe1, 0x83, 0xaf, 0xbe,
	0xfb, 0xec, 0x9f, 0xe2, 0x7f, 0xe1, 0x5f, 0xe4, 0xc8, 0x52, 0x0a, 0x18, 0x87, 0x0f, 0x44, 0x90,
	0x5f, 0xa5, 0x32, 0xbf, 0xfc, 0xb2, 0xaa, 0xb2, 0x84, 0xa8, 0x36, 0x4f, 0x6f, 0x3e, 0x7d, 0xdc,
	0x6d, 0xf7, 0x5b, 0xb7, 0xb3, 0xdb, 0x6e, 0xdf, 0x78, 0xb1, 0xe8, 0x07, 0xab, 0xdd, 0x97, 0xc1,
	0xf6, 0x61, 0xbb, 0x73, 0x85, 0xe8, 0x06, 0x41, 0x79, 0x87, 0x1a, 0x1c, 0xf7, 0x52, 0x5c, 0x04,
	0x41, 0x59, 0x28, 0x4c, 0xa1, 0xd5, 0x18, 0xa9, 0x8e, 0xa0, 0xed, 0xf6, 0xc5, 0x79, 0x10, 0x94,
	0x4b, 0x05, 0x1d, 0xfe, 0x20, 0x36, 0x08, 0xe7, 0xde, 0xe7, 0xa2, 0x1f, 0xae, 0x77, 0xd5, 0xfd,
	0x7e, 0xbd, 0xdd, 0xb8, 0x03, 0xd1, 0x0f, 0x1e, 0xb6, 0xf7, 0x7f, 0xbd, 0x5b, 0xbf, 0xad, 0xe0,
	0xcc, 0xbd, 0x12, 0xbd, 0xf4, 0xf1, 0x71, 0xfb, 0x76, 0xbd, 0xaf, 0xc0, 0x71, 0x6f, 0xc4, 0x00,
	0x37, 0xfb, 0xf5, 0xd1, 0xa1, 0xe5, 0x8d, 0xc5, 0x60, 0xbe, 0xde, 0xbc, 0x7e, 0x5c, 0xad, 0xb1,
	0x0e, 0x20, 0x44, 0x77, 0x8e, 0x65, 0x10, 0x2b, 0x38, 0xa3, 0xec, 0x73, 0x2c, 0xa7, 0x52, 0x47,
	0x35, 0xaf, 0x39, 0x96, 0x11, 0xea, 0x08, 0x5a, 0x44, 0x65, 0x8e, 0x65, 0x6c, 0x6a, 0x56, 0x73,
	0x2c, 0x67, 0x0a, 0x3a, 0xde, 0x67, 0xa2, 0x17, 0xad, 0x36, 0xaf, 0x8b, 0xbf, 0x3d, 0x56, 0x94,
	0x79, 0xb2, 0xde, 0xbc, 0x26, 0x1b, 0xce, 0x28, 0xaa, 0xff, 0x64, 0xff, 0x3b, 0xf4, 0x1f, 0x37,
	0xf6, 0x7f, 0xcb, 0xfb, 0xb7, 0x23, 0xba, 0xf1, 0x93, 0xfd, 0xe0, 0x46, 0x0c, 0xe2, 0xc2, 0xc6,
	0x8f, 0x53, 0x33, 0xc5, 0x14, 0xce, 0x5c, 0x57, 0x5c, 0xc7, 0x45, 0x39, 0x53, 0xa8, 0x23, 0x8b,
	0x1b, 0x70, 0xdc, 0x6b, 0x21, 0xe2, 0xa2, 0x0c, 0x15, 0xea, 0xa9, 0x55, 0xa8, 0xb6, 0x69, 0x79,
	0x8c, 0x0a, 0xda, 0xee, 0x33, 0x71, 0x19, 0x17, 0x65, 0x8c, 0x2a, 0x54, 0x09, 0xa6, 0xd0, 0x71,
	0x3f, 0x14, 0xb7, 0xec, 0x90, 0xc7, 0x14, 0xa4, 0x59, 0x39, 0xa7, 0x8a, 0xe2, 0xa2, 0x5c, 0xaa,
	0x49, 0x0a, 0x5d, 0x12, 0x2e, 0x2e, 0x48, 0x76, 0x1d, 0x1b, 0xb8, 0xe0, 0xb5, 0x50, 0xc5, 0x06,
	0x7a, 0xee, 0x0b, 0xe1, 0xc6, 0x45, 0x39, 0x51, 0x98, 0xe6, 0x71, 0x6a, 0x62, 0xa3, 0x82, 0xd8,
	0x68, 0xe8, 0x7b, 0xff, 0x74, 0xc4, 0x35, 0x35, 0xf1, 0x6d, 0xb4, 0xdb, 0x3e, 0x3d, 0x36, 0x65,
	0x07, 0x11, 0xe5, 0xd7, 0x61, 0x2d, 0x20, 0x59, 0xa4, 0xa6, 0xd3, 0x2c, 0x59, 0x39, 0x5b, 0x2e,
	0x88, 0x2b, 0xb2, 0x26, 0xaa, 0xae, 0x0d, 0xda, 0x54, 0x09, 0x21, 0xa8, 0xad, 0xdd, 0x69, 0x6c,
	0xdf, 0x58, 0xfb, 0xdc, 0xf6, 0x9c, 0x42, 0x1b, 0xe8, 0x36, 0x81, 0x69, 0x03, 0x5c, 0x34, 0x46,
	0x6a, 0x0a, 0xe8, 0x79, 0xff, 0x72, 0x84, 0xc8, 0xab, 0xfd, 0xfe, 0xa1, 0xb2, 0x7c, 0x06, 0xa2,
	0x9f, 0x1f, 0x62, 0x9e, 0x91, 0x3a, 0xf9, 0x49, 0x52, 0x87, 0xd7, 0x39, 0x87, 0x55, 0x33, 0x3f,
	0xaa, 0xdb, 0xa6, 0xd0, 0x39, 0x4b, 0xd4, 0x21, 0xca, 0x79, 0x51, 0x0e, 0x93, 0xf4, 0x4e, 0x66,
	0x53, 0x15, 0xd5, 0x0a, 0xe6, 0x45, 0xb9, 0x90, 0x49, 0x02, 0x5d, 0x5e, 0x2e, 0x70, 0x9e, 0x49,
	0x5f, 0x62, 0x01, 0x17, 0x8c, 0x04, 0x98, 0x24, 0xa1, 0x7a, 0x25, 0x33, 0xe8, 0x79, 0xff, 0xb9,
	0x14, 0x17, 0xc3, 0xd5, 0xa6, 0xa1, 0x36, 0x2c, 0xca, 0xa9, 0xb2, 0x8d, 0xb5, 0xd4, 0x86, 0xd4,
	0x6c, 0x1d, 0x2d, 0x54, 0x2e, 0x6b, 0xbd, 0x2c, 0x10, 0x1a, 0x55, 0xeb, 0xc5, 0xcb, 0x35, 0xd2,
	0x66, 0x24, 0x49, 0x1b, 0xa4, 0xe3, 0xde, 0x0a, 0x60, 0x9f, 0x23, 0x7a, 0x4e, 0x1b, 0x6b, 0x58,
	0xcb, 0x4e, 0x3f, 0x2b, 0xdf, 0x31, 0x97, 0xed, 0xc6, 0x05, 0xed, 0xb4, 0x61, 0x51, 0x8e, 0x48,
	0x97, 0xd4, 0x84, 0x74, 0xf6, 0x6c, 0xd7, 0xd9, 0xe9, 0x14, 0xef, 0xb3, 0x6f, 0x1e, 0x2b, 0x1f,
	0x13, 0x93, 0xc6, 0xa8, 0x41, 0x9c, 0xf8, 0x9e, 0xe2, 0x97, 0x5c, 0x63, 0x88, 0xb9, 0x9a, 0x2b,
	0xb8, 0x62, 0xca, 0x21, 0xe6, 0xa8, 0x17, 0x06, 0x35, 0x0c, 0xdc, 0xe7, 0xe2, 0xc6, 0x26, 0x36,
	0x89, 0x42, 0xed, 0x63, 0x1a, 0x12, 0x9f, 0xeb, 0xc3, 0x77, 0x0b, 0x73, 0x67, 0xe0, 0x19, 0xf3,
	0x9d, 0x2b, 0x4c, 0x2d, 0x00, 0x0c, 0x84, 0x38, 0x53, 0x73, 0xa5, 0x23, 0xb8, 0x69, 0xc4, 0x50,
	0xa8, 0xeb, 0xb2, 0x5d, 0x0e, 0x91, 0x2b, 0xdb, 0xd9, 0x0f, 0x4e, 0x42, 0x58, 0x2e, 0xb7, 0x5c,
	0x86, 0x05, 0x98, 0xcd, 0x73, 0x16, 0x30, 0x8f, 0x0d, 0xd6, 0x12, 0xc6, 0x46, 0xc1, 0x0b, 0x8e,
	0xb4, 0x54, 0xb6, 0x2f, 0x5f, 0x39, 0x04, 0x46, 0x3d, 0x96, 0xf0, 0x21, 0xcb, 0x9b, 0x2b, 0xba,
	0xa4, 0x72, 0x3a, 0x17, 0x5f, 0x75, 0x3f, 0x10, 0xcf, 0x08, 0xaa, 0xc3, 0xd6, 0x7c, 0x3e, 0x62,
	0x86, 0x94, 0xbc, 0x46, 0xbe, 0xc6, 0x94, 0x72, 0x95, 0xd4, 0xa1, 0xbe, 0x4e, 0xbb, 0xcf, 0x02,
	0xb4, 0x1d, 0x53, 0xf8, 0x06, 0x7f, 0x12, 0x1b, 0xbd, 0xc0, 0x74, 0xa4, 0x0c, 0x7c, 0xb3, 0xf1,
	0xe0, 0xfd, 0xfc, 0x2d, 0x0e, 0x41, 0xa7, 0xb6, 0x20, 0x1d, 0xbe, 0x7d, 0x20, 0xb7, 0x54, 0x63,
	0x09, 0xdf, 0x39, 0x15, 0x7c, 0x48, 0xca, 0x7e, 0xb7, 0xe9, 0x1e, 0xea, 0x03, 0xdf, 0xef, 0x35,
	0xd4, 0x50, 0x33, 0x93, 0xef, 0x73, 0x9e, 0x99, 0xa1, 0xdb, 0x00, 0xe1, 0x07, 0xc7, 0xbc, 0x76,
	0xfd, 0x87, 0x27, 0x1b, 0x88, 0x64, 0x82, 0x1f, 0x35, 0xb5, 0xa0, 0xae, 0xb9, 0xff, 0xb8, 0xd1,
	0xc0, 0x4a, 0x39, 0xaa, 0xc3, 0xfe, 0xe4, 0x3d, 0x90, 0x6b, 0xf0, 0xde, 0x6f, 0x84, 0x65, 0xf9,
	0x31, 0xe7, 0xa3, 0xca, 0x49, 0xf3, 0x4f, 0x58, 0x64, 0xe2, 0x13, 0xa2, 0x5a, 0x60, 0x0a, 0x3f,
	0xe5, 0x9d, 0x53, 0xc7, 0x3a, 0x1c, 0xe8, 0x4f, 0xf9, 0x4b, 0x1f, 0x53, 0x2b, 0xc8, 0x4b, 0x8e,
	0xce, 0xf6, 0x42, 0x0d, 0x11, 0x3e, 0xe3, 0x4f, 0xe9, 0x12, 0x9b, 0x2b, 0x9c, 0x29, 0x13, 0x52,
	0x0d, 0x3f, 0x63, 0xd7, 0x89, 0x54, 0x09, 0xea, 0x65, 0x6c, 0x46, 0x06, 0x7e, 0xce, 0x87, 0xf0,
	0xce, 0x90, 0x0c, 0xbf, 0x60, 0xa1, 0x26, 0xd2, 0xd2, 0x1c, 0x4b, 0xf8, 0xe5, 0x09, 0x31, 0x86,
	0x7e, 0xc5, 0x2d, 0xe0, 0x9a, 0x7f, 0x7d, 0x68, 0x6a, 0x64, 0xd4, 0x42, 0xc1, 0x6f, 0xd8, 0x0e,
	0x0d, 0x52, 0x57, 0xe1, 0xb7, 0xcd, 0xfe, 0x61, 0x4d, 0xc6, 0x12, 0x7e, 0xc7, 0x11, 0x58, 0xa0,
	0xdf, 0x1f, 0x78, 0xe9, 0x99, 0xdd, 0xde, 0x3a, 0x82, 0xcf, 0x59, 0xef, 0x85, 0xf2, 0xc9, 0x2b,
	0x85, 0x2f, 0x38, 0x2c, 0x35, 0x30, 0x51, 0x06, 0xfe, 0xd0, 0x1c, 0x08, 0xba, 0xb2, 0x31, 0x1d,
	0x1a, 0xf8, 0x23, 0x47, 0x8d, 0x0d, 0x4e, 0x51, 0xc1, 0x9f, 0x38, 0xc2, 0x41, 0xb9, 0x3f, 0xf3,
	0x17, 0xbe, 0xa2, 0xe2, 0x09, 0x41, 0x76, 0x19, 0x37, 0x80, 0xcf, 0xfd, 0x0b, 0x51, 0xd3, 0x55,
	0x40, 0x15, 0x46, 0x10, 0x70, 0x5c, 0x9e, 0x1c, 0x21, 0xdd, 0x89, 0x43, 0x9e, 0x1c, 0x92, 0xe5,
	0xcb, 0x24, 0x2d, 0x0d, 0xf9, 0x96, 0xf8, 0xdf, 0x39, 0x12, 0x9d, 0x88, 0x38, 0x53, 0x26, 0x93,
	0x1a, 0x62, 0x4e, 0xed, 0x1b, 0x06, 0x14, 0x03, 0x23, 0x23, 0x6b, 0x2e, 0x23, 0xce, 0x63, 0xaf,
	0xe6, 0x31, 0x47, 0x3e, 0x0c, 0xb9, 0x31, 0x2a, 0x6a, 0x58, 0x42, 0xc3, 0x6f, 0xf8, 0xff, 0x86,
	0xdf, 0x84, 0x73, 0x9e, 0x8c, 0x5b, 0xcd, 0x3a, 0x37, 0x3e, 0x0b, 0x23, 0x21, 0x65, 0xec, 0x74,
	0x04, 0x4f, 0x9b, 0x0e, 0xf2, 0x90, 0x98, 0x79, 0xff, 0x70, 0x44, 0xcf, 0x5f, 0x3f, 0x3c, 0x34,
	0xb7, 0xba, 0xaf, 0x92, 0xa4, 0xe4, 0x81, 0x03, 0xe2, 0xca, 0x9a, 0x8d, 0xb7, 0x73, 0x70, 0xb0,
	0xcc, 0x5b, 0xc4, 0xc3, 0x9a, 0x41, 0x2c, 0x83, 0x31, 0x4d, 0x95, 0x36, 0xa9, 0x7c, 0x84, 0x48,
	0xa9, 0x02, 0x3a, 0x54, 0xbf, 0x05, 0x33, 0x39, 0x34, 0x3a, 0xac, 0xaf, 0x75, 0x0b, 0x14, 0x19,
	0xea, 0x7c, 0x28, 0x33, 0xe8, 0x7a, 0xb1, 0xb8, 0x0c, 0x56, 0xbb, 0xfd, 0x76, 0x5b, 0x0f, 0x18,
	0x1a, 0xa0, 0x85, 0x2e, 0xca, 0xa1, 0xed, 0xb8, 0x43, 0xdb, 0xde, 0xda, 0xb4, 0xd5, 0xf2, 0xa6,
	0xa9, 0x2d, 0x2a, 0xd1, 0xc2, 0x61, 0xb8, 0x64, 0xd7, 0xb6, 0xf7, 0x77, 0xd1, 0x8f, 0x56, 0x6f,
	0xaa, 0x7c, 0xbf, 0x7a, 0x5d, 0x91, 0x43, 0x84, 0x13, 0x99, 0x17, 0x18, 0xc9, 0x52, 0x69, 0x55,
	0xc0, 0x99, 0xfb, 0x91, 0x78, 0x71, 0xc4, 0xde, 0x0b, 0x68, 0xf3, 0x1c, 0xd7, 0x42, 0x9a, 0x58,
	0x46, 0x42, 0x8b, 0x7a, 0x74, 0x84, 0xa7, 0x09, 0x2e, 0x02, 0xcc, 0x42, 0x68, 0x53, 0x21, 0x47,
	0x5c, 0xea, 0x10, 0x3a, 0xde, 0xc7, 0x42, 0x84, 0xd5, 0xbb, 0xf5, 0x7d, 0xd5, 0xd4, 0x11, 0xd2,
	0x71, 0x08, 0xb3, 0x54, 0xd1, 0xab, 0x62, 0x20, 0xfa, 0x61, 0x51, 0xaa, 0x69, 0x9c, 0x6a, 0x09,
	0x8e, 0x37, 0x17, 0x5d, 0xe2, 0xaa, 0xbe, 0x6c, 0x22, 0xa9, 0xb0, 0x9c, 0x1b, 0x49, 0xc7, 0xc0,
	0x69, 0xb8, 0xd7, 0x10, 0x11, 0x84, 0x16, 0xe9, 0xcb, 0x58, 0x48, 0x43, 0x6d, 0x69, 0x9f, 0x71,
	0x47, 0x47, 0x99, 0x65, 0x52, 0x4f, 0x46, 0xd0, 0xf1, 0xbe, 0x10, 0x83, 0x64, 0x7b, 0x9f, 0x6f,
	0x9f, 0x76, 0xcc, 0xe4, 0x56, 0x40, 0x92, 0x06, 0x65, 0x9e, 0x9a, 0x2c, 0x90, 0xa5, 0x8f, 0x2a,
	0xa4, 0xc9, 0xfd, 0x5c, 0xdc, 0x9c, 0xa0, 0x23, 0x65, 0xd3, 0x38, 0x9e, 0x12, 0x57, 0xf4, 0xb4,
	0x9c, 0xae, 0xd6, 0xf9, 0x7e, 0xb5, 0xaf, 0x28, 0xed, 0x7c, 0x5a, 0xe6, 0x05, 0x16, 0xb2, 0xd4,
	0x69, 0x36, 0xc1, 0xa4, 0x9e, 0xfa, 0x07, 0xd0, 0xbe, 0xef, 0x4e, 0xbd, 0x22, 0xf5, 0x4a, 0x9a,
	0x29, 0xb4, 0xe8, 0x61, 0x59, 0xac, 0xf9, 0x61, 0xe9, 0x8a, 0xeb, 0xa2, 0xe0, 0x00, 0xa5, 0xbd,
	0xe4, 0xec, 0x2e, 0x2b, 0xea, 0x23, 0x58, 0x23, 0x8e, 0xf7, 0x89, 0x18, 0xcc, 0x9e, 0xd6, 0x7b,
	0xb9, 0xd9, 0x57, 0xbb, 0xe6, 0x61, 0x36, 0x93, 0x74, 0xc8, 0x6c, 0xfb, 0x06, 0xa2, 0x4f, 0x96,
	0xd4, 0x85, 0xcc, 0xc0, 0xf1, 0x16, 0xa2, 0x37, 0xdd, 0x6d, 0xeb, 0x17, 0x1c, 0x88, 0x2b, 0xa5,
	0x5f, 0x61, 0xa2, 0xc2, 0x72, 0x9a, 0xa5, 0x53, 0x38, 0x73, 0x7b, 0xa2, 0x93, 0xa5, 0xf6, 0x49,
	0xd2, 0x13, 0x1d, 0x5f, 0xca, 0x0c, 0x5a, 0xf6, 0x5f, 0x3a, 0xf1, 0xeb, 0x67, 0x48, 0x94, 0xa1,
	0x4f, 0x8f, 0xbc, 0x60, 0x2c, 0x35, 0x74, 0xe8, 0x64, 0xca, 0x28, 0x2a, 0x23, 0xa3, 0xe1, 0xdc,
	0x7f, 0xb1, 0xbc, 0x7d, 0xbb, 0xaf, 0xde, 0x55, 0x2f, 0xef, 0x1f, 0xd6, 0xd5, 0x66, 0x5f, 0x3e,
	0xfe, 0xe5, 0x25, 0xbd, 0xff, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x85, 0xed, 0x4a, 0x70, 0x12,
	0x0c, 0x00, 0x00,
}
