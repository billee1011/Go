// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enum.proto

package room

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CardColor 卡牌花色
type CardColor int32

const (
	CardColor_CC_WAN  CardColor = 1
	CardColor_CC_TIAO CardColor = 2
	CardColor_CC_TONG CardColor = 3
	CardColor_CC_FENG CardColor = 4
)

var CardColor_name = map[int32]string{
	1: "CC_WAN",
	2: "CC_TIAO",
	3: "CC_TONG",
	4: "CC_FENG",
}
var CardColor_value = map[string]int32{
	"CC_WAN":  1,
	"CC_TIAO": 2,
	"CC_TONG": 3,
	"CC_FENG": 4,
}

func (x CardColor) Enum() *CardColor {
	p := new(CardColor)
	*p = x
	return p
}
func (x CardColor) String() string {
	return proto.EnumName(CardColor_name, int32(x))
}
func (x *CardColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CardColor_value, data, "CardColor")
	if err != nil {
		return err
	}
	*x = CardColor(value)
	return nil
}
func (CardColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Direction 换三张方向
type Direction int32

const (
	Direction_ClockWise     Direction = 0
	Direction_Opposite      Direction = 1
	Direction_AntiClockWise Direction = 2
)

var Direction_name = map[int32]string{
	0: "ClockWise",
	1: "Opposite",
	2: "AntiClockWise",
}
var Direction_value = map[string]int32{
	"ClockWise":     0,
	"Opposite":      1,
	"AntiClockWise": 2,
}

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}
func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}
func (x *Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Direction_value, data, "Direction")
	if err != nil {
		return err
	}
	*x = Direction(value)
	return nil
}
func (Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// XingpaiAction 行牌 ACTION
type XingpaiAction int32

const (
	XingpaiAction_XA_CHI  XingpaiAction = 0
	XingpaiAction_XA_PENG XingpaiAction = 1
	XingpaiAction_XA_GANG XingpaiAction = 2
	XingpaiAction_XA_HU   XingpaiAction = 3
	XingpaiAction_XA_QI   XingpaiAction = 4
)

var XingpaiAction_name = map[int32]string{
	0: "XA_CHI",
	1: "XA_PENG",
	2: "XA_GANG",
	3: "XA_HU",
	4: "XA_QI",
}
var XingpaiAction_value = map[string]int32{
	"XA_CHI":  0,
	"XA_PENG": 1,
	"XA_GANG": 2,
	"XA_HU":   3,
	"XA_QI":   4,
}

func (x XingpaiAction) Enum() *XingpaiAction {
	p := new(XingpaiAction)
	*p = x
	return p
}
func (x XingpaiAction) String() string {
	return proto.EnumName(XingpaiAction_name, int32(x))
}
func (x *XingpaiAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(XingpaiAction_value, data, "XingpaiAction")
	if err != nil {
		return err
	}
	*x = XingpaiAction(value)
	return nil
}
func (XingpaiAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// GangType 杠的类型
type GangType int32

const (
	GangType_MingGang GangType = 0
	GangType_BuGang   GangType = 1
	GangType_AnGang   GangType = 2
)

var GangType_name = map[int32]string{
	0: "MingGang",
	1: "BuGang",
	2: "AnGang",
}
var GangType_value = map[string]int32{
	"MingGang": 0,
	"BuGang":   1,
	"AnGang":   2,
}

func (x GangType) Enum() *GangType {
	p := new(GangType)
	*p = x
	return p
}
func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (x *GangType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GangType_value, data, "GangType")
	if err != nil {
		return err
	}
	*x = GangType(value)
	return nil
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// HuType 胡类型
type HuType int32

const (
	HuType_HT_GANGHOUPAO        HuType = 0
	HuType_HT_QIANGGANGHU       HuType = 1
	HuType_HT_DIANPAO           HuType = 2
	HuType_HT_GANGKAI           HuType = 3
	HuType_HT_HAIDILAO          HuType = 4
	HuType_HT_GANGSHANGHAIDILAO HuType = 5
	HuType_HT_ZIMO              HuType = 6
	HuType_HT_TIANHU            HuType = 7
	HuType_HT_DIHU              HuType = 8
)

var HuType_name = map[int32]string{
	0: "HT_GANGHOUPAO",
	1: "HT_QIANGGANGHU",
	2: "HT_DIANPAO",
	3: "HT_GANGKAI",
	4: "HT_HAIDILAO",
	5: "HT_GANGSHANGHAIDILAO",
	6: "HT_ZIMO",
	7: "HT_TIANHU",
	8: "HT_DIHU",
}
var HuType_value = map[string]int32{
	"HT_GANGHOUPAO":        0,
	"HT_QIANGGANGHU":       1,
	"HT_DIANPAO":           2,
	"HT_GANGKAI":           3,
	"HT_HAIDILAO":          4,
	"HT_GANGSHANGHAIDILAO": 5,
	"HT_ZIMO":              6,
	"HT_TIANHU":            7,
	"HT_DIHU":              8,
}

func (x HuType) Enum() *HuType {
	p := new(HuType)
	*p = x
	return p
}
func (x HuType) String() string {
	return proto.EnumName(HuType_name, int32(x))
}
func (x *HuType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HuType_value, data, "HuType")
	if err != nil {
		return err
	}
	*x = HuType(value)
	return nil
}
func (HuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

// 麻将组类型
type CardsGroupType int32

const (
	CardsGroupType_CGT_HAND     CardsGroupType = 0
	CardsGroupType_CGT_CHI      CardsGroupType = 1
	CardsGroupType_CGT_PENG     CardsGroupType = 2
	CardsGroupType_CGT_MINGGANG CardsGroupType = 3
	CardsGroupType_CGT_ANGANG   CardsGroupType = 4
	CardsGroupType_CGT_BUGANG   CardsGroupType = 5
	CardsGroupType_CGT_HU       CardsGroupType = 6
	CardsGroupType_CGT_HUA      CardsGroupType = 7
	CardsGroupType_CGT_OUT      CardsGroupType = 8
)

var CardsGroupType_name = map[int32]string{
	0: "CGT_HAND",
	1: "CGT_CHI",
	2: "CGT_PENG",
	3: "CGT_MINGGANG",
	4: "CGT_ANGANG",
	5: "CGT_BUGANG",
	6: "CGT_HU",
	7: "CGT_HUA",
	8: "CGT_OUT",
}
var CardsGroupType_value = map[string]int32{
	"CGT_HAND":     0,
	"CGT_CHI":      1,
	"CGT_PENG":     2,
	"CGT_MINGGANG": 3,
	"CGT_ANGANG":   4,
	"CGT_BUGANG":   5,
	"CGT_HU":       6,
	"CGT_HUA":      7,
	"CGT_OUT":      8,
}

func (x CardsGroupType) Enum() *CardsGroupType {
	p := new(CardsGroupType)
	*p = x
	return p
}
func (x CardsGroupType) String() string {
	return proto.EnumName(CardsGroupType_name, int32(x))
}
func (x *CardsGroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CardsGroupType_value, data, "CardsGroupType")
	if err != nil {
		return err
	}
	*x = CardsGroupType(value)
	return nil
}
func (CardsGroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// SettleType 结算类型
type SettleType int32

const (
	SettleType_ST_ANGANG    SettleType = 0
	SettleType_ST_MINGGANG  SettleType = 1
	SettleType_ST_BUGANG    SettleType = 2
	SettleType_ST_DIANPAO   SettleType = 3
	SettleType_ST_ZIMO      SettleType = 4
	SettleType_ST_FLOWERPIG SettleType = 5
	SettleType_ST_YELL      SettleType = 6
	SettleType_ST_TAXREBEAT SettleType = 7
	SettleType_ST_CALLDIVER SettleType = 8
)

var SettleType_name = map[int32]string{
	0: "ST_ANGANG",
	1: "ST_MINGGANG",
	2: "ST_BUGANG",
	3: "ST_DIANPAO",
	4: "ST_ZIMO",
	5: "ST_FLOWERPIG",
	6: "ST_YELL",
	7: "ST_TAXREBEAT",
	8: "ST_CALLDIVER",
}
var SettleType_value = map[string]int32{
	"ST_ANGANG":    0,
	"ST_MINGGANG":  1,
	"ST_BUGANG":    2,
	"ST_DIANPAO":   3,
	"ST_ZIMO":      4,
	"ST_FLOWERPIG": 5,
	"ST_YELL":      6,
	"ST_TAXREBEAT": 7,
	"ST_CALLDIVER": 8,
}

func (x SettleType) Enum() *SettleType {
	p := new(SettleType)
	*p = x
	return p
}
func (x SettleType) String() string {
	return proto.EnumName(SettleType_name, int32(x))
}
func (x *SettleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettleType_value, data, "SettleType")
	if err != nil {
		return err
	}
	*x = SettleType(value)
	return nil
}
func (SettleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

// FanType 胡牌牌型
type FanType int32

const (
	FanType_FT_PINGHU          FanType = 0
	FanType_FT_QINGYISE        FanType = 1
	FanType_FT_QIDUI           FanType = 2
	FanType_FT_QINGQIDUI       FanType = 3
	FanType_FT_LONGQIDUI       FanType = 4
	FanType_FT_QINGLONGQIDUI   FanType = 5
	FanType_FT_PENGPENGHU      FanType = 6
	FanType_FT_QINGPENG        FanType = 7
	FanType_FT_JINGGOUDIAO     FanType = 8
	FanType_FT_QINGJINGGOUDIAO FanType = 9
	FanType_FT_SHIBALUOHAN     FanType = 10
	FanType_FT_QINGSHIBALUOHAN FanType = 11
)

var FanType_name = map[int32]string{
	0:  "FT_PINGHU",
	1:  "FT_QINGYISE",
	2:  "FT_QIDUI",
	3:  "FT_QINGQIDUI",
	4:  "FT_LONGQIDUI",
	5:  "FT_QINGLONGQIDUI",
	6:  "FT_PENGPENGHU",
	7:  "FT_QINGPENG",
	8:  "FT_JINGGOUDIAO",
	9:  "FT_QINGJINGGOUDIAO",
	10: "FT_SHIBALUOHAN",
	11: "FT_QINGSHIBALUOHAN",
}
var FanType_value = map[string]int32{
	"FT_PINGHU":          0,
	"FT_QINGYISE":        1,
	"FT_QIDUI":           2,
	"FT_QINGQIDUI":       3,
	"FT_LONGQIDUI":       4,
	"FT_QINGLONGQIDUI":   5,
	"FT_PENGPENGHU":      6,
	"FT_QINGPENG":        7,
	"FT_JINGGOUDIAO":     8,
	"FT_QINGJINGGOUDIAO": 9,
	"FT_SHIBALUOHAN":     10,
	"FT_QINGSHIBALUOHAN": 11,
}

func (x FanType) Enum() *FanType {
	p := new(FanType)
	*p = x
	return p
}
func (x FanType) String() string {
	return proto.EnumName(FanType_name, int32(x))
}
func (x *FanType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FanType_value, data, "FanType")
	if err != nil {
		return err
	}
	*x = FanType(value)
	return nil
}
func (FanType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

// 结算类型
type BillType int32

const (
	BillType_BILL_GANG       BillType = 0
	BillType_BILL_DIANPAO    BillType = 1
	BillType_BILL_ZIMO       BillType = 2
	BillType_BILL_CHECKPIG   BillType = 3
	BillType_BILL_CHECKSHOUT BillType = 4
	BillType_BILL_REFUND     BillType = 5
	BillType_BILL_TRANSFER   BillType = 6
)

var BillType_name = map[int32]string{
	0: "BILL_GANG",
	1: "BILL_DIANPAO",
	2: "BILL_ZIMO",
	3: "BILL_CHECKPIG",
	4: "BILL_CHECKSHOUT",
	5: "BILL_REFUND",
	6: "BILL_TRANSFER",
}
var BillType_value = map[string]int32{
	"BILL_GANG":       0,
	"BILL_DIANPAO":    1,
	"BILL_ZIMO":       2,
	"BILL_CHECKPIG":   3,
	"BILL_CHECKSHOUT": 4,
	"BILL_REFUND":     5,
	"BILL_TRANSFER":   6,
}

func (x BillType) Enum() *BillType {
	p := new(BillType)
	*p = x
	return p
}
func (x BillType) String() string {
	return proto.EnumName(BillType_name, int32(x))
}
func (x *BillType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BillType_value, data, "BillType")
	if err != nil {
		return err
	}
	*x = BillType(value)
	return nil
}
func (BillType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

// CartoonType 动画类型
type CartoonType int32

const (
	CartoonType_CTNT_FAPAI        CartoonType = 1
	CartoonType_CTNT_HUANSANZHANG CartoonType = 2
)

var CartoonType_name = map[int32]string{
	1: "CTNT_FAPAI",
	2: "CTNT_HUANSANZHANG",
}
var CartoonType_value = map[string]int32{
	"CTNT_FAPAI":        1,
	"CTNT_HUANSANZHANG": 2,
}

func (x CartoonType) Enum() *CartoonType {
	p := new(CartoonType)
	*p = x
	return p
}
func (x CartoonType) String() string {
	return proto.EnumName(CartoonType_name, int32(x))
}
func (x *CartoonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CartoonType_value, data, "CartoonType")
	if err != nil {
		return err
	}
	*x = CartoonType(value)
	return nil
}
func (CartoonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

// GameStage:恢复对局当前游戏状态
type GameStage int32

const (
	GameStage_GAMESTAGE_INIT         GameStage = 0
	GameStage_GAMESTAGE_HUANSANZHANG GameStage = 1
	GameStage_GAMESTAGE_DINGQUE      GameStage = 2
	GameStage_GAMESTAGE_PLAYCARD     GameStage = 3
	GameStage_GAMESTAGE_END          GameStage = 4
)

var GameStage_name = map[int32]string{
	0: "GAMESTAGE_INIT",
	1: "GAMESTAGE_HUANSANZHANG",
	2: "GAMESTAGE_DINGQUE",
	3: "GAMESTAGE_PLAYCARD",
	4: "GAMESTAGE_END",
}
var GameStage_value = map[string]int32{
	"GAMESTAGE_INIT":         0,
	"GAMESTAGE_HUANSANZHANG": 1,
	"GAMESTAGE_DINGQUE":      2,
	"GAMESTAGE_PLAYCARD":     3,
	"GAMESTAGE_END":          4,
}

func (x GameStage) Enum() *GameStage {
	p := new(GameStage)
	*p = x
	return p
}
func (x GameStage) String() string {
	return proto.EnumName(GameStage_name, int32(x))
}
func (x *GameStage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameStage_value, data, "GameStage")
	if err != nil {
		return err
	}
	*x = GameStage(value)
	return nil
}
func (GameStage) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

// DeviceType 设备类型
type DeviceType int32

const (
	DeviceType_DT_ANDROID DeviceType = 0
	DeviceType_DT_IPHONE  DeviceType = 1
)

var DeviceType_name = map[int32]string{
	0: "DT_ANDROID",
	1: "DT_IPHONE",
}
var DeviceType_value = map[string]int32{
	"DT_ANDROID": 0,
	"DT_IPHONE":  1,
}

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}
func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (x *DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceType_value, data, "DeviceType")
	if err != nil {
		return err
	}
	*x = DeviceType(value)
	return nil
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

// GameId 游戏id
type GameId int32

const (
	GameId_GAMEID_XUELIU  GameId = 1
	GameId_GAMEID_XUEZHAN GameId = 2
)

var GameId_name = map[int32]string{
	1: "GAMEID_XUELIU",
	2: "GAMEID_XUEZHAN",
}
var GameId_value = map[string]int32{
	"GAMEID_XUELIU":  1,
	"GAMEID_XUEZHAN": 2,
}

func (x GameId) Enum() *GameId {
	p := new(GameId)
	*p = x
	return p
}
func (x GameId) String() string {
	return proto.EnumName(GameId_name, int32(x))
}
func (x *GameId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameId_value, data, "GameId")
	if err != nil {
		return err
	}
	*x = GameId(value)
	return nil
}
func (GameId) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

// LocSourceType 位置信息来源类型
type LocSourceType int32

const (
	LocSourceType_LOC_SOURCE_BAIDU  LocSourceType = 0
	LocSourceType_LOC_SOURCE_JIZHAN LocSourceType = 1
)

var LocSourceType_name = map[int32]string{
	0: "LOC_SOURCE_BAIDU",
	1: "LOC_SOURCE_JIZHAN",
}
var LocSourceType_value = map[string]int32{
	"LOC_SOURCE_BAIDU":  0,
	"LOC_SOURCE_JIZHAN": 1,
}

func (x LocSourceType) Enum() *LocSourceType {
	p := new(LocSourceType)
	*p = x
	return p
}
func (x LocSourceType) String() string {
	return proto.EnumName(LocSourceType_name, int32(x))
}
func (x *LocSourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LocSourceType_value, data, "LocSourceType")
	if err != nil {
		return err
	}
	*x = LocSourceType(value)
	return nil
}
func (LocSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func init() {
	proto.RegisterEnum("room.CardColor", CardColor_name, CardColor_value)
	proto.RegisterEnum("room.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("room.XingpaiAction", XingpaiAction_name, XingpaiAction_value)
	proto.RegisterEnum("room.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("room.HuType", HuType_name, HuType_value)
	proto.RegisterEnum("room.CardsGroupType", CardsGroupType_name, CardsGroupType_value)
	proto.RegisterEnum("room.SettleType", SettleType_name, SettleType_value)
	proto.RegisterEnum("room.FanType", FanType_name, FanType_value)
	proto.RegisterEnum("room.BillType", BillType_name, BillType_value)
	proto.RegisterEnum("room.CartoonType", CartoonType_name, CartoonType_value)
	proto.RegisterEnum("room.GameStage", GameStage_name, GameStage_value)
	proto.RegisterEnum("room.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("room.GameId", GameId_name, GameId_value)
	proto.RegisterEnum("room.LocSourceType", LocSourceType_name, LocSourceType_value)
}

func init() { proto.RegisterFile("enum.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x54, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0xb5, 0x6c, 0xc7, 0x1f, 0x93, 0x38, 0x3b, 0x61, 0xb3, 0x8b, 0xa2, 0x3f, 0x41, 0x05, 0xda,
	0x1e, 0x7a, 0x6b, 0x51, 0x80, 0x16, 0x25, 0x91, 0x1b, 0x85, 0xf2, 0x5a, 0x54, 0xe3, 0xec, 0x85,
	0x30, 0xb2, 0x42, 0x20, 0xd4, 0xb1, 0x0c, 0xc7, 0x2e, 0xd0, 0x43, 0xaf, 0xbd, 0xf7, 0xdc, 0x63,
	0x7f, 0x5f, 0xff, 0x43, 0x31, 0x14, 0xb5, 0xf6, 0x1e, 0x02, 0xf0, 0xbd, 0x19, 0xcd, 0xbc, 0x79,
	0x33, 0x0e, 0x40, 0xb5, 0x3d, 0xbe, 0x7c, 0xb7, 0xdb, 0x37, 0x87, 0x86, 0x0d, 0xf7, 0x4d, 0xf3,
	0x12, 0xfe, 0x02, 0xd3, 0x68, 0xbd, 0xff, 0x14, 0x35, 0x9b, 0x66, 0xcf, 0x00, 0x46, 0x51, 0x64,
	0x1f, 0xb8, 0xc6, 0x80, 0x5d, 0xc2, 0x38, 0x8a, 0xac, 0x51, 0x3c, 0xc7, 0x7e, 0x07, 0x72, 0x9d,
	0xe2, 0xc0, 0x83, 0x24, 0xd6, 0x29, 0x0e, 0xc3, 0x9f, 0x60, 0x2a, 0xea, 0x7d, 0xf5, 0x74, 0xa8,
	0x9b, 0x2d, 0x9b, 0xc1, 0x34, 0xda, 0x34, 0x4f, 0xbf, 0x3d, 0xd4, 0xaf, 0x15, 0xf6, 0xd8, 0x15,
	0x4c, 0xf2, 0xdd, 0xae, 0x79, 0xad, 0x0f, 0x15, 0x06, 0xec, 0x06, 0x66, 0x7c, 0x7b, 0xa8, 0x4f,
	0x09, 0xfd, 0xf0, 0x0e, 0x66, 0xab, 0x7a, 0xfb, 0xbc, 0x5b, 0xd7, 0xbc, 0x2d, 0x00, 0x30, 0x5a,
	0x71, 0x1b, 0x49, 0x85, 0x3d, 0x6a, 0xb3, 0xe2, 0x76, 0x41, 0x6d, 0x02, 0x0f, 0x52, 0xae, 0x53,
	0xec, 0xb3, 0x29, 0x5c, 0xac, 0xb8, 0x95, 0x25, 0x0e, 0xfc, 0xf3, 0x83, 0xc2, 0x61, 0xf8, 0x03,
	0x4c, 0xd2, 0xf5, 0xf6, 0xd9, 0xfc, 0xb1, 0xab, 0xa8, 0xf3, 0x7d, 0xbd, 0x7d, 0x26, 0x8c, 0x3d,
	0xaa, 0x3a, 0x3f, 0xba, 0x77, 0x40, 0x6f, 0xbe, 0x75, 0xef, 0x7e, 0xf8, 0x6f, 0x00, 0x23, 0x79,
	0x74, 0x1f, 0xdc, 0xc0, 0x4c, 0x1a, 0x57, 0x5f, 0xe6, 0xe5, 0x82, 0xe7, 0xd8, 0x63, 0x0c, 0xae,
	0xa5, 0xb1, 0x1f, 0x14, 0xd7, 0xa9, 0xe3, 0x4b, 0x0c, 0xd8, 0x35, 0x80, 0x34, 0x56, 0x28, 0xae,
	0x17, 0xce, 0x97, 0x16, 0x53, 0xf8, 0x8e, 0x2b, 0x1c, 0xb0, 0x37, 0x70, 0x29, 0x8d, 0x95, 0x5c,
	0x09, 0x95, 0xf1, 0x1c, 0x87, 0xec, 0x6b, 0xb8, 0xf5, 0x09, 0x85, 0xa4, 0x22, 0x5d, 0xe4, 0x82,
	0x26, 0x92, 0xc6, 0x7e, 0x54, 0xf7, 0x39, 0x8e, 0xc8, 0x38, 0x69, 0xc8, 0x6c, 0x2d, 0x4b, 0x1c,
	0xfb, 0x98, 0x50, 0xb2, 0xc4, 0x49, 0xf8, 0x77, 0x00, 0xd7, 0xb4, 0xa2, 0xd7, 0x74, 0xdf, 0x1c,
	0x77, 0xdd, 0x78, 0x51, 0x4a, 0x7d, 0xb4, 0x68, 0x8d, 0x22, 0x44, 0xae, 0x05, 0x5d, 0xc8, 0xd9,
	0xd6, 0x67, 0x08, 0x57, 0x84, 0xee, 0x55, 0x3b, 0x03, 0x0e, 0x48, 0x31, 0x31, 0x5c, 0x3b, 0x3c,
	0xec, 0xf0, 0xbc, 0x74, 0xf8, 0xc2, 0x9d, 0x00, 0x95, 0x2e, 0x71, 0xd4, 0x15, 0x96, 0x25, 0x6f,
	0x35, 0x11, 0xc8, 0x4b, 0x83, 0x93, 0xf0, 0x9f, 0x00, 0xa0, 0xa8, 0x0e, 0x87, 0x4d, 0xe5, 0xf4,
	0xcc, 0x60, 0x5a, 0x7c, 0xae, 0xd9, 0x23, 0x17, 0x8a, 0xb3, 0xa6, 0x81, 0x8f, 0xfb, 0x1e, 0xce,
	0xb5, 0xe2, 0xe4, 0xa2, 0x3b, 0xa8, 0xc2, 0x5b, 0x31, 0x24, 0xc9, 0x85, 0xb1, 0x49, 0x96, 0x3f,
	0xc4, 0xcb, 0x85, 0x4a, 0x5b, 0xa7, 0x0a, 0x63, 0x1f, 0xe3, 0x2c, 0xc3, 0x91, 0x0f, 0x1b, 0xbe,
	0x5a, 0xc6, 0xf3, 0x98, 0x1b, 0x1c, 0x7b, 0x26, 0xe2, 0x59, 0x26, 0xd4, 0xaf, 0xf1, 0x12, 0x27,
	0xe1, 0x7f, 0x01, 0x8c, 0x93, 0xf5, 0xb6, 0x93, 0x96, 0x18, 0xbb, 0x50, 0x6e, 0x81, 0x4e, 0x5a,
	0x42, 0x4b, 0xd5, 0xe9, 0xa3, 0x2a, 0xe2, 0xd6, 0x2f, 0x47, 0x88, 0x52, 0xb5, 0x7e, 0xf9, 0x70,
	0xcb, 0x0c, 0x3c, 0x93, 0xe5, 0x1d, 0x33, 0x64, 0xb7, 0x80, 0x3e, 0xe7, 0xc4, 0x5e, 0xd0, 0x01,
	0x25, 0xad, 0xed, 0xf4, 0xe7, 0xec, 0x3b, 0xf5, 0x72, 0xdb, 0x18, 0xd3, 0x45, 0x25, 0xc6, 0xbe,
	0x27, 0x5f, 0xf2, 0x52, 0xd0, 0x2f, 0x6b, 0xc2, 0xde, 0x01, 0xf3, 0x49, 0xe7, 0xfc, 0xd4, 0xe7,
	0x16, 0x52, 0xcd, 0x79, 0x56, 0xe6, 0x92, 0x6b, 0x84, 0xb3, 0xdc, 0x73, 0xfe, 0x32, 0xfc, 0x2b,
	0x80, 0xc9, 0xbc, 0xde, 0x6c, 0xba, 0x81, 0xe7, 0x2a, 0xcb, 0xac, 0xdf, 0x05, 0xc2, 0x95, 0x83,
	0x9d, 0xdb, 0xc1, 0xe7, 0x04, 0xe7, 0x77, 0x9f, 0x84, 0x3b, 0x18, 0xc9, 0x38, 0xba, 0x23, 0xc3,
	0x07, 0xec, 0x2b, 0x78, 0x73, 0xa2, 0x0a, 0x49, 0x2b, 0x1f, 0xd2, 0x34, 0x8e, 0x5c, 0xc6, 0x49,
	0xa9, 0x45, 0x3b, 0xb1, 0x23, 0xcc, 0x92, 0xeb, 0x22, 0x89, 0x97, 0x38, 0x0a, 0x7f, 0x84, 0xcb,
	0x68, 0xbd, 0x3f, 0x34, 0x4d, 0xeb, 0x3d, 0xdd, 0x96, 0xd1, 0xc6, 0x26, 0x7c, 0xc1, 0xe9, 0x36,
	0xdf, 0xc2, 0x8d, 0xc3, 0xb2, 0xe4, 0xba, 0xe0, 0xfa, 0xa3, 0x74, 0xe7, 0x10, 0xfe, 0x09, 0xd3,
	0x74, 0xfd, 0x52, 0x15, 0x87, 0xf5, 0x73, 0x45, 0x73, 0xa7, 0xfc, 0x3e, 0x2e, 0x0c, 0x4f, 0x63,
	0xab, 0xb4, 0x32, 0xd8, 0x63, 0xdf, 0xc0, 0xbb, 0x13, 0xf7, 0xc5, 0xc7, 0xae, 0xe6, 0x29, 0x26,
	0x68, 0x71, 0x65, 0x8c, 0x7d, 0xb2, 0xea, 0x44, 0x2f, 0x32, 0xfe, 0x18, 0xf1, 0xa5, 0xc0, 0x01,
	0x89, 0x3e, 0xf1, 0xb1, 0x16, 0x38, 0x0c, 0xbf, 0x05, 0x10, 0xd5, 0xef, 0xf5, 0x53, 0xd5, 0x69,
	0x16, 0x74, 0xca, 0x62, 0x99, 0x2b, 0xfa, 0x71, 0xcd, 0x60, 0x2a, 0x8c, 0x55, 0x0b, 0x99, 0xeb,
	0x18, 0x83, 0xf0, 0x7b, 0x18, 0x91, 0x56, 0xf5, 0xa9, 0xab, 0xa4, 0x84, 0x5d, 0x95, 0x71, 0xa6,
	0xe8, 0xbf, 0x83, 0xd7, 0xde, 0x52, 0x24, 0x10, 0xfb, 0xe1, 0xcf, 0x30, 0xcb, 0x9a, 0xa7, 0xa2,
	0x39, 0xee, 0x7d, 0x83, 0x5b, 0xc0, 0x2c, 0x8f, 0x6c, 0x91, 0x97, 0xcb, 0x28, 0xb6, 0x73, 0xae,
	0x04, 0xdd, 0xe5, 0x5b, 0xb8, 0x39, 0x63, 0xdf, 0x2b, 0xf7, 0x75, 0xf0, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa3, 0x1a, 0xbc, 0x12, 0xb0, 0x05, 0x00, 0x00,
}
