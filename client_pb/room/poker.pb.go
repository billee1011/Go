// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poker.proto

package room

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PokerSuit int32

const (
	PokerSuit_PS_NONE    PokerSuit = 0
	PokerSuit_PS_DIAMOND PokerSuit = 16
	PokerSuit_PS_CLUB    PokerSuit = 32
	PokerSuit_PS_HEART   PokerSuit = 48
	PokerSuit_PS_SPADE   PokerSuit = 64
)

var PokerSuit_name = map[int32]string{
	0:  "PS_NONE",
	16: "PS_DIAMOND",
	32: "PS_CLUB",
	48: "PS_HEART",
	64: "PS_SPADE",
}
var PokerSuit_value = map[string]int32{
	"PS_NONE":    0,
	"PS_DIAMOND": 16,
	"PS_CLUB":    32,
	"PS_HEART":   48,
	"PS_SPADE":   64,
}

func (x PokerSuit) Enum() *PokerSuit {
	p := new(PokerSuit)
	*p = x
	return p
}
func (x PokerSuit) String() string {
	return proto.EnumName(PokerSuit_name, int32(x))
}
func (x *PokerSuit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PokerSuit_value, data, "PokerSuit")
	if err != nil {
		return err
	}
	*x = PokerSuit(value)
	return nil
}
func (PokerSuit) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type PokerValue int32

const (
	PokerValue_PV_BACK        PokerValue = 0
	PokerValue_PV_A           PokerValue = 1
	PokerValue_PV_2           PokerValue = 2
	PokerValue_PV_3           PokerValue = 3
	PokerValue_PV_4           PokerValue = 4
	PokerValue_PV_5           PokerValue = 5
	PokerValue_PV_6           PokerValue = 6
	PokerValue_PV_7           PokerValue = 7
	PokerValue_PV_8           PokerValue = 8
	PokerValue_PV_9           PokerValue = 9
	PokerValue_PV_10          PokerValue = 10
	PokerValue_PV_J           PokerValue = 11
	PokerValue_PV_Q           PokerValue = 12
	PokerValue_PV_K           PokerValue = 13
	PokerValue_PV_BLACK_JOKER PokerValue = 14
	PokerValue_PV_RED_JOKER   PokerValue = 15
)

var PokerValue_name = map[int32]string{
	0:  "PV_BACK",
	1:  "PV_A",
	2:  "PV_2",
	3:  "PV_3",
	4:  "PV_4",
	5:  "PV_5",
	6:  "PV_6",
	7:  "PV_7",
	8:  "PV_8",
	9:  "PV_9",
	10: "PV_10",
	11: "PV_J",
	12: "PV_Q",
	13: "PV_K",
	14: "PV_BLACK_JOKER",
	15: "PV_RED_JOKER",
}
var PokerValue_value = map[string]int32{
	"PV_BACK":        0,
	"PV_A":           1,
	"PV_2":           2,
	"PV_3":           3,
	"PV_4":           4,
	"PV_5":           5,
	"PV_6":           6,
	"PV_7":           7,
	"PV_8":           8,
	"PV_9":           9,
	"PV_10":          10,
	"PV_J":           11,
	"PV_Q":           12,
	"PV_K":           13,
	"PV_BLACK_JOKER": 14,
	"PV_RED_JOKER":   15,
}

func (x PokerValue) Enum() *PokerValue {
	p := new(PokerValue)
	*p = x
	return p
}
func (x PokerValue) String() string {
	return proto.EnumName(PokerValue_name, int32(x))
}
func (x *PokerValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PokerValue_value, data, "PokerValue")
	if err != nil {
		return err
	}
	*x = PokerValue(value)
	return nil
}
func (PokerValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

// 扑克牌结构体
type Poker struct {
	Suit             *PokerSuit  `protobuf:"varint,1,opt,name=suit,enum=room.PokerSuit" json:"suit,omitempty"`
	Value            *PokerValue `protobuf:"varint,2,opt,name=value,enum=room.PokerValue" json:"value,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Poker) Reset()                    { *m = Poker{} }
func (m *Poker) String() string            { return proto.CompactTextString(m) }
func (*Poker) ProtoMessage()               {}
func (*Poker) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *Poker) GetSuit() PokerSuit {
	if m != nil && m.Suit != nil {
		return *m.Suit
	}
	return PokerSuit_PS_NONE
}

func (m *Poker) GetValue() PokerValue {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return PokerValue_PV_BACK
}

func init() {
	proto.RegisterType((*Poker)(nil), "room.Poker")
	proto.RegisterEnum("room.PokerSuit", PokerSuit_name, PokerSuit_value)
	proto.RegisterEnum("room.PokerValue", PokerValue_name, PokerValue_value)
}

func init() { proto.RegisterFile("poker.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xce, 0x4f, 0x4f, 0x83, 0x40,
	0x10, 0x05, 0xf0, 0x52, 0xc1, 0x96, 0x01, 0xe9, 0xcb, 0x9e, 0x7a, 0x6c, 0x34, 0x31, 0xa6, 0x07,
	0x52, 0xeb, 0xff, 0x9b, 0x5b, 0x20, 0xd1, 0x52, 0x61, 0x0b, 0x95, 0xeb, 0xc6, 0x43, 0x0f, 0x8d,
	0x1a, 0x1a, 0x04, 0x3f, 0xa0, 0x9f, 0xcc, 0x80, 0x13, 0xf5, 0xf6, 0xdb, 0xf7, 0x66, 0xb2, 0x43,
	0xce, 0xbe, 0x7c, 0xdd, 0x56, 0xfe, 0xbe, 0x2a, 0xeb, 0x52, 0x98, 0x55, 0x59, 0xbe, 0x1f, 0x6f,
	0xc8, 0x52, 0x6d, 0x28, 0x4e, 0xc8, 0xfc, 0x68, 0x76, 0xf5, 0xd8, 0x98, 0x18, 0x67, 0xde, 0x7c,
	0xe4, 0xb7, 0xad, 0xdf, 0x55, 0x79, 0xb3, 0xab, 0xb3, 0xae, 0x14, 0xa7, 0x64, 0x7d, 0xbe, 0xbc,
	0x35, 0xdb, 0x71, 0xbf, 0x9b, 0xc2, 0xbf, 0xa9, 0xa2, 0xcd, 0xb3, 0x9f, 0x7a, 0xba, 0x26, 0xfb,
	0x77, 0x55, 0x38, 0x34, 0x50, 0xb9, 0x4e, 0xd2, 0x24, 0x42, 0x4f, 0x78, 0x44, 0x2a, 0xd7, 0xe1,
	0xa3, 0x7c, 0x4a, 0x93, 0x10, 0xe0, 0x32, 0x58, 0x3d, 0x2f, 0x30, 0x11, 0x2e, 0x0d, 0x55, 0xae,
	0x1f, 0x22, 0x99, 0x6d, 0x30, 0xe3, 0x57, 0xae, 0x64, 0x18, 0xe1, 0x7e, 0xfa, 0x65, 0x10, 0xfd,
	0x7d, 0xd4, 0xed, 0x15, 0x7a, 0x21, 0x83, 0x18, 0x3d, 0x31, 0x24, 0x53, 0x15, 0x5a, 0xc2, 0x60,
	0xcd, 0xd1, 0x67, 0x5d, 0xe0, 0x80, 0x75, 0x09, 0x93, 0x75, 0x05, 0x8b, 0x75, 0x8d, 0x43, 0xd6,
	0x0d, 0x06, 0xac, 0x5b, 0x0c, 0x59, 0x77, 0xb0, 0x85, 0x4d, 0x96, 0x2a, 0xf4, 0xf9, 0x0c, 0xc4,
	0xe1, 0x12, 0x0e, 0x6b, 0x0d, 0x97, 0x15, 0xe3, 0x48, 0x08, 0xf2, 0xda, 0x7b, 0x56, 0x32, 0x88,
	0xf5, 0x32, 0x8d, 0xa3, 0x0c, 0x9e, 0x00, 0xb9, 0xaa, 0xd0, 0x59, 0x14, 0x72, 0x32, 0xfa, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xa0, 0x34, 0xe8, 0x2e, 0x81, 0x01, 0x00, 0x00,
}
