// Code generated by protoc-gen-go. DO NOT EDIT.
// source: error.proto

package room

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoomError int32

const (
	RoomError_SUCCESS         RoomError = 0
	RoomError_NOT_LOGIN       RoomError = 1
	RoomError_EMPTY_USER_NAME RoomError = 2
	RoomError_FAILED          RoomError = 3
	// desk 0x10000 - 0x1ffff
	RoomError_DESK_ALREADY_APPLIED  RoomError = 65537
	RoomError_GAME_ALREADY_FINISHED RoomError = 65538
	RoomError_DESK_GAME_PLAYING     RoomError = 65539
	RoomError_DESK_NO_GAME_PLAYING  RoomError = 65540
)

var RoomError_name = map[int32]string{
	0:     "SUCCESS",
	1:     "NOT_LOGIN",
	2:     "EMPTY_USER_NAME",
	3:     "FAILED",
	65537: "DESK_ALREADY_APPLIED",
	65538: "GAME_ALREADY_FINISHED",
	65539: "DESK_GAME_PLAYING",
	65540: "DESK_NO_GAME_PLAYING",
}
var RoomError_value = map[string]int32{
	"SUCCESS":               0,
	"NOT_LOGIN":             1,
	"EMPTY_USER_NAME":       2,
	"FAILED":                3,
	"DESK_ALREADY_APPLIED":  65537,
	"GAME_ALREADY_FINISHED": 65538,
	"DESK_GAME_PLAYING":     65539,
	"DESK_NO_GAME_PLAYING":  65540,
}

func (x RoomError) Enum() *RoomError {
	p := new(RoomError)
	*p = x
	return p
}
func (x RoomError) String() string {
	return proto.EnumName(RoomError_name, int32(x))
}
func (x *RoomError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RoomError_value, data, "RoomError")
	if err != nil {
		return err
	}
	*x = RoomError(value)
	return nil
}
func (RoomError) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func init() {
	proto.RegisterEnum("room.RoomError", RoomError_name, RoomError_value)
}

func init() { proto.RegisterFile("error.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcc, 0x4d, 0x6a, 0xc3, 0x30,
	0x10, 0xc5, 0xf1, 0xba, 0x15, 0x2d, 0x1e, 0x53, 0xaa, 0x4e, 0x5b, 0x0a, 0xed, 0x0d, 0xb2, 0xc8,
	0x1d, 0x84, 0x35, 0x76, 0x44, 0x64, 0x59, 0x58, 0xf6, 0xc2, 0x2b, 0xad, 0xb2, 0x34, 0x0a, 0x22,
	0x07, 0x50, 0x3e, 0xce, 0x94, 0xf3, 0x85, 0x78, 0x61, 0xc8, 0xfa, 0xf7, 0xde, 0x1f, 0x8a, 0x5d,
	0x8c, 0x21, 0xae, 0xf7, 0x31, 0x1c, 0x02, 0xb2, 0x18, 0xc2, 0xb4, 0xba, 0x66, 0x90, 0x77, 0x21,
	0x4c, 0x74, 0x17, 0x2c, 0xe0, 0xcd, 0x0d, 0x65, 0x49, 0xce, 0xf1, 0x27, 0x7c, 0x87, 0xdc, 0xb4,
	0xbd, 0xd7, 0x6d, 0xad, 0x0c, 0xcf, 0xf0, 0x0b, 0x3e, 0xa8, 0xb1, 0xfd, 0xe8, 0x07, 0x47, 0x9d,
	0x37, 0xa2, 0x21, 0xfe, 0x8c, 0x00, 0xaf, 0x95, 0x50, 0x9a, 0x24, 0x7f, 0xc1, 0x3f, 0xf8, 0x96,
	0xe4, 0xb6, 0x5e, 0xe8, 0x8e, 0x84, 0x1c, 0xbd, 0xb0, 0x56, 0x2b, 0x92, 0xfc, 0x98, 0x18, 0xfe,
	0xc3, 0x4f, 0x2d, 0x1a, 0x5a, 0xac, 0x52, 0x46, 0xb9, 0x0d, 0x49, 0x7e, 0x4a, 0x0c, 0x7f, 0xe1,
	0x73, 0x3e, 0xce, 0x0b, 0xab, 0xc5, 0xa8, 0x4c, 0xcd, 0xcf, 0x89, 0x2d, 0x45, 0xd3, 0x3e, 0xda,
	0x25, 0xb1, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0x77, 0xce, 0xe0, 0xcc, 0x00, 0x00, 0x00,
}
