// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match.proto

/*
Package match is a generated protocol buffer package.

It is generated from these files:
	match.proto

It has these top-level messages:
	MatchReq
	MatchRsp
*/
package match

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 匹配错误枚举
type MatchError int32

const (
	MatchError_MATCH_SUC  MatchError = 0
	MatchError_MATCH_FAIL MatchError = 1
)

var MatchError_name = map[int32]string{
	0: "MATCH_SUC",
	1: "MATCH_FAIL",
}
var MatchError_value = map[string]int32{
	"MATCH_SUC":  0,
	"MATCH_FAIL": 1,
}

func (x MatchError) Enum() *MatchError {
	p := new(MatchError)
	*p = x
	return p
}
func (x MatchError) String() string {
	return proto.EnumName(MatchError_name, int32(x))
}
func (x *MatchError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchError_value, data, "MatchError")
	if err != nil {
		return err
	}
	*x = MatchError(value)
	return nil
}
func (MatchError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 匹配请求
type MatchReq struct {
	GameId           *common.GameId `protobuf:"varint,1,opt,name=game_id,json=gameId,enum=common.GameId" json:"game_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *MatchReq) Reset()                    { *m = MatchReq{} }
func (m *MatchReq) String() string            { return proto.CompactTextString(m) }
func (*MatchReq) ProtoMessage()               {}
func (*MatchReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MatchReq) GetGameId() common.GameId {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return common.GameId_GAMEID_XUELIU
}

// 匹配返回
type MatchRsp struct {
	ErrCode          *MatchError `protobuf:"varint,1,opt,name=err_code,json=errCode,enum=match.MatchError" json:"err_code,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MatchRsp) Reset()                    { *m = MatchRsp{} }
func (m *MatchRsp) String() string            { return proto.CompactTextString(m) }
func (*MatchRsp) ProtoMessage()               {}
func (*MatchRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MatchRsp) GetErrCode() MatchError {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return MatchError_MATCH_SUC
}

func init() {
	proto.RegisterType((*MatchReq)(nil), "match.MatchReq")
	proto.RegisterType((*MatchRsp)(nil), "match.MatchRsp")
	proto.RegisterEnum("match.MatchError", MatchError_name, MatchError_value)
}

func init() { proto.RegisterFile("match.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4d, 0x2c, 0x49,
	0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0x04, 0x93, 0xf3, 0x73,
	0x73, 0xf3, 0xf3, 0xf4, 0x53, 0xf3, 0x4a, 0x73, 0x21, 0x32, 0x4a, 0xc6, 0x5c, 0x1c, 0xbe, 0x20,
	0xb9, 0xa0, 0xd4, 0x42, 0x21, 0x75, 0x2e, 0xf6, 0xf4, 0xc4, 0xdc, 0xd4, 0xf8, 0xcc, 0x14, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x3e, 0x3d, 0x88, 0x06, 0x3d, 0xf7, 0xc4, 0xdc, 0x54, 0xcf,
	0x94, 0x20, 0xb6, 0x74, 0x30, 0xad, 0x64, 0x01, 0xd3, 0x54, 0x5c, 0x20, 0xa4, 0xc3, 0xc5, 0x91,
	0x5a, 0x54, 0x14, 0x9f, 0x9c, 0x9f, 0x92, 0x0a, 0xd5, 0x25, 0xa8, 0x07, 0xb1, 0x1a, 0xac, 0xc4,
	0xb5, 0xa8, 0x28, 0xbf, 0x28, 0x88, 0x3d, 0xb5, 0xa8, 0xc8, 0x39, 0x3f, 0x25, 0x55, 0x4b, 0x9b,
	0x8b, 0x0b, 0x21, 0x2c, 0xc4, 0xcb, 0xc5, 0xe9, 0xeb, 0x18, 0xe2, 0xec, 0x11, 0x1f, 0x1c, 0xea,
	0x2c, 0xc0, 0x20, 0xc4, 0xc7, 0xc5, 0x05, 0xe1, 0xba, 0x39, 0x7a, 0xfa, 0x08, 0x30, 0x02, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xa6, 0x2a, 0xef, 0x3f, 0xc3, 0x00, 0x00, 0x00,
}
