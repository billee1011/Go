// Code generated by protoc-gen-go. DO NOT EDIT.
// source: robot.proto

package robot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GameConfig 游戏玩法信息
type GameConfig struct {
	GameId   uint32 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	GameName string `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	GameType uint32 `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
}

func (m *GameConfig) Reset()                    { *m = GameConfig{} }
func (m *GameConfig) String() string            { return proto.CompactTextString(m) }
func (*GameConfig) ProtoMessage()               {}
func (*GameConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GameConfig) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GameConfig) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func (m *GameConfig) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

// GameWinRate 游戏对应的胜率
type GameWinRate struct {
	Game    *GameConfig `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
	WinRate int32       `protobuf:"varint,2,opt,name=win_rate,json=winRate" json:"win_rate,omitempty"`
}

func (m *GameWinRate) Reset()                    { *m = GameWinRate{} }
func (m *GameWinRate) String() string            { return proto.CompactTextString(m) }
func (*GameWinRate) ProtoMessage()               {}
func (*GameWinRate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GameWinRate) GetGame() *GameConfig {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *GameWinRate) GetWinRate() int32 {
	if m != nil {
		return m.WinRate
	}
	return 0
}

// RobotPlayerInfo 机器人I玩家详情
type RobotPlayerInfo struct {
	PlayerId    uint64           `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	NickName    string           `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	HeadImage   string           `protobuf:"bytes,3,opt,name=head_image,json=headImage" json:"head_image,omitempty"`
	Coin        uint64           `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	State       RobotPlayerState `protobuf:"varint,5,opt,name=state,enum=robot.RobotPlayerState" json:"state,omitempty"`
	GameWinRate *GameWinRate     `protobuf:"bytes,6,opt,name=game_win_rate,json=gameWinRate" json:"game_win_rate,omitempty"`
}

func (m *RobotPlayerInfo) Reset()                    { *m = RobotPlayerInfo{} }
func (m *RobotPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*RobotPlayerInfo) ProtoMessage()               {}
func (*RobotPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RobotPlayerInfo) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *RobotPlayerInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *RobotPlayerInfo) GetHeadImage() string {
	if m != nil {
		return m.HeadImage
	}
	return ""
}

func (m *RobotPlayerInfo) GetCoin() uint64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *RobotPlayerInfo) GetState() RobotPlayerState {
	if m != nil {
		return m.State
	}
	return RobotPlayerState_RPS_IDIE
}

func (m *RobotPlayerInfo) GetGameWinRate() *GameWinRate {
	if m != nil {
		return m.GameWinRate
	}
	return nil
}

// WinRateRange 胜率范围
type WinRateRange struct {
	High int32 `protobuf:"varint,1,opt,name=high" json:"high,omitempty"`
	Low  int32 `protobuf:"varint,2,opt,name=low" json:"low,omitempty"`
}

func (m *WinRateRange) Reset()                    { *m = WinRateRange{} }
func (m *WinRateRange) String() string            { return proto.CompactTextString(m) }
func (*WinRateRange) ProtoMessage()               {}
func (*WinRateRange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *WinRateRange) GetHigh() int32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *WinRateRange) GetLow() int32 {
	if m != nil {
		return m.Low
	}
	return 0
}

// CoinsRange 金币范围
type CoinsRange struct {
	High int32 `protobuf:"varint,1,opt,name=high" json:"high,omitempty"`
	Low  int32 `protobuf:"varint,2,opt,name=low" json:"low,omitempty"`
}

func (m *CoinsRange) Reset()                    { *m = CoinsRange{} }
func (m *CoinsRange) String() string            { return proto.CompactTextString(m) }
func (*CoinsRange) ProtoMessage()               {}
func (*CoinsRange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CoinsRange) GetHigh() int32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *CoinsRange) GetLow() int32 {
	if m != nil {
		return m.Low
	}
	return 0
}

// GetRobotPlayerIDReq 获取机器人ID请求
type GetRobotPlayerIDReq struct {
	Game         *GameConfig   `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
	WinRateRange *WinRateRange `protobuf:"bytes,2,opt,name=win_rate_range,json=winRateRange" json:"win_rate_range,omitempty"`
	CoinsRange   *CoinsRange   `protobuf:"bytes,3,opt,name=coins_range,json=coinsRange" json:"coins_range,omitempty"`
}

func (m *GetRobotPlayerIDReq) Reset()                    { *m = GetRobotPlayerIDReq{} }
func (m *GetRobotPlayerIDReq) String() string            { return proto.CompactTextString(m) }
func (*GetRobotPlayerIDReq) ProtoMessage()               {}
func (*GetRobotPlayerIDReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetRobotPlayerIDReq) GetGame() *GameConfig {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *GetRobotPlayerIDReq) GetWinRateRange() *WinRateRange {
	if m != nil {
		return m.WinRateRange
	}
	return nil
}

func (m *GetRobotPlayerIDReq) GetCoinsRange() *CoinsRange {
	if m != nil {
		return m.CoinsRange
	}
	return nil
}

// GetRobotPlayerIDRsp 机器人ID响应
type GetRobotPlayerIDRsp struct {
	RobotPlayerId uint64 `protobuf:"varint,1,opt,name=robot_player_id,json=robotPlayerId" json:"robot_player_id,omitempty"`
	ErrCode       int32  `protobuf:"varint,2,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
}

func (m *GetRobotPlayerIDRsp) Reset()                    { *m = GetRobotPlayerIDRsp{} }
func (m *GetRobotPlayerIDRsp) String() string            { return proto.CompactTextString(m) }
func (*GetRobotPlayerIDRsp) ProtoMessage()               {}
func (*GetRobotPlayerIDRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GetRobotPlayerIDRsp) GetRobotPlayerId() uint64 {
	if m != nil {
		return m.RobotPlayerId
	}
	return 0
}

func (m *GetRobotPlayerIDRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

// SetRobotPlayerStateReq 設置机器人玩家状态請求
type SetRobotPlayerStateReq struct {
	RobotPlayerId uint64           `protobuf:"varint,1,opt,name=robot_player_id,json=robotPlayerId" json:"robot_player_id,omitempty"`
	Newstate      RobotPlayerState `protobuf:"varint,2,opt,name=newstate,enum=robot.RobotPlayerState" json:"newstate,omitempty"`
	Oldstate      RobotPlayerState `protobuf:"varint,3,opt,name=oldstate,enum=robot.RobotPlayerState" json:"oldstate,omitempty"`
	ServerType    ServerType       `protobuf:"varint,4,opt,name=server_type,json=serverType,enum=robot.ServerType" json:"server_type,omitempty"`
	ServerAddr    string           `protobuf:"bytes,5,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
}

func (m *SetRobotPlayerStateReq) Reset()                    { *m = SetRobotPlayerStateReq{} }
func (m *SetRobotPlayerStateReq) String() string            { return proto.CompactTextString(m) }
func (*SetRobotPlayerStateReq) ProtoMessage()               {}
func (*SetRobotPlayerStateReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *SetRobotPlayerStateReq) GetRobotPlayerId() uint64 {
	if m != nil {
		return m.RobotPlayerId
	}
	return 0
}

func (m *SetRobotPlayerStateReq) GetNewstate() RobotPlayerState {
	if m != nil {
		return m.Newstate
	}
	return RobotPlayerState_RPS_IDIE
}

func (m *SetRobotPlayerStateReq) GetOldstate() RobotPlayerState {
	if m != nil {
		return m.Oldstate
	}
	return RobotPlayerState_RPS_IDIE
}

func (m *SetRobotPlayerStateReq) GetServerType() ServerType {
	if m != nil {
		return m.ServerType
	}
	return ServerType_ST_GATE
}

func (m *SetRobotPlayerStateReq) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

// SetRobotPlayerStateRsp 設置机器人玩家状态响应
type SetRobotPlayerStateRsp struct {
	Result  bool  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrCode int32 `protobuf:"varint,2,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
}

func (m *SetRobotPlayerStateRsp) Reset()                    { *m = SetRobotPlayerStateRsp{} }
func (m *SetRobotPlayerStateRsp) String() string            { return proto.CompactTextString(m) }
func (*SetRobotPlayerStateRsp) ProtoMessage()               {}
func (*SetRobotPlayerStateRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *SetRobotPlayerStateRsp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *SetRobotPlayerStateRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func init() {
	proto.RegisterType((*GameConfig)(nil), "robot.GameConfig")
	proto.RegisterType((*GameWinRate)(nil), "robot.GameWinRate")
	proto.RegisterType((*RobotPlayerInfo)(nil), "robot.RobotPlayerInfo")
	proto.RegisterType((*WinRateRange)(nil), "robot.WinRateRange")
	proto.RegisterType((*CoinsRange)(nil), "robot.CoinsRange")
	proto.RegisterType((*GetRobotPlayerIDReq)(nil), "robot.GetRobotPlayerIDReq")
	proto.RegisterType((*GetRobotPlayerIDRsp)(nil), "robot.GetRobotPlayerIDRsp")
	proto.RegisterType((*SetRobotPlayerStateReq)(nil), "robot.SetRobotPlayerStateReq")
	proto.RegisterType((*SetRobotPlayerStateRsp)(nil), "robot.SetRobotPlayerStateRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RobotService service

type RobotServiceClient interface {
	GetRobotPlayerIDByInfo(ctx context.Context, in *GetRobotPlayerIDReq, opts ...grpc.CallOption) (*GetRobotPlayerIDRsp, error)
	SetRobotPlayerState(ctx context.Context, in *SetRobotPlayerStateReq, opts ...grpc.CallOption) (*SetRobotPlayerStateRsp, error)
}

type robotServiceClient struct {
	cc *grpc.ClientConn
}

func NewRobotServiceClient(cc *grpc.ClientConn) RobotServiceClient {
	return &robotServiceClient{cc}
}

func (c *robotServiceClient) GetRobotPlayerIDByInfo(ctx context.Context, in *GetRobotPlayerIDReq, opts ...grpc.CallOption) (*GetRobotPlayerIDRsp, error) {
	out := new(GetRobotPlayerIDRsp)
	err := grpc.Invoke(ctx, "/robot.RobotService/GetRobotPlayerIDByInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) SetRobotPlayerState(ctx context.Context, in *SetRobotPlayerStateReq, opts ...grpc.CallOption) (*SetRobotPlayerStateRsp, error) {
	out := new(SetRobotPlayerStateRsp)
	err := grpc.Invoke(ctx, "/robot.RobotService/SetRobotPlayerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RobotService service

type RobotServiceServer interface {
	GetRobotPlayerIDByInfo(context.Context, *GetRobotPlayerIDReq) (*GetRobotPlayerIDRsp, error)
	SetRobotPlayerState(context.Context, *SetRobotPlayerStateReq) (*SetRobotPlayerStateRsp, error)
}

func RegisterRobotServiceServer(s *grpc.Server, srv RobotServiceServer) {
	s.RegisterService(&_RobotService_serviceDesc, srv)
}

func _RobotService_GetRobotPlayerIDByInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPlayerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).GetRobotPlayerIDByInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.RobotService/GetRobotPlayerIDByInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).GetRobotPlayerIDByInfo(ctx, req.(*GetRobotPlayerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_SetRobotPlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRobotPlayerStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).SetRobotPlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.RobotService/SetRobotPlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).SetRobotPlayerState(ctx, req.(*SetRobotPlayerStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RobotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "robot.RobotService",
	HandlerType: (*RobotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRobotPlayerIDByInfo",
			Handler:    _RobotService_GetRobotPlayerIDByInfo_Handler,
		},
		{
			MethodName: "SetRobotPlayerState",
			Handler:    _RobotService_SetRobotPlayerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robot.proto",
}

func init() { proto.RegisterFile("robot.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x26, 0xeb, 0xcf, 0xda, 0x93, 0x76, 0x03, 0x57, 0xea, 0x4a, 0xd1, 0x44, 0x15, 0x09, 0xd4,
	0x1b, 0x76, 0x91, 0x21, 0x24, 0x2e, 0xa1, 0x48, 0x53, 0x85, 0x04, 0xc8, 0x05, 0xc1, 0x5d, 0xe4,
	0xd5, 0x5e, 0x1b, 0xd1, 0xd8, 0x99, 0x93, 0x11, 0xf5, 0x99, 0x78, 0x02, 0x1e, 0x88, 0xe7, 0x00,
	0xf9, 0x38, 0x49, 0xd3, 0x51, 0xca, 0xb8, 0xf3, 0xf9, 0xf9, 0x8e, 0xbf, 0xef, 0xf3, 0x49, 0xc0,
	0xd5, 0xea, 0x52, 0xa5, 0x67, 0xb1, 0x56, 0xa9, 0x22, 0x0d, 0x0c, 0x86, 0x20, 0xe4, 0x4d, 0x64,
	0x53, 0x5e, 0x00, 0x70, 0xc1, 0x22, 0x31, 0x51, 0xf2, 0x2a, 0x5c, 0x90, 0x13, 0x38, 0x5c, 0xb0,
	0x48, 0x04, 0x21, 0x1f, 0x38, 0x23, 0x67, 0xdc, 0xa5, 0x4d, 0x13, 0x4e, 0x39, 0x79, 0x04, 0x6d,
	0x2c, 0x48, 0x16, 0x89, 0xc1, 0xc1, 0xc8, 0x19, 0xb7, 0x69, 0xcb, 0x24, 0xde, 0xb1, 0x48, 0x94,
	0xc5, 0x74, 0x1d, 0x8b, 0x41, 0x0d, 0x71, 0x58, 0xfc, 0xb8, 0x8e, 0x85, 0xf7, 0x1e, 0x5c, 0x73,
	0xc1, 0xe7, 0x50, 0x52, 0x96, 0x0a, 0xf2, 0x04, 0xea, 0xa6, 0x84, 0xe3, 0x5d, 0xff, 0xc1, 0x99,
	0xa5, 0xb7, 0xa1, 0x40, 0xb1, 0x4c, 0x1e, 0x42, 0x2b, 0x0b, 0x65, 0xa0, 0x59, 0x6a, 0xaf, 0x6b,
	0xd0, 0xc3, 0xcc, 0x4e, 0xf0, 0x7e, 0x3a, 0x70, 0x4c, 0x0d, 0xea, 0xc3, 0x8a, 0xad, 0x85, 0x9e,
	0xca, 0x2b, 0x65, 0x18, 0xc4, 0x18, 0x15, 0xcc, 0xeb, 0xb4, 0x65, 0x13, 0x96, 0xbb, 0x0c, 0xe7,
	0x5f, 0xb7, 0xb8, 0x9b, 0x04, 0x72, 0x3f, 0x05, 0x58, 0x0a, 0xc6, 0x83, 0x30, 0x62, 0x0b, 0x4b,
	0xbe, 0x4d, 0xdb, 0x26, 0x33, 0x35, 0x09, 0x42, 0xa0, 0x3e, 0x57, 0xa1, 0x1c, 0xd4, 0x71, 0x26,
	0x9e, 0xc9, 0x33, 0x68, 0x24, 0xa9, 0x21, 0xd6, 0x18, 0x39, 0xe3, 0x23, 0xff, 0x24, 0xd7, 0x50,
	0xe1, 0x34, 0x33, 0x65, 0x6a, 0xbb, 0xc8, 0x0b, 0xe8, 0xa2, 0x3b, 0xa5, 0x9e, 0x26, 0x4a, 0x27,
	0x15, 0xe9, 0xb9, 0x39, 0xd4, 0x5d, 0x6c, 0x02, 0xef, 0x39, 0x74, 0x8a, 0x3c, 0x93, 0x96, 0xca,
	0x32, 0x5c, 0x2c, 0x51, 0x5e, 0x83, 0xe2, 0x99, 0xdc, 0x87, 0xda, 0x4a, 0x65, 0xb9, 0x43, 0xe6,
	0xe8, 0xf9, 0x00, 0x13, 0x15, 0xca, 0xe4, 0x7f, 0x30, 0xdf, 0x1d, 0xe8, 0x5d, 0x88, 0xb4, 0x6a,
	0xea, 0x1b, 0x2a, 0xae, 0xef, 0xfa, 0x56, 0x2f, 0xe1, 0xa8, 0xd0, 0x16, 0x68, 0x73, 0x2d, 0xce,
	0x76, 0xfd, 0x5e, 0x0e, 0xa8, 0xaa, 0xa0, 0x9d, 0xac, 0xaa, 0xc9, 0x07, 0xd7, 0x58, 0x9a, 0xe4,
	0xb8, 0xda, 0xd6, 0x45, 0x1b, 0x1d, 0x14, 0xe6, 0xe5, 0xd9, 0xfb, 0xb2, 0x83, 0x6c, 0x12, 0x93,
	0xa7, 0x70, 0x8c, 0xb0, 0xe0, 0xf6, 0x22, 0x74, 0x75, 0xa5, 0x95, 0x9b, 0xcd, 0x12, 0x5a, 0x07,
	0x73, 0xc5, 0xcb, 0xcd, 0x12, 0x5a, 0x4f, 0x14, 0x17, 0xde, 0x2f, 0x07, 0xfa, 0xb3, 0xad, 0xd1,
	0xf6, 0x21, 0xc5, 0xf5, 0x9d, 0xa7, 0x9f, 0x43, 0x4b, 0x8a, 0xcc, 0xae, 0xc7, 0xc1, 0xfe, 0xf5,
	0x28, 0x1b, 0x0d, 0x48, 0xad, 0xb8, 0x05, 0xd5, 0xfe, 0x01, 0x2a, 0x1a, 0x8d, 0x75, 0x89, 0xd0,
	0xdf, 0x84, 0xb6, 0x9f, 0x5d, 0x1d, 0x71, 0x85, 0x75, 0x33, 0xac, 0x98, 0xef, 0x8f, 0x42, 0x52,
	0x9e, 0xc9, 0xe3, 0x12, 0xc3, 0x38, 0xd7, 0xb8, 0xbf, 0xed, 0xa2, 0xe1, 0x15, 0xe7, 0xda, 0x7b,
	0xbb, 0xdb, 0x80, 0x24, 0x26, 0x7d, 0x68, 0x6a, 0x91, 0xdc, 0xac, 0x52, 0xd4, 0xdd, 0xa2, 0x79,
	0xb4, 0xc7, 0x4e, 0xff, 0x87, 0x03, 0x1d, 0x1c, 0x65, 0xd8, 0x84, 0x73, 0x41, 0x28, 0xf4, 0x6f,
	0xbf, 0xdc, 0xeb, 0x35, 0x7e, 0xbf, 0xc3, 0x62, 0xb7, 0xfe, 0xdc, 0xc2, 0xe1, 0x5f, 0x6b, 0x49,
	0xec, 0xdd, 0x23, 0x9f, 0xa0, 0xb7, 0x83, 0x31, 0x39, 0x2d, 0x8d, 0xd8, 0xf5, 0x9c, 0xc3, 0x7d,
	0x65, 0x33, 0xf6, 0xb2, 0x89, 0x7f, 0xc7, 0xf3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0xc4,
	0xcf, 0x78, 0x3f, 0x05, 0x00, 0x00,
}
