// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PlayerState 玩家状态
type PlayerState int32

const (
	PlayerState_PS_IDIE     PlayerState = 0
	PlayerState_PS_MATCHING PlayerState = 1
	PlayerState_PS_GAMEING  PlayerState = 2
)

var PlayerState_name = map[int32]string{
	0: "PS_IDIE",
	1: "PS_MATCHING",
	2: "PS_GAMEING",
}
var PlayerState_value = map[string]int32{
	"PS_IDIE":     0,
	"PS_MATCHING": 1,
	"PS_GAMEING":  2,
}

func (x PlayerState) String() string {
	return proto.EnumName(PlayerState_name, int32(x))
}
func (PlayerState) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// ServerType 服务类型
type ServerType int32

const (
	ServerType_ST_GATE  ServerType = 0
	ServerType_ST_MATCH ServerType = 1
	ServerType_ST_ROOM  ServerType = 2
)

var ServerType_name = map[int32]string{
	0: "ST_GATE",
	1: "ST_MATCH",
	2: "ST_ROOM",
}
var ServerType_value = map[string]int32{
	"ST_GATE":  0,
	"ST_MATCH": 1,
	"ST_ROOM":  2,
}

func (x ServerType) String() string {
	return proto.EnumName(ServerType_name, int32(x))
}
func (ServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// GetPlayerByAccountReq 根据账号获取玩家请求
type GetPlayerByAccountReq struct {
	AccountId uint64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *GetPlayerByAccountReq) Reset()                    { *m = GetPlayerByAccountReq{} }
func (m *GetPlayerByAccountReq) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerByAccountReq) ProtoMessage()               {}
func (*GetPlayerByAccountReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GetPlayerByAccountReq) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

// GetPlayerByAccountRsp 根据账号获取玩家应答
type GetPlayerByAccountRsp struct {
	ErrCode  int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	PlayerId uint64 `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *GetPlayerByAccountRsp) Reset()                    { *m = GetPlayerByAccountRsp{} }
func (m *GetPlayerByAccountRsp) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerByAccountRsp) ProtoMessage()               {}
func (*GetPlayerByAccountRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *GetPlayerByAccountRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetPlayerByAccountRsp) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// GetPlayerInfoReq 获取玩家信息
type GetPlayerInfoReq struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *GetPlayerInfoReq) Reset()                    { *m = GetPlayerInfoReq{} }
func (m *GetPlayerInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerInfoReq) ProtoMessage()               {}
func (*GetPlayerInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetPlayerInfoReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// GetPlayerInfoRsp 获取玩家信息应答
type GetPlayerInfoRsp struct {
	ErrCode  int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	PlayerId uint64 `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	NickName string `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
	Gender   uint64 `protobuf:"varint,5,opt,name=gender" json:"gender,omitempty"`
	Name     string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Phone    string `protobuf:"bytes,7,opt,name=phone" json:"phone,omitempty"`
}

func (m *GetPlayerInfoRsp) Reset()                    { *m = GetPlayerInfoRsp{} }
func (m *GetPlayerInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerInfoRsp) ProtoMessage()               {}
func (*GetPlayerInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetPlayerInfoRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *GetPlayerInfoRsp) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *GetPlayerInfoRsp) GetGender() uint64 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPlayerInfoRsp) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// UpdatePlayerInfoReq 修改玩家信息
type UpdatePlayerInfoReq struct {
	ErrCode  int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	PlayerId uint64 `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	NickName string `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *UpdatePlayerInfoReq) Reset()                    { *m = UpdatePlayerInfoReq{} }
func (m *UpdatePlayerInfoReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerInfoReq) ProtoMessage()               {}
func (*UpdatePlayerInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *UpdatePlayerInfoReq) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *UpdatePlayerInfoReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *UpdatePlayerInfoReq) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UpdatePlayerInfoReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

// UpdatePlayerInfoRsp 修改玩家信息应答
type UpdatePlayerInfoRsp struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	Result  bool  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *UpdatePlayerInfoRsp) Reset()                    { *m = UpdatePlayerInfoRsp{} }
func (m *UpdatePlayerInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerInfoRsp) ProtoMessage()               {}
func (*UpdatePlayerInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *UpdatePlayerInfoRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *UpdatePlayerInfoRsp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// GetPlayerStateReq 获取玩家状态
type GetPlayerStateReq struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *GetPlayerStateReq) Reset()                    { *m = GetPlayerStateReq{} }
func (m *GetPlayerStateReq) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerStateReq) ProtoMessage()               {}
func (*GetPlayerStateReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *GetPlayerStateReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// GetPlayerStateRsp 获取玩家状态应答
type GetPlayerStateRsp struct {
	ErrCode int32       `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	State   PlayerState `protobuf:"varint,2,opt,name=state,enum=user.PlayerState" json:"state,omitempty"`
}

func (m *GetPlayerStateRsp) Reset()                    { *m = GetPlayerStateRsp{} }
func (m *GetPlayerStateRsp) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerStateRsp) ProtoMessage()               {}
func (*GetPlayerStateRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *GetPlayerStateRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetPlayerStateRsp) GetState() PlayerState {
	if m != nil {
		return m.State
	}
	return PlayerState_PS_IDIE
}

// UpdatePlayerStateReq 更新玩家状态
type UpdatePlayerStateReq struct {
	PlayerId   uint64      `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	OldState   PlayerState `protobuf:"varint,2,opt,name=old_state,json=oldState,enum=user.PlayerState" json:"old_state,omitempty"`
	NewState   PlayerState `protobuf:"varint,3,opt,name=new_state,json=newState,enum=user.PlayerState" json:"new_state,omitempty"`
	ServerType ServerType  `protobuf:"varint,4,opt,name=server_type,json=serverType,enum=user.ServerType" json:"server_type,omitempty"`
	ServerAddr string      `protobuf:"bytes,5,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
}

func (m *UpdatePlayerStateReq) Reset()                    { *m = UpdatePlayerStateReq{} }
func (m *UpdatePlayerStateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerStateReq) ProtoMessage()               {}
func (*UpdatePlayerStateReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *UpdatePlayerStateReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *UpdatePlayerStateReq) GetOldState() PlayerState {
	if m != nil {
		return m.OldState
	}
	return PlayerState_PS_IDIE
}

func (m *UpdatePlayerStateReq) GetNewState() PlayerState {
	if m != nil {
		return m.NewState
	}
	return PlayerState_PS_IDIE
}

func (m *UpdatePlayerStateReq) GetServerType() ServerType {
	if m != nil {
		return m.ServerType
	}
	return ServerType_ST_GATE
}

func (m *UpdatePlayerStateReq) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

// UpdatePlayerStateRsp  更新玩家状态应答
type UpdatePlayerStateRsp struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	Result  bool  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *UpdatePlayerStateRsp) Reset()                    { *m = UpdatePlayerStateRsp{} }
func (m *UpdatePlayerStateRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerStateRsp) ProtoMessage()               {}
func (*UpdatePlayerStateRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *UpdatePlayerStateRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *UpdatePlayerStateRsp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// GetGameListInfoReq 获取游戏列表信息
type GetGameListInfoReq struct {
}

func (m *GetGameListInfoReq) Reset()                    { *m = GetGameListInfoReq{} }
func (m *GetGameListInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetGameListInfoReq) ProtoMessage()               {}
func (*GetGameListInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

// GameInfo 游戏信息
type GameInfo struct {
	GameId     uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	GameName   string `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	GameType   uint64 `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	LevelId    uint64 `protobuf:"varint,4,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
	BaseScores uint64 `protobuf:"varint,5,opt,name=base_scores,json=baseScores" json:"base_scores,omitempty"`
	LowScores  uint64 `protobuf:"varint,6,opt,name=low_scores,json=lowScores" json:"low_scores,omitempty"`
	HighScores uint64 `protobuf:"varint,7,opt,name=high_scores,json=highScores" json:"high_scores,omitempty"`
	LowPeople  uint64 `protobuf:"varint,8,opt,name=low_people,json=lowPeople" json:"low_people,omitempty"`
}

func (m *GameInfo) Reset()                    { *m = GameInfo{} }
func (m *GameInfo) String() string            { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()               {}
func (*GameInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *GameInfo) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GameInfo) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func (m *GameInfo) GetGameType() uint64 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *GameInfo) GetLevelId() uint64 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *GameInfo) GetBaseScores() uint64 {
	if m != nil {
		return m.BaseScores
	}
	return 0
}

func (m *GameInfo) GetLowScores() uint64 {
	if m != nil {
		return m.LowScores
	}
	return 0
}

func (m *GameInfo) GetHighScores() uint64 {
	if m != nil {
		return m.HighScores
	}
	return 0
}

func (m *GameInfo) GetLowPeople() uint64 {
	if m != nil {
		return m.LowPeople
	}
	return 0
}

// GetGameListInfoRsp 获取游戏列表信息应答
type GetGameListInfoRsp struct {
	ErrCode  int32       `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	GameInfo []*GameInfo `protobuf:"bytes,2,rep,name=game_info,json=gameInfo" json:"game_info,omitempty"`
}

func (m *GetGameListInfoRsp) Reset()                    { *m = GetGameListInfoRsp{} }
func (m *GetGameListInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*GetGameListInfoRsp) ProtoMessage()               {}
func (*GetGameListInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *GetGameListInfoRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetGameListInfoRsp) GetGameInfo() []*GameInfo {
	if m != nil {
		return m.GameInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPlayerByAccountReq)(nil), "user.GetPlayerByAccountReq")
	proto.RegisterType((*GetPlayerByAccountRsp)(nil), "user.GetPlayerByAccountRsp")
	proto.RegisterType((*GetPlayerInfoReq)(nil), "user.GetPlayerInfoReq")
	proto.RegisterType((*GetPlayerInfoRsp)(nil), "user.GetPlayerInfoRsp")
	proto.RegisterType((*UpdatePlayerInfoReq)(nil), "user.UpdatePlayerInfoReq")
	proto.RegisterType((*UpdatePlayerInfoRsp)(nil), "user.UpdatePlayerInfoRsp")
	proto.RegisterType((*GetPlayerStateReq)(nil), "user.GetPlayerStateReq")
	proto.RegisterType((*GetPlayerStateRsp)(nil), "user.GetPlayerStateRsp")
	proto.RegisterType((*UpdatePlayerStateReq)(nil), "user.UpdatePlayerStateReq")
	proto.RegisterType((*UpdatePlayerStateRsp)(nil), "user.UpdatePlayerStateRsp")
	proto.RegisterType((*GetGameListInfoReq)(nil), "user.GetGameListInfoReq")
	proto.RegisterType((*GameInfo)(nil), "user.GameInfo")
	proto.RegisterType((*GetGameListInfoRsp)(nil), "user.GetGameListInfoRsp")
	proto.RegisterEnum("user.PlayerState", PlayerState_name, PlayerState_value)
	proto.RegisterEnum("user.ServerType", ServerType_name, ServerType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PlayerData service

type PlayerDataClient interface {
	// GetPlayerByAccount 根据账号获取玩家
	GetPlayerByAccount(ctx context.Context, in *GetPlayerByAccountReq, opts ...grpc.CallOption) (*GetPlayerByAccountRsp, error)
	// GetPlayerInfo 获取玩家信息
	GetPlayerInfo(ctx context.Context, in *GetPlayerInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoRsp, error)
	// UpdatePlayerInfo 更新玩家信息
	UpdatePlayerInfo(ctx context.Context, in *UpdatePlayerInfoReq, opts ...grpc.CallOption) (*UpdatePlayerInfoRsp, error)
	// GetPlayerState 获取玩家状态
	GetPlayerState(ctx context.Context, in *GetPlayerStateReq, opts ...grpc.CallOption) (*GetPlayerStateRsp, error)
	// UpdatePlayerState 更新玩家状态
	UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateReq, opts ...grpc.CallOption) (*UpdatePlayerStateRsp, error)
	// GetGameListInfo 获取游戏列表
	GetGameListInfo(ctx context.Context, in *GetGameListInfoReq, opts ...grpc.CallOption) (*GetGameListInfoRsp, error)
}

type playerDataClient struct {
	cc *grpc.ClientConn
}

func NewPlayerDataClient(cc *grpc.ClientConn) PlayerDataClient {
	return &playerDataClient{cc}
}

func (c *playerDataClient) GetPlayerByAccount(ctx context.Context, in *GetPlayerByAccountReq, opts ...grpc.CallOption) (*GetPlayerByAccountRsp, error) {
	out := new(GetPlayerByAccountRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetPlayerByAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) GetPlayerInfo(ctx context.Context, in *GetPlayerInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoRsp, error) {
	out := new(GetPlayerInfoRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetPlayerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) UpdatePlayerInfo(ctx context.Context, in *UpdatePlayerInfoReq, opts ...grpc.CallOption) (*UpdatePlayerInfoRsp, error) {
	out := new(UpdatePlayerInfoRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/UpdatePlayerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) GetPlayerState(ctx context.Context, in *GetPlayerStateReq, opts ...grpc.CallOption) (*GetPlayerStateRsp, error) {
	out := new(GetPlayerStateRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetPlayerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateReq, opts ...grpc.CallOption) (*UpdatePlayerStateRsp, error) {
	out := new(UpdatePlayerStateRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/UpdatePlayerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) GetGameListInfo(ctx context.Context, in *GetGameListInfoReq, opts ...grpc.CallOption) (*GetGameListInfoRsp, error) {
	out := new(GetGameListInfoRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetGameListInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlayerData service

type PlayerDataServer interface {
	// GetPlayerByAccount 根据账号获取玩家
	GetPlayerByAccount(context.Context, *GetPlayerByAccountReq) (*GetPlayerByAccountRsp, error)
	// GetPlayerInfo 获取玩家信息
	GetPlayerInfo(context.Context, *GetPlayerInfoReq) (*GetPlayerInfoRsp, error)
	// UpdatePlayerInfo 更新玩家信息
	UpdatePlayerInfo(context.Context, *UpdatePlayerInfoReq) (*UpdatePlayerInfoRsp, error)
	// GetPlayerState 获取玩家状态
	GetPlayerState(context.Context, *GetPlayerStateReq) (*GetPlayerStateRsp, error)
	// UpdatePlayerState 更新玩家状态
	UpdatePlayerState(context.Context, *UpdatePlayerStateReq) (*UpdatePlayerStateRsp, error)
	// GetGameListInfo 获取游戏列表
	GetGameListInfo(context.Context, *GetGameListInfoReq) (*GetGameListInfoRsp, error)
}

func RegisterPlayerDataServer(s *grpc.Server, srv PlayerDataServer) {
	s.RegisterService(&_PlayerData_serviceDesc, srv)
}

func _PlayerData_GetPlayerByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetPlayerByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetPlayerByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetPlayerByAccount(ctx, req.(*GetPlayerByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_GetPlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetPlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetPlayerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetPlayerInfo(ctx, req.(*GetPlayerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_UpdatePlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).UpdatePlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/UpdatePlayerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).UpdatePlayerInfo(ctx, req.(*UpdatePlayerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_GetPlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetPlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetPlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetPlayerState(ctx, req.(*GetPlayerStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_UpdatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).UpdatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/UpdatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).UpdatePlayerState(ctx, req.(*UpdatePlayerStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_GetGameListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetGameListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetGameListInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetGameListInfo(ctx, req.(*GetGameListInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlayerData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.PlayerData",
	HandlerType: (*PlayerDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerByAccount",
			Handler:    _PlayerData_GetPlayerByAccount_Handler,
		},
		{
			MethodName: "GetPlayerInfo",
			Handler:    _PlayerData_GetPlayerInfo_Handler,
		},
		{
			MethodName: "UpdatePlayerInfo",
			Handler:    _PlayerData_UpdatePlayerInfo_Handler,
		},
		{
			MethodName: "GetPlayerState",
			Handler:    _PlayerData_GetPlayerState_Handler,
		},
		{
			MethodName: "UpdatePlayerState",
			Handler:    _PlayerData_UpdatePlayerState_Handler,
		},
		{
			MethodName: "GetGameListInfo",
			Handler:    _PlayerData_GetGameListInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xf9, 0x75, 0x26, 0x34, 0x4d, 0x97, 0xd2, 0xba, 0xa9, 0x50, 0x2b, 0x5f, 0xa8, 0x8a,
	0x14, 0x20, 0x20, 0x2e, 0x1c, 0x50, 0xfa, 0xa3, 0xd4, 0x82, 0xb6, 0x51, 0x1c, 0xc4, 0x05, 0xc9,
	0xda, 0xc6, 0xd3, 0x36, 0xc2, 0xb1, 0x97, 0x5d, 0xb7, 0x51, 0xae, 0xbc, 0x18, 0xe2, 0x69, 0x78,
	0x05, 0x8e, 0x68, 0x77, 0x9d, 0xb4, 0x71, 0x92, 0x16, 0xf5, 0xc0, 0xcd, 0xf3, 0x7d, 0xf3, 0xcd,
	0xec, 0xec, 0xcc, 0x8e, 0x61, 0x49, 0x20, 0xbf, 0xee, 0xf7, 0xb0, 0xce, 0x78, 0x14, 0x47, 0x24,
	0x77, 0x25, 0x90, 0xdb, 0xef, 0xe0, 0x69, 0x0b, 0xe3, 0x76, 0x40, 0x47, 0xc8, 0xf7, 0x46, 0xcd,
	0x5e, 0x2f, 0xba, 0x0a, 0xe3, 0x0e, 0x7e, 0x27, 0xcf, 0x00, 0xa8, 0xb6, 0xbc, 0xbe, 0x6f, 0x19,
	0xdb, 0xc6, 0x4e, 0xae, 0x53, 0x4a, 0x10, 0xc7, 0xb7, 0x4f, 0xe7, 0xea, 0x04, 0x23, 0x1b, 0x60,
	0x22, 0xe7, 0x5e, 0x2f, 0xf2, 0x51, 0xa9, 0xf2, 0x9d, 0x22, 0x72, 0xbe, 0x1f, 0xf9, 0x48, 0x36,
	0xa1, 0xc4, 0x94, 0x40, 0x46, 0xcc, 0xa8, 0x88, 0xa6, 0x06, 0x1c, 0xdf, 0x7e, 0x09, 0xd5, 0x49,
	0x40, 0x27, 0x3c, 0x8f, 0xe4, 0x19, 0xa6, 0x04, 0x46, 0x4a, 0xf0, 0xcb, 0x48, 0x2b, 0x1e, 0x9e,
	0x5d, 0x92, 0x61, 0xbf, 0xf7, 0xcd, 0x0b, 0xe9, 0x00, 0xad, 0xec, 0xb6, 0xb1, 0x53, 0xea, 0x98,
	0x12, 0x38, 0xa1, 0x03, 0x24, 0x6b, 0x50, 0xa0, 0xd7, 0x34, 0xa6, 0xdc, 0xca, 0x29, 0x26, 0xb1,
	0x24, 0x7e, 0x81, 0xa1, 0x8f, 0xdc, 0xca, 0xab, 0x70, 0x89, 0x45, 0x08, 0xe4, 0x54, 0x9c, 0x82,
	0xf2, 0x56, 0xdf, 0x64, 0x15, 0xf2, 0xec, 0x32, 0x0a, 0xd1, 0x2a, 0x2a, 0x50, 0x1b, 0xf6, 0x0f,
	0x03, 0x9e, 0x7c, 0x66, 0x3e, 0x8d, 0x71, 0xba, 0xf0, 0xff, 0x59, 0x86, 0x7d, 0x34, 0xe7, 0x0c,
	0x77, 0x5f, 0xe5, 0x1a, 0x14, 0x38, 0x8a, 0xab, 0x20, 0x56, 0x07, 0x30, 0x3b, 0x89, 0x65, 0xbf,
	0x82, 0x95, 0x49, 0x47, 0xdc, 0x98, 0xc6, 0x78, 0x6f, 0x13, 0xbf, 0xcc, 0x28, 0xee, 0xce, 0xfc,
	0x1c, 0xf2, 0x42, 0xba, 0xa9, 0xc4, 0x95, 0xc6, 0x4a, 0x5d, 0x0e, 0x71, 0xfd, 0xb6, 0x5e, 0xf3,
	0xf6, 0x6f, 0x03, 0x56, 0x6f, 0x57, 0xf5, 0x4f, 0xc7, 0x21, 0x75, 0x28, 0x45, 0x81, 0xef, 0xdd,
	0x93, 0xc2, 0x8c, 0x02, 0x5f, 0x7d, 0x49, 0xff, 0x10, 0x87, 0x89, 0x7f, 0x76, 0xa1, 0x7f, 0x88,
	0x43, 0xed, 0xff, 0x1a, 0xca, 0xf2, 0x11, 0x22, 0xf7, 0xe2, 0x11, 0x43, 0xd5, 0x87, 0x4a, 0xa3,
	0xaa, 0x15, 0xae, 0x22, 0xba, 0x23, 0x86, 0x1d, 0x10, 0x93, 0x6f, 0xb2, 0x35, 0x91, 0x50, 0xdf,
	0xd7, 0x93, 0x56, 0x1a, 0x3b, 0x34, 0x7d, 0x9f, 0xdb, 0xce, 0xbc, 0x42, 0x1f, 0xd6, 0xbf, 0x55,
	0x20, 0x2d, 0x8c, 0x5b, 0x74, 0x80, 0x9f, 0xfa, 0x22, 0x4e, 0x86, 0xd1, 0xfe, 0x63, 0x80, 0x29,
	0x31, 0x69, 0x93, 0x75, 0x28, 0x5e, 0xd0, 0x01, 0xde, 0x5c, 0x5e, 0x41, 0x9a, 0x7a, 0xf4, 0x14,
	0xa1, 0x46, 0x2f, 0xa3, 0x47, 0x4f, 0x02, 0x6a, 0xf4, 0xc6, 0xa4, 0xaa, 0x3a, 0xab, 0x2f, 0x5d,
	0x02, 0xaa, 0xc2, 0x0d, 0x30, 0x03, 0xbc, 0xc6, 0x40, 0xc6, 0xcc, 0x29, 0xae, 0xa8, 0x6c, 0xc7,
	0x97, 0xc5, 0x9f, 0x51, 0x81, 0x9e, 0xe8, 0x45, 0x1c, 0x45, 0xf2, 0xcc, 0x40, 0x42, 0xae, 0x42,
	0xe4, 0x96, 0x0a, 0xa2, 0xe1, 0x98, 0x2f, 0xe8, 0x2d, 0x15, 0x44, 0xc3, 0x84, 0xde, 0x82, 0xf2,
	0x65, 0xff, 0xe2, 0x72, 0xcc, 0x17, 0xb5, 0x5e, 0x42, 0xd3, 0x7a, 0x86, 0x11, 0x0b, 0xd0, 0x32,
	0x27, 0xfa, 0xb6, 0x02, 0xec, 0xaf, 0xb3, 0x17, 0x72, 0xf7, 0xcd, 0xbe, 0x48, 0x0a, 0xed, 0x87,
	0xe7, 0x91, 0x95, 0xd9, 0xce, 0xee, 0x94, 0x1b, 0x15, 0xdd, 0xde, 0xf1, 0x0d, 0xea, 0xc2, 0xe5,
	0xd7, 0xee, 0x7b, 0x28, 0xdf, 0xea, 0x19, 0x29, 0x43, 0xb1, 0xed, 0x7a, 0xce, 0x81, 0x73, 0x58,
	0x7d, 0x44, 0x96, 0xa1, 0xdc, 0x76, 0xbd, 0xe3, 0x66, 0x77, 0xff, 0xc8, 0x39, 0x69, 0x55, 0x0d,
	0x52, 0x01, 0x68, 0xbb, 0x5e, 0xab, 0x79, 0x7c, 0x28, 0xed, 0xcc, 0xee, 0x5b, 0x80, 0x9b, 0x89,
	0x91, 0x5a, 0xb7, 0xeb, 0xb5, 0x9a, 0x5d, 0xa9, 0x7d, 0x0c, 0xa6, 0xdb, 0xd5, 0xda, 0xaa, 0x91,
	0x50, 0x9d, 0xd3, 0xd3, 0xe3, 0x6a, 0xa6, 0xf1, 0x33, 0x0b, 0xa0, 0x73, 0x1e, 0xd0, 0x98, 0x92,
	0x13, 0x55, 0x5f, 0x6a, 0x8b, 0x93, 0xcd, 0xe4, 0xc4, 0xf3, 0xfe, 0x0b, 0xb5, 0xc5, 0xa4, 0x60,
	0xe4, 0x03, 0x2c, 0x4d, 0xad, 0x64, 0xb2, 0x96, 0xf2, 0x4e, 0x66, 0xaa, 0x36, 0x17, 0x17, 0x8c,
	0x1c, 0x41, 0x35, 0xbd, 0x8b, 0xc8, 0x86, 0xf6, 0x9d, 0xb3, 0x27, 0x6b, 0x8b, 0x28, 0xc1, 0xc8,
	0x1e, 0x54, 0xa6, 0x37, 0x0b, 0x59, 0x4f, 0xe5, 0x1c, 0xaf, 0x84, 0xda, 0x7c, 0x42, 0x30, 0xf2,
	0x11, 0x56, 0x66, 0x9e, 0x16, 0xa9, 0xcd, 0xe6, 0x9c, 0x44, 0x5a, 0xc8, 0x09, 0x46, 0x0e, 0x61,
	0x39, 0x35, 0x4b, 0xc4, 0x9a, 0x24, 0x4e, 0xbd, 0xb9, 0xda, 0x02, 0x46, 0xb0, 0xb3, 0x82, 0xfa,
	0x7b, 0xbf, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x2f, 0x20, 0x18, 0xce, 0x07, 0x00, 0x00,
}
