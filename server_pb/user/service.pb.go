// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PlayerState 玩家状态
type PlayerState int32

const (
	PlayerState_PS_IDIE     PlayerState = 0
	PlayerState_PS_GAMEING  PlayerState = 1
	PlayerState_PS_MATCHING PlayerState = 2
)

var PlayerState_name = map[int32]string{
	0: "PS_IDIE",
	1: "PS_GAMEING",
	2: "PS_MATCHING",
}
var PlayerState_value = map[string]int32{
	"PS_IDIE":     0,
	"PS_GAMEING":  1,
	"PS_MATCHING": 2,
}

func (x PlayerState) String() string {
	return proto.EnumName(PlayerState_name, int32(x))
}
func (PlayerState) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// ServerType 服务类型
type ServerType int32

const (
	ServerType_ST_GATE  ServerType = 0
	ServerType_ST_MATCH ServerType = 1
	ServerType_ST_ROOM  ServerType = 2
)

var ServerType_name = map[int32]string{
	0: "ST_GATE",
	1: "ST_MATCH",
	2: "ST_ROOM",
}
var ServerType_value = map[string]int32{
	"ST_GATE":  0,
	"ST_MATCH": 1,
	"ST_ROOM":  2,
}

func (x ServerType) String() string {
	return proto.EnumName(ServerType_name, int32(x))
}
func (ServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// GameConfig 游戏玩法信息
type GameConfig struct {
	GameId    uint32 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	GameName  string `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	GameType  uint32 `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	MinPeople uint32 `protobuf:"varint,4,opt,name=min_people,json=minPeople" json:"min_people,omitempty"`
	MaxPeople uint32 `protobuf:"varint,5,opt,name=max_people,json=maxPeople" json:"max_people,omitempty"`
}

func (m *GameConfig) Reset()                    { *m = GameConfig{} }
func (m *GameConfig) String() string            { return proto.CompactTextString(m) }
func (*GameConfig) ProtoMessage()               {}
func (*GameConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GameConfig) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GameConfig) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func (m *GameConfig) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *GameConfig) GetMinPeople() uint32 {
	if m != nil {
		return m.MinPeople
	}
	return 0
}

func (m *GameConfig) GetMaxPeople() uint32 {
	if m != nil {
		return m.MaxPeople
	}
	return 0
}

// GameConfigLevel 游戏场次信息
type GameLevelConfig struct {
	GameId     uint32 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	LevelId    uint32 `protobuf:"varint,2,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
	LevelName  string `protobuf:"bytes,3,opt,name=level_name,json=levelName" json:"level_name,omitempty"`
	BaseScores uint32 `protobuf:"varint,4,opt,name=base_scores,json=baseScores" json:"base_scores,omitempty"`
	LowScores  uint32 `protobuf:"varint,5,opt,name=low_scores,json=lowScores" json:"low_scores,omitempty"`
	HighScores uint32 `protobuf:"varint,6,opt,name=high_scores,json=highScores" json:"high_scores,omitempty"`
}

func (m *GameLevelConfig) Reset()                    { *m = GameLevelConfig{} }
func (m *GameLevelConfig) String() string            { return proto.CompactTextString(m) }
func (*GameLevelConfig) ProtoMessage()               {}
func (*GameLevelConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *GameLevelConfig) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GameLevelConfig) GetLevelId() uint32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *GameLevelConfig) GetLevelName() string {
	if m != nil {
		return m.LevelName
	}
	return ""
}

func (m *GameLevelConfig) GetBaseScores() uint32 {
	if m != nil {
		return m.BaseScores
	}
	return 0
}

func (m *GameLevelConfig) GetLowScores() uint32 {
	if m != nil {
		return m.LowScores
	}
	return 0
}

func (m *GameLevelConfig) GetHighScores() uint32 {
	if m != nil {
		return m.HighScores
	}
	return 0
}

// GetPlayerByAccountReq 根据账号获取玩家请求
type GetPlayerByAccountReq struct {
	AccountId uint64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *GetPlayerByAccountReq) Reset()                    { *m = GetPlayerByAccountReq{} }
func (m *GetPlayerByAccountReq) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerByAccountReq) ProtoMessage()               {}
func (*GetPlayerByAccountReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetPlayerByAccountReq) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

// GetPlayerByAccountRsp 根据账号获取玩家应答
type GetPlayerByAccountRsp struct {
	ErrCode  int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	PlayerId uint64 `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *GetPlayerByAccountRsp) Reset()                    { *m = GetPlayerByAccountRsp{} }
func (m *GetPlayerByAccountRsp) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerByAccountRsp) ProtoMessage()               {}
func (*GetPlayerByAccountRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetPlayerByAccountRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetPlayerByAccountRsp) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// GetPlayerInfoReq 获取玩家信息
type GetPlayerInfoReq struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *GetPlayerInfoReq) Reset()                    { *m = GetPlayerInfoReq{} }
func (m *GetPlayerInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerInfoReq) ProtoMessage()               {}
func (*GetPlayerInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *GetPlayerInfoReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// GetPlayerInfoRsp 获取玩家信息应答
type GetPlayerInfoRsp struct {
	ErrCode    int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	PlayerId   uint64 `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	NickName   string `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Avatar     string `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
	Gender     uint32 `protobuf:"varint,5,opt,name=gender" json:"gender,omitempty"`
	ChannelId  uint32 `protobuf:"varint,6,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	ProvinceId uint32 `protobuf:"varint,7,opt,name=province_id,json=provinceId" json:"province_id,omitempty"`
	CityId     uint32 `protobuf:"varint,8,opt,name=city_id,json=cityId" json:"city_id,omitempty"`
}

func (m *GetPlayerInfoRsp) Reset()                    { *m = GetPlayerInfoRsp{} }
func (m *GetPlayerInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerInfoRsp) ProtoMessage()               {}
func (*GetPlayerInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *GetPlayerInfoRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *GetPlayerInfoRsp) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *GetPlayerInfoRsp) GetGender() uint32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetProvinceId() uint32 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *GetPlayerInfoRsp) GetCityId() uint32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

// UpdatePlayerInfoReq 修改玩家信息
type UpdatePlayerInfoReq struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	Gender   uint32 `protobuf:"varint,4,opt,name=gender" json:"gender,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Phone    string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
}

func (m *UpdatePlayerInfoReq) Reset()                    { *m = UpdatePlayerInfoReq{} }
func (m *UpdatePlayerInfoReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerInfoReq) ProtoMessage()               {}
func (*UpdatePlayerInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *UpdatePlayerInfoReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *UpdatePlayerInfoReq) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UpdatePlayerInfoReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UpdatePlayerInfoReq) GetGender() uint32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *UpdatePlayerInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePlayerInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// UpdatePlayerInfoRsp 修改玩家信息应答
type UpdatePlayerInfoRsp struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	Result  bool  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *UpdatePlayerInfoRsp) Reset()                    { *m = UpdatePlayerInfoRsp{} }
func (m *UpdatePlayerInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerInfoRsp) ProtoMessage()               {}
func (*UpdatePlayerInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *UpdatePlayerInfoRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *UpdatePlayerInfoRsp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// GetPlayerStateReq 获取玩家状态
type GetPlayerStateReq struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *GetPlayerStateReq) Reset()                    { *m = GetPlayerStateReq{} }
func (m *GetPlayerStateReq) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerStateReq) ProtoMessage()               {}
func (*GetPlayerStateReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *GetPlayerStateReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// GetPlayerStateRsp 获取玩家状态应答
type GetPlayerStateRsp struct {
	ErrCode   int32       `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	State     PlayerState `protobuf:"varint,2,opt,name=state,enum=user.PlayerState" json:"state,omitempty"`
	GameId    uint32      `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	LevelId   uint32      `protobuf:"varint,4,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
	IpAddr    string      `protobuf:"bytes,5,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	MatchAddr string      `protobuf:"bytes,6,opt,name=match_addr,json=matchAddr" json:"match_addr,omitempty"`
	GateAddr  string      `protobuf:"bytes,7,opt,name=gate_addr,json=gateAddr" json:"gate_addr,omitempty"`
	RoomAddr  string      `protobuf:"bytes,8,opt,name=room_addr,json=roomAddr" json:"room_addr,omitempty"`
}

func (m *GetPlayerStateRsp) Reset()                    { *m = GetPlayerStateRsp{} }
func (m *GetPlayerStateRsp) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerStateRsp) ProtoMessage()               {}
func (*GetPlayerStateRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *GetPlayerStateRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetPlayerStateRsp) GetState() PlayerState {
	if m != nil {
		return m.State
	}
	return PlayerState_PS_IDIE
}

func (m *GetPlayerStateRsp) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GetPlayerStateRsp) GetLevelId() uint32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *GetPlayerStateRsp) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *GetPlayerStateRsp) GetMatchAddr() string {
	if m != nil {
		return m.MatchAddr
	}
	return ""
}

func (m *GetPlayerStateRsp) GetGateAddr() string {
	if m != nil {
		return m.GateAddr
	}
	return ""
}

func (m *GetPlayerStateRsp) GetRoomAddr() string {
	if m != nil {
		return m.RoomAddr
	}
	return ""
}

// GetPlayerGameInfoReq 获取玩家游戏信息
type GetPlayerGameInfoReq struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	GameId   uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (m *GetPlayerGameInfoReq) Reset()                    { *m = GetPlayerGameInfoReq{} }
func (m *GetPlayerGameInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerGameInfoReq) ProtoMessage()               {}
func (*GetPlayerGameInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *GetPlayerGameInfoReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GetPlayerGameInfoReq) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// GetPlayerGameInfoRsp 获取玩家游戏信息应答
type GetPlayerGameInfoRsp struct {
	ErrCode          int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	GameId           uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	WinningRate      uint32 `protobuf:"varint,3,opt,name=winning_rate,json=winningRate" json:"winning_rate,omitempty"`
	WinningBurea     uint32 `protobuf:"varint,4,opt,name=Winning_burea,json=winningBurea" json:"Winning_burea,omitempty"`
	TotalBurea       uint32 `protobuf:"varint,5,opt,name=total_burea,json=totalBurea" json:"total_burea,omitempty"`
	MaxWinningStream uint32 `protobuf:"varint,6,opt,name=max_winning_stream,json=maxWinningStream" json:"max_winning_stream,omitempty"`
	MaxMultiple      uint32 `protobuf:"varint,7,opt,name=max_multiple,json=maxMultiple" json:"max_multiple,omitempty"`
}

func (m *GetPlayerGameInfoRsp) Reset()                    { *m = GetPlayerGameInfoRsp{} }
func (m *GetPlayerGameInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerGameInfoRsp) ProtoMessage()               {}
func (*GetPlayerGameInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *GetPlayerGameInfoRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetPlayerGameInfoRsp) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GetPlayerGameInfoRsp) GetWinningRate() uint32 {
	if m != nil {
		return m.WinningRate
	}
	return 0
}

func (m *GetPlayerGameInfoRsp) GetWinningBurea() uint32 {
	if m != nil {
		return m.WinningBurea
	}
	return 0
}

func (m *GetPlayerGameInfoRsp) GetTotalBurea() uint32 {
	if m != nil {
		return m.TotalBurea
	}
	return 0
}

func (m *GetPlayerGameInfoRsp) GetMaxWinningStream() uint32 {
	if m != nil {
		return m.MaxWinningStream
	}
	return 0
}

func (m *GetPlayerGameInfoRsp) GetMaxMultiple() uint32 {
	if m != nil {
		return m.MaxMultiple
	}
	return 0
}

// UpdatePlayerGateInfoReq 更新玩家网关信息
type UpdatePlayerGateInfoReq struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	IpAddr   string `protobuf:"bytes,2,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	GateAddr string `protobuf:"bytes,3,opt,name=gate_addr,json=gateAddr" json:"gate_addr,omitempty"`
}

func (m *UpdatePlayerGateInfoReq) Reset()                    { *m = UpdatePlayerGateInfoReq{} }
func (m *UpdatePlayerGateInfoReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerGateInfoReq) ProtoMessage()               {}
func (*UpdatePlayerGateInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *UpdatePlayerGateInfoReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *UpdatePlayerGateInfoReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *UpdatePlayerGateInfoReq) GetGateAddr() string {
	if m != nil {
		return m.GateAddr
	}
	return ""
}

// UpdatePlayerStateReq 更新玩家游戏状态
type UpdatePlayerStateReq struct {
	PlayerId uint64      `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	OldState PlayerState `protobuf:"varint,2,opt,name=old_state,json=oldState,enum=user.PlayerState" json:"old_state,omitempty"`
	NewState PlayerState `protobuf:"varint,3,opt,name=new_state,json=newState,enum=user.PlayerState" json:"new_state,omitempty"`
	GameId   uint32      `protobuf:"varint,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	LevelId  uint32      `protobuf:"varint,5,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
}

func (m *UpdatePlayerStateReq) Reset()                    { *m = UpdatePlayerStateReq{} }
func (m *UpdatePlayerStateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerStateReq) ProtoMessage()               {}
func (*UpdatePlayerStateReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *UpdatePlayerStateReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *UpdatePlayerStateReq) GetOldState() PlayerState {
	if m != nil {
		return m.OldState
	}
	return PlayerState_PS_IDIE
}

func (m *UpdatePlayerStateReq) GetNewState() PlayerState {
	if m != nil {
		return m.NewState
	}
	return PlayerState_PS_IDIE
}

func (m *UpdatePlayerStateReq) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *UpdatePlayerStateReq) GetLevelId() uint32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

// UpdatePlayerServerAddrReq 更新玩家服务端地址
type UpdatePlayerServerAddrReq struct {
	PlayerId   uint64     `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	ServerType ServerType `protobuf:"varint,5,opt,name=server_type,json=serverType,enum=user.ServerType" json:"server_type,omitempty"`
	ServerAddr string     `protobuf:"bytes,6,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
}

func (m *UpdatePlayerServerAddrReq) Reset()                    { *m = UpdatePlayerServerAddrReq{} }
func (m *UpdatePlayerServerAddrReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerServerAddrReq) ProtoMessage()               {}
func (*UpdatePlayerServerAddrReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *UpdatePlayerServerAddrReq) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *UpdatePlayerServerAddrReq) GetServerType() ServerType {
	if m != nil {
		return m.ServerType
	}
	return ServerType_ST_GATE
}

func (m *UpdatePlayerServerAddrReq) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

// UpdatePlayerRsp  更新玩家应答
type UpdatePlayerRsp struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	Result  bool  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *UpdatePlayerRsp) Reset()                    { *m = UpdatePlayerRsp{} }
func (m *UpdatePlayerRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlayerRsp) ProtoMessage()               {}
func (*UpdatePlayerRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *UpdatePlayerRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *UpdatePlayerRsp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// GetGameListInfoReq 获取游戏列表信息
type GetGameListInfoReq struct {
}

func (m *GetGameListInfoReq) Reset()                    { *m = GetGameListInfoReq{} }
func (m *GetGameListInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetGameListInfoReq) ProtoMessage()               {}
func (*GetGameListInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

// GetGameListInfoRsp 获取游戏列表信息应答
type GetGameListInfoRsp struct {
	ErrCode         int32              `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	GameConfig      []*GameConfig      `protobuf:"bytes,2,rep,name=game_config,json=gameConfig" json:"game_config,omitempty"`
	GameLevelConfig []*GameLevelConfig `protobuf:"bytes,3,rep,name=game_level_config,json=gameLevelConfig" json:"game_level_config,omitempty"`
}

func (m *GetGameListInfoRsp) Reset()                    { *m = GetGameListInfoRsp{} }
func (m *GetGameListInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*GetGameListInfoRsp) ProtoMessage()               {}
func (*GetGameListInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *GetGameListInfoRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetGameListInfoRsp) GetGameConfig() []*GameConfig {
	if m != nil {
		return m.GameConfig
	}
	return nil
}

func (m *GetGameListInfoRsp) GetGameLevelConfig() []*GameLevelConfig {
	if m != nil {
		return m.GameLevelConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*GameConfig)(nil), "user.GameConfig")
	proto.RegisterType((*GameLevelConfig)(nil), "user.GameLevelConfig")
	proto.RegisterType((*GetPlayerByAccountReq)(nil), "user.GetPlayerByAccountReq")
	proto.RegisterType((*GetPlayerByAccountRsp)(nil), "user.GetPlayerByAccountRsp")
	proto.RegisterType((*GetPlayerInfoReq)(nil), "user.GetPlayerInfoReq")
	proto.RegisterType((*GetPlayerInfoRsp)(nil), "user.GetPlayerInfoRsp")
	proto.RegisterType((*UpdatePlayerInfoReq)(nil), "user.UpdatePlayerInfoReq")
	proto.RegisterType((*UpdatePlayerInfoRsp)(nil), "user.UpdatePlayerInfoRsp")
	proto.RegisterType((*GetPlayerStateReq)(nil), "user.GetPlayerStateReq")
	proto.RegisterType((*GetPlayerStateRsp)(nil), "user.GetPlayerStateRsp")
	proto.RegisterType((*GetPlayerGameInfoReq)(nil), "user.GetPlayerGameInfoReq")
	proto.RegisterType((*GetPlayerGameInfoRsp)(nil), "user.GetPlayerGameInfoRsp")
	proto.RegisterType((*UpdatePlayerGateInfoReq)(nil), "user.UpdatePlayerGateInfoReq")
	proto.RegisterType((*UpdatePlayerStateReq)(nil), "user.UpdatePlayerStateReq")
	proto.RegisterType((*UpdatePlayerServerAddrReq)(nil), "user.UpdatePlayerServerAddrReq")
	proto.RegisterType((*UpdatePlayerRsp)(nil), "user.UpdatePlayerRsp")
	proto.RegisterType((*GetGameListInfoReq)(nil), "user.GetGameListInfoReq")
	proto.RegisterType((*GetGameListInfoRsp)(nil), "user.GetGameListInfoRsp")
	proto.RegisterEnum("user.PlayerState", PlayerState_name, PlayerState_value)
	proto.RegisterEnum("user.ServerType", ServerType_name, ServerType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PlayerData service

type PlayerDataClient interface {
	// GetPlayerByAccount 根据账号获取玩家
	GetPlayerByAccount(ctx context.Context, in *GetPlayerByAccountReq, opts ...grpc.CallOption) (*GetPlayerByAccountRsp, error)
	// GetPlayerInfo 获取玩家信息
	GetPlayerInfo(ctx context.Context, in *GetPlayerInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoRsp, error)
	// UpdatePlayerInfo 更新玩家信息
	UpdatePlayerInfo(ctx context.Context, in *UpdatePlayerInfoReq, opts ...grpc.CallOption) (*UpdatePlayerInfoRsp, error)
	// GetPlayerState 获取玩家状态
	GetPlayerState(ctx context.Context, in *GetPlayerStateReq, opts ...grpc.CallOption) (*GetPlayerStateRsp, error)
	//  GetPlayerGameInfo 获取玩家游戏信息
	GetPlayerGameInfo(ctx context.Context, in *GetPlayerGameInfoReq, opts ...grpc.CallOption) (*GetPlayerGameInfoRsp, error)
	// UpdatePlayerState 更新玩家状态
	UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateReq, opts ...grpc.CallOption) (*UpdatePlayerRsp, error)
	// UpdatePlayerGateInfo 更新玩家网关信息
	UpdatePlayerGateInfo(ctx context.Context, in *UpdatePlayerGateInfoReq, opts ...grpc.CallOption) (*UpdatePlayerRsp, error)
	// UpdatePlayerServerAddr 更新玩家服务端信息
	UpdatePlayerServerAddr(ctx context.Context, in *UpdatePlayerServerAddrReq, opts ...grpc.CallOption) (*UpdatePlayerRsp, error)
	// GetGameListInfo 获取游戏列表
	GetGameListInfo(ctx context.Context, in *GetGameListInfoReq, opts ...grpc.CallOption) (*GetGameListInfoRsp, error)
}

type playerDataClient struct {
	cc *grpc.ClientConn
}

func NewPlayerDataClient(cc *grpc.ClientConn) PlayerDataClient {
	return &playerDataClient{cc}
}

func (c *playerDataClient) GetPlayerByAccount(ctx context.Context, in *GetPlayerByAccountReq, opts ...grpc.CallOption) (*GetPlayerByAccountRsp, error) {
	out := new(GetPlayerByAccountRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetPlayerByAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) GetPlayerInfo(ctx context.Context, in *GetPlayerInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoRsp, error) {
	out := new(GetPlayerInfoRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetPlayerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) UpdatePlayerInfo(ctx context.Context, in *UpdatePlayerInfoReq, opts ...grpc.CallOption) (*UpdatePlayerInfoRsp, error) {
	out := new(UpdatePlayerInfoRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/UpdatePlayerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) GetPlayerState(ctx context.Context, in *GetPlayerStateReq, opts ...grpc.CallOption) (*GetPlayerStateRsp, error) {
	out := new(GetPlayerStateRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetPlayerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) GetPlayerGameInfo(ctx context.Context, in *GetPlayerGameInfoReq, opts ...grpc.CallOption) (*GetPlayerGameInfoRsp, error) {
	out := new(GetPlayerGameInfoRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetPlayerGameInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateReq, opts ...grpc.CallOption) (*UpdatePlayerRsp, error) {
	out := new(UpdatePlayerRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/UpdatePlayerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) UpdatePlayerGateInfo(ctx context.Context, in *UpdatePlayerGateInfoReq, opts ...grpc.CallOption) (*UpdatePlayerRsp, error) {
	out := new(UpdatePlayerRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/UpdatePlayerGateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) UpdatePlayerServerAddr(ctx context.Context, in *UpdatePlayerServerAddrReq, opts ...grpc.CallOption) (*UpdatePlayerRsp, error) {
	out := new(UpdatePlayerRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/UpdatePlayerServerAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerDataClient) GetGameListInfo(ctx context.Context, in *GetGameListInfoReq, opts ...grpc.CallOption) (*GetGameListInfoRsp, error) {
	out := new(GetGameListInfoRsp)
	err := grpc.Invoke(ctx, "/user.PlayerData/GetGameListInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlayerData service

type PlayerDataServer interface {
	// GetPlayerByAccount 根据账号获取玩家
	GetPlayerByAccount(context.Context, *GetPlayerByAccountReq) (*GetPlayerByAccountRsp, error)
	// GetPlayerInfo 获取玩家信息
	GetPlayerInfo(context.Context, *GetPlayerInfoReq) (*GetPlayerInfoRsp, error)
	// UpdatePlayerInfo 更新玩家信息
	UpdatePlayerInfo(context.Context, *UpdatePlayerInfoReq) (*UpdatePlayerInfoRsp, error)
	// GetPlayerState 获取玩家状态
	GetPlayerState(context.Context, *GetPlayerStateReq) (*GetPlayerStateRsp, error)
	//  GetPlayerGameInfo 获取玩家游戏信息
	GetPlayerGameInfo(context.Context, *GetPlayerGameInfoReq) (*GetPlayerGameInfoRsp, error)
	// UpdatePlayerState 更新玩家状态
	UpdatePlayerState(context.Context, *UpdatePlayerStateReq) (*UpdatePlayerRsp, error)
	// UpdatePlayerGateInfo 更新玩家网关信息
	UpdatePlayerGateInfo(context.Context, *UpdatePlayerGateInfoReq) (*UpdatePlayerRsp, error)
	// UpdatePlayerServerAddr 更新玩家服务端信息
	UpdatePlayerServerAddr(context.Context, *UpdatePlayerServerAddrReq) (*UpdatePlayerRsp, error)
	// GetGameListInfo 获取游戏列表
	GetGameListInfo(context.Context, *GetGameListInfoReq) (*GetGameListInfoRsp, error)
}

func RegisterPlayerDataServer(s *grpc.Server, srv PlayerDataServer) {
	s.RegisterService(&_PlayerData_serviceDesc, srv)
}

func _PlayerData_GetPlayerByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetPlayerByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetPlayerByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetPlayerByAccount(ctx, req.(*GetPlayerByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_GetPlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetPlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetPlayerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetPlayerInfo(ctx, req.(*GetPlayerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_UpdatePlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).UpdatePlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/UpdatePlayerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).UpdatePlayerInfo(ctx, req.(*UpdatePlayerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_GetPlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetPlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetPlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetPlayerState(ctx, req.(*GetPlayerStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_GetPlayerGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerGameInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetPlayerGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetPlayerGameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetPlayerGameInfo(ctx, req.(*GetPlayerGameInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_UpdatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).UpdatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/UpdatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).UpdatePlayerState(ctx, req.(*UpdatePlayerStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_UpdatePlayerGateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerGateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).UpdatePlayerGateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/UpdatePlayerGateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).UpdatePlayerGateInfo(ctx, req.(*UpdatePlayerGateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_UpdatePlayerServerAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerServerAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).UpdatePlayerServerAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/UpdatePlayerServerAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).UpdatePlayerServerAddr(ctx, req.(*UpdatePlayerServerAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerData_GetGameListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerDataServer).GetGameListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PlayerData/GetGameListInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerDataServer).GetGameListInfo(ctx, req.(*GetGameListInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlayerData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.PlayerData",
	HandlerType: (*PlayerDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerByAccount",
			Handler:    _PlayerData_GetPlayerByAccount_Handler,
		},
		{
			MethodName: "GetPlayerInfo",
			Handler:    _PlayerData_GetPlayerInfo_Handler,
		},
		{
			MethodName: "UpdatePlayerInfo",
			Handler:    _PlayerData_UpdatePlayerInfo_Handler,
		},
		{
			MethodName: "GetPlayerState",
			Handler:    _PlayerData_GetPlayerState_Handler,
		},
		{
			MethodName: "GetPlayerGameInfo",
			Handler:    _PlayerData_GetPlayerGameInfo_Handler,
		},
		{
			MethodName: "UpdatePlayerState",
			Handler:    _PlayerData_UpdatePlayerState_Handler,
		},
		{
			MethodName: "UpdatePlayerGateInfo",
			Handler:    _PlayerData_UpdatePlayerGateInfo_Handler,
		},
		{
			MethodName: "UpdatePlayerServerAddr",
			Handler:    _PlayerData_UpdatePlayerServerAddr_Handler,
		},
		{
			MethodName: "GetGameListInfo",
			Handler:    _PlayerData_GetGameListInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x5b, 0x6f, 0xe3, 0x44,
	0x14, 0xc6, 0xb9, 0xe7, 0x64, 0xbb, 0x4d, 0x87, 0x5e, 0xd2, 0xac, 0x56, 0x2d, 0xe6, 0x81, 0x6a,
	0x85, 0x0a, 0xbb, 0x20, 0x5e, 0x78, 0x40, 0xe9, 0x85, 0xd4, 0xa2, 0x97, 0xc8, 0x29, 0xe2, 0xd1,
	0x9a, 0xda, 0xb3, 0xa9, 0x85, 0x6f, 0x8c, 0xa7, 0xb7, 0x77, 0x1e, 0xf9, 0x0b, 0x3c, 0x22, 0xc4,
	0x0f, 0x41, 0xfc, 0x1d, 0xfe, 0x00, 0x12, 0x9a, 0x33, 0xe3, 0xd4, 0x4e, 0xed, 0xb6, 0xda, 0xb7,
	0xcc, 0xf7, 0x9d, 0x73, 0xe6, 0xdc, 0x3d, 0x81, 0xa5, 0x94, 0xf1, 0x6b, 0xdf, 0x65, 0xbb, 0x09,
	0x8f, 0x45, 0x4c, 0x1a, 0x57, 0x29, 0xe3, 0xe6, 0xef, 0x06, 0xc0, 0x98, 0x86, 0x6c, 0x3f, 0x8e,
	0xde, 0xfb, 0x33, 0xb2, 0x01, 0xed, 0x19, 0x0d, 0x99, 0xe3, 0x7b, 0x03, 0x63, 0xdb, 0xd8, 0x59,
	0xb2, 0x5b, 0xf2, 0x68, 0x79, 0xe4, 0x15, 0x74, 0x91, 0x88, 0x68, 0xc8, 0x06, 0xb5, 0x6d, 0x63,
	0xa7, 0x6b, 0x77, 0x24, 0x70, 0x4a, 0x43, 0x36, 0x27, 0xc5, 0x5d, 0xc2, 0x06, 0x75, 0xd4, 0x43,
	0xf2, 0xfc, 0x2e, 0x61, 0xe4, 0x35, 0x40, 0xe8, 0x47, 0x4e, 0xc2, 0xe2, 0x24, 0x60, 0x83, 0x06,
	0xb2, 0xdd, 0xd0, 0x8f, 0x26, 0x08, 0x20, 0x4d, 0x6f, 0x33, 0xba, 0xa9, 0x69, 0x7a, 0xab, 0x68,
	0xf3, 0x6f, 0x03, 0x96, 0xa5, 0x7f, 0xc7, 0xec, 0x9a, 0x05, 0x4f, 0x39, 0xb9, 0x09, 0x9d, 0x40,
	0xca, 0x49, 0xa6, 0x86, 0x4c, 0x1b, 0xcf, 0x96, 0x27, 0xaf, 0x51, 0x14, 0x06, 0x50, 0xc7, 0x00,
	0xba, 0x88, 0x60, 0x04, 0x5b, 0xd0, 0xbb, 0xa0, 0x29, 0x73, 0x52, 0x37, 0xe6, 0x2c, 0xd5, 0x5e,
	0x82, 0x84, 0xa6, 0x88, 0xa0, 0x7e, 0x7c, 0x93, 0xf1, 0xda, 0xcd, 0x20, 0xbe, 0xd1, 0xf4, 0x16,
	0xf4, 0x2e, 0xfd, 0xd9, 0x65, 0xc6, 0xb7, 0x94, 0xbe, 0x84, 0x94, 0x80, 0xf9, 0x0d, 0xac, 0x8d,
	0x99, 0x98, 0x04, 0xf4, 0x8e, 0xf1, 0xbd, 0xbb, 0x91, 0xeb, 0xc6, 0x57, 0x91, 0xb0, 0xd9, 0x2f,
	0xd2, 0x30, 0x55, 0xa7, 0x2c, 0x9e, 0x86, 0xdd, 0xd5, 0x88, 0xe5, 0x99, 0x67, 0xa5, 0x7a, 0x69,
	0x22, 0x63, 0x65, 0x9c, 0x3b, 0x6e, 0xec, 0x31, 0xd4, 0x6a, 0xda, 0x6d, 0xc6, 0xf9, 0x7e, 0xec,
	0x61, 0x39, 0x12, 0x54, 0xc8, 0xf2, 0xd0, 0xb0, 0x3b, 0x0a, 0xb0, 0x3c, 0xf3, 0x0b, 0xe8, 0xcf,
	0x0d, 0x5a, 0xd1, 0xfb, 0x58, 0xfa, 0x50, 0x50, 0x30, 0x16, 0x14, 0xfe, 0x35, 0x16, 0x35, 0x3e,
	0xfc, 0x76, 0x49, 0x46, 0xbe, 0xfb, 0x73, 0xbe, 0x0a, 0x1d, 0x09, 0x60, 0x11, 0xd6, 0xa1, 0x45,
	0xaf, 0xa9, 0xa0, 0x1c, 0xf3, 0xdf, 0xb5, 0xf5, 0x49, 0xe2, 0x33, 0x16, 0x79, 0x8c, 0xeb, 0xbc,
	0xeb, 0x93, 0x4c, 0x9d, 0x7b, 0x49, 0xa3, 0x48, 0x15, 0x5c, 0xe5, 0xbc, 0xab, 0x11, 0xcb, 0x93,
	0x35, 0x49, 0x78, 0x7c, 0xed, 0x47, 0x2e, 0xb6, 0x4a, 0x5b, 0xd5, 0x24, 0x83, 0x2c, 0x4f, 0xf6,
	0x91, 0xeb, 0x8b, 0x3b, 0x49, 0x76, 0x94, 0x61, 0x79, 0xb4, 0x3c, 0xf3, 0x2f, 0x03, 0x3e, 0xfe,
	0x31, 0xf1, 0xa8, 0x60, 0xcf, 0xcf, 0x53, 0x31, 0xb4, 0x5a, 0x65, 0x68, 0xf5, 0x8a, 0xd0, 0x1a,
	0x85, 0xd0, 0x08, 0x34, 0xd0, 0x4e, 0x13, 0xa5, 0xf1, 0x37, 0x59, 0x85, 0x66, 0x72, 0x19, 0x47,
	0x0c, 0x23, 0xed, 0xda, 0xea, 0x60, 0x1e, 0x95, 0xb8, 0xfa, 0x78, 0x81, 0xd6, 0xa1, 0xc5, 0x59,
	0x7a, 0x15, 0x08, 0xf4, 0xb2, 0x63, 0xeb, 0x93, 0xf9, 0x25, 0xac, 0xcc, 0xeb, 0x3c, 0x15, 0x54,
	0xb0, 0x27, 0x5b, 0xe3, 0x3f, 0xe3, 0x81, 0xca, 0xe3, 0x57, 0x7f, 0x06, 0xcd, 0x54, 0x8a, 0xe1,
	0xcd, 0x2f, 0xdf, 0xad, 0xec, 0xca, 0x1d, 0xb4, 0x9b, 0xd7, 0x57, 0x7c, 0x7e, 0xc4, 0xeb, 0x95,
	0x23, 0xde, 0x28, 0x8e, 0xf8, 0x06, 0xb4, 0xfd, 0xc4, 0xa1, 0x9e, 0xc7, 0x75, 0xda, 0x5a, 0x7e,
	0x32, 0xf2, 0x3c, 0xae, 0x56, 0x8c, 0x70, 0x2f, 0x15, 0xa7, 0xb2, 0xd7, 0x45, 0x04, 0x69, 0xdc,
	0x5e, 0x82, 0x29, 0xb6, 0x9d, 0xad, 0x36, 0xc1, 0x32, 0x92, 0xc7, 0x71, 0xa8, 0xc8, 0x8e, 0x22,
	0x25, 0x20, 0x49, 0xf3, 0x18, 0x56, 0xe7, 0xe1, 0xcb, 0x25, 0xf5, 0xac, 0x3e, 0xc9, 0x85, 0x56,
	0xcb, 0x87, 0x66, 0xfe, 0x5a, 0x2b, 0x33, 0xf7, 0x78, 0x42, 0xab, 0x8c, 0x91, 0x4f, 0xe0, 0xc5,
	0x8d, 0x1f, 0x45, 0x7e, 0x34, 0x73, 0xb8, 0x4c, 0xb8, 0xca, 0x62, 0x4f, 0x63, 0xb6, 0xcc, 0xf1,
	0xa7, 0xb0, 0xf4, 0x93, 0x16, 0xb9, 0xb8, 0xe2, 0x8c, 0xea, 0x7c, 0x66, 0x7a, 0x7b, 0x12, 0x93,
	0x43, 0x24, 0x62, 0x41, 0x03, 0x2d, 0xa2, 0x06, 0x10, 0x10, 0x52, 0x02, 0x9f, 0x03, 0x91, 0xfb,
	0x3b, 0xbb, 0x2c, 0x15, 0x9c, 0xd1, 0x50, 0x0f, 0x63, 0x3f, 0xa4, 0xb7, 0xfa, 0x8a, 0x29, 0xe2,
	0xd2, 0x2d, 0x29, 0x1d, 0x5e, 0x05, 0xc2, 0x97, 0xfb, 0x5e, 0x0d, 0x65, 0x2f, 0xa4, 0xb7, 0x27,
	0x1a, 0x32, 0x03, 0xd8, 0xc8, 0x37, 0xf4, 0x98, 0x8a, 0x67, 0xe7, 0x35, 0x2b, 0x7f, 0xad, 0x50,
	0xfe, 0x42, 0x7d, 0xeb, 0xc5, 0xfa, 0x9a, 0xff, 0x18, 0xb0, 0x9a, 0xbf, 0xee, 0x59, 0x8d, 0x4f,
	0x76, 0xa1, 0x1b, 0x07, 0x9e, 0xf3, 0x44, 0x2f, 0x77, 0xe2, 0xc0, 0xc3, 0x5f, 0x52, 0x3e, 0x62,
	0x37, 0x5a, 0xbe, 0x5e, 0x29, 0x1f, 0xb1, 0x9b, 0xe9, 0x62, 0xfb, 0x37, 0x2a, 0xdb, 0xbf, 0x59,
	0x68, 0x7f, 0xf3, 0x37, 0x03, 0x36, 0x0b, 0x91, 0x30, 0x7e, 0xcd, 0xb8, 0x0c, 0xf2, 0xc9, 0x70,
	0xde, 0x42, 0x2f, 0x45, 0x69, 0xf5, 0x05, 0x6f, 0xa2, 0x83, 0x7d, 0xe5, 0xa0, 0x32, 0x23, 0xbf,
	0xe4, 0x36, 0xa4, 0xf3, 0xdf, 0xb2, 0x2f, 0xb4, 0x4a, 0x6e, 0xa8, 0xb4, 0x00, 0x26, 0xf6, 0x00,
	0x96, 0xf3, 0xde, 0x7c, 0xe0, 0x4e, 0x5a, 0x05, 0x32, 0x66, 0x02, 0x1f, 0x00, 0x7e, 0x2a, 0x74,
	0x1f, 0x98, 0x7f, 0x18, 0x0f, 0xe1, 0xc7, 0xed, 0xbf, 0x85, 0x1e, 0x26, 0xd4, 0xc5, 0x17, 0xc4,
	0xa0, 0xb6, 0x5d, 0xdf, 0xe9, 0x65, 0x11, 0xde, 0x3f, 0x7f, 0x6c, 0x98, 0xdd, 0x3f, 0x85, 0x46,
	0xb0, 0x82, 0x2a, 0x2a, 0xdf, 0x5a, 0xb1, 0x8e, 0x8a, 0x6b, 0xf7, 0x8a, 0xb9, 0x77, 0x89, 0xbd,
	0x3c, 0x2b, 0x02, 0x6f, 0xbe, 0x85, 0x5e, 0xae, 0xbe, 0xa4, 0x07, 0xed, 0xc9, 0xd4, 0xb1, 0x0e,
	0xac, 0xc3, 0xfe, 0x47, 0xe4, 0x25, 0xc0, 0x64, 0xea, 0x8c, 0x47, 0x27, 0x87, 0xd6, 0xe9, 0xb8,
	0x6f, 0x90, 0x65, 0xe8, 0x4d, 0xa6, 0xce, 0xc9, 0xe8, 0x7c, 0xff, 0x48, 0x02, 0xb5, 0x37, 0x5f,
	0x03, 0xdc, 0xe7, 0x5e, 0xea, 0x4e, 0xcf, 0x9d, 0xf1, 0xe8, 0x5c, 0xea, 0xbe, 0x80, 0xce, 0xf4,
	0x5c, 0xc9, 0xf6, 0x0d, 0x4d, 0xd9, 0x67, 0x67, 0x27, 0xfd, 0xda, 0xbb, 0x3f, 0x9b, 0x00, 0xea,
	0xce, 0x03, 0x2a, 0x28, 0x39, 0xc5, 0x44, 0x2d, 0x3c, 0x1f, 0xc8, 0x2b, 0xed, 0x7f, 0xd9, 0x83,
	0x64, 0x58, 0x4d, 0xa6, 0x09, 0xf9, 0x0e, 0x96, 0x0a, 0x6f, 0x01, 0xb2, 0xbe, 0x20, 0xad, 0x4b,
	0x34, 0x2c, 0xc5, 0xd3, 0x84, 0x1c, 0x41, 0x7f, 0xf1, 0x73, 0x45, 0x36, 0x95, 0x6c, 0xc9, 0x17,
	0x77, 0x58, 0x45, 0xa5, 0x09, 0xd9, 0x83, 0x97, 0xc5, 0x6f, 0x0f, 0xd9, 0x58, 0xb8, 0x33, 0x9b,
	0xe5, 0x61, 0x39, 0x91, 0x26, 0xe4, 0x87, 0xdc, 0xf7, 0x2b, 0xdb, 0xb8, 0x64, 0xb8, 0x20, 0x9d,
	0xdb, 0xec, 0xc3, 0x4a, 0x2e, 0x4d, 0xc8, 0xf7, 0xb0, 0xf2, 0x60, 0x93, 0x64, 0xc6, 0xca, 0x56,
	0xcc, 0x70, 0xed, 0x21, 0x27, 0xed, 0x1c, 0x17, 0x37, 0x52, 0xb6, 0x00, 0xc9, 0xeb, 0x87, 0xe2,
	0xb9, 0xe5, 0x58, 0x65, 0x6d, 0x02, 0xeb, 0xe5, 0x5b, 0x81, 0x6c, 0x95, 0xb8, 0x96, 0xdf, 0x19,
	0x55, 0x16, 0x0f, 0x61, 0x79, 0x61, 0xf8, 0xc8, 0x60, 0x9e, 0x96, 0x85, 0x51, 0x1d, 0x56, 0x30,
	0x69, 0x72, 0xd1, 0xc2, 0xbf, 0x21, 0x5f, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x2c, 0x0d,
	0x23, 0x97, 0x0c, 0x00, 0x00,
}
