syntax = "proto3";

package user;

// PlayerState 玩家状态
enum PlayerState{
    PS_IDIE = 0;     // 空闲中
    PS_MATCHING = 1; // 匹配中
    PS_GAMEING = 2;  // 游戏中
}

// ServerType 服务类型
enum ServerType{
    ST_GATE = 0;  // 网关服
    ST_MATCH = 1; // 匹配服
    ST_ROOM = 2;  // 房间服
}

// GetPlayerByAccountReq 根据账号获取玩家请求
message GetPlayerByAccountReq {
    uint64 account_id = 1; // 账号 ID 
}

// GetPlayerByAccountRsp 根据账号获取玩家应答
message GetPlayerByAccountRsp { 
    int32 err_code = 1; // 错误信息
    uint64 player_id = 2; // 玩家 ID
}

// GetPlayerInfoReq 获取玩家信息
message GetPlayerInfoReq {
    uint64 player_id = 1;         // 玩家id
   
}

// GetPlayerInfoRsp 获取玩家信息应答
message GetPlayerInfoRsp {
    int32 err_code = 1;           // 错误信息 
    uint64 player_id = 2;         // 玩家 id
    string nick_name = 3;         // 玩家昵称
    string avatar = 4;            // 玩家头像
    uint64 gender = 5;            // 玩家性别
    string name = 6 ;              // 玩家姓名
    string phone = 7;             // 联系方式
}

// UpdatePlayerInfoReq 修改玩家信息
message UpdatePlayerInfoReq {
    uint64 player_id = 1;         // 玩家id
    string nick_name = 2;         // 玩家昵称
    string avatar = 3;            // 玩家头像
    uint64 gender = 4;            // 玩家性别 
    string name = 5;              // 玩家名称
    string phone = 6;             // 联系方式
}

// UpdatePlayerInfoRsp 修改玩家信息应答
message UpdatePlayerInfoRsp {
    int32 err_code = 1;           // 错误信息
    bool result = 2; // 返回修改成功或失败
}

// GetPlayerStateReq 获取玩家状态
message GetPlayerStateReq{
    uint64 player_id = 1;
}

// GetPlayerStateRsp 获取玩家状态应答
message GetPlayerStateRsp{
    int32 err_code = 1;           // 错误信息
    PlayerState state = 2;
}

// UpdatePlayerStateReq 更新玩家状态
message UpdatePlayerStateReq{
    uint64 player_id = 1;          // 玩家id
    PlayerState old_state = 2;     // 旧状态    
    PlayerState new_state = 3;     // 新状态
    ServerType server_type = 4;    // 服务类型 
    string server_addr = 5;               // 服务地址
}

// UpdatePlayerStateRsp  更新玩家状态应答
message UpdatePlayerStateRsp{
    int32 err_code = 1;           // 错误信息
    bool result = 2; // 返回成功或失败
}

// GetGameListInfoReq 获取游戏列表信息
message GetGameListInfoReq{

}

// GameConfigInfo 游戏信息
message GameConfigInfo {
    uint64 game_id = 1;         // 游戏 id
    string game_name = 2;       // 游戏名称
    uint64 game_type = 3;       // 游戏类型
    uint64 level_id = 4;        // 游戏等级
    uint64 base_scores = 5;     // 游戏底分
    uint64 low_scores = 6;      // 允许进入最低分
    uint64 high_scores = 7;     // 允许进入最高分
    uint64 min_people = 8;      // 允许最低人数
    uint64 max_people = 9;      // 允许最高人数   
}

// GetGameListInfoRsp 获取游戏列表信息应答
message GetGameListInfoRsp{
    int32 err_code = 1;                      // 错误信息
    repeated GameConfigInfo game_info = 2;         // 游戏信息
}

// PlayerData 玩家数据服务
service PlayerData {
    // GetPlayerByAccount 根据账号获取玩家
    rpc GetPlayerByAccount(GetPlayerByAccountReq) returns(GetPlayerByAccountRsp);
    // GetPlayerInfo 获取玩家信息
    rpc GetPlayerInfo(GetPlayerInfoReq) returns (GetPlayerInfoRsp);
    // UpdatePlayerInfo 更新玩家信息
    rpc UpdatePlayerInfo(UpdatePlayerInfoReq) returns (UpdatePlayerInfoRsp);
    // GetPlayerState 获取玩家状态
    rpc GetPlayerState(GetPlayerStateReq) returns (GetPlayerStateRsp);
    // UpdatePlayerState 更新玩家状态
    rpc UpdatePlayerState(UpdatePlayerStateReq) returns (UpdatePlayerStateRsp) ;
    // GetGameListInfo 获取游戏列表
    rpc GetGameListInfo(GetGameListInfoReq) returns (GetGameListInfoRsp);
}