syntax = "proto3";

package user;

// PlayerState 玩家状态
enum PlayerState{
    PS_IDIE = 0;     // 空闲中
    PS_MATCHING = 1; // 匹配中
    PS_GAMEING = 2;  // 游戏中
}

// ServerType 服务类型
enum ServerType{
    ST_GATE = 0;  // 网关服
    ST_MATCH = 1; // 匹配服
    ST_ROOM = 2;  // 房间服
}

// GameConfig 游戏玩法信息
message GameConfig {
    uint32 game_id = 1;         // 游戏 id
    string game_name = 2;       // 游戏名称
    uint32 game_type = 3;       // 游戏类型
   
}

// GameConfigLevel 游戏场次信息
message GameLevelConfig {
    uint32 game_id = 1;         // 游戏 id
    uint32 level_id = 2;        // 游戏等级
    string level_name = 3;      // 游戏等级名称  
    uint32 base_scores = 4;     // 游戏底分
    uint32 low_scores = 5;      // 允许进入最低分
    uint32 high_scores = 6;     // 允许进入最高分
    uint32 min_people = 7;      // 允许最低人数 
    uint32 max_people = 8;      // 允许最高人数   
}

// GetPlayerByAccountReq 根据账号获取玩家请求
message GetPlayerByAccountReq {
    uint64 account_id = 1; // 账号 ID 
}

// GetPlayerByAccountRsp 根据账号获取玩家应答
message GetPlayerByAccountRsp { 
    int32 err_code = 1;   // 错误信息
    uint64 player_id = 2; // 玩家 ID
}

// GetPlayerInfoReq 获取玩家信息
message GetPlayerInfoReq {
    uint64 player_id = 1;         // 玩家id
   
}

// GetPlayerInfoRsp 获取玩家信息应答
message GetPlayerInfoRsp {
    int32 err_code = 1;           // 错误信息 
    uint64 player_id = 2;         // 玩家 id
    string nick_name = 3;         // 玩家昵称
    string avatar = 4;            // 玩家头像
    uint32 gender = 5;            // 玩家性别
    string name = 6 ;             // 玩家姓名
    string phone = 7;             // 联系方式
    string ip_addr = 8;           // 玩家ip地址   
}

// UpdatePlayerInfoReq 修改玩家信息
message UpdatePlayerInfoReq {
    uint64 player_id = 1;         // 玩家 id
    string nick_name = 2;         // 玩家昵称
    string avatar = 3;            // 玩家头像
    uint32 gender = 4;            // 玩家性别 
    string name = 5;              // 玩家名称
    string phone = 6;             // 联系方式
}

// UpdatePlayerInfoRsp 修改玩家信息应答
message UpdatePlayerInfoRsp {
    int32 err_code = 1;           // 错误信息
    bool result = 2;              // 更新结果
}

// GetPlayerStateReq 获取玩家状态
message GetPlayerStateReq{
    uint64 player_id = 1;
}

// GetPlayerStateRsp 获取玩家状态应答
message GetPlayerStateRsp{
    int32 err_code = 1;           // 错误信息
    PlayerState state = 2;
}


// GetPlayerGameInfoReq 获取玩家游戏信息
message GetPlayerGameInfoReq{
    uint64 player_id = 1;
    uint32 game_id = 2;
}

// GetPlayerGameInfoRsp 获取玩家游戏信息应答
message GetPlayerGameInfoRsp{
    int32 err_code = 1;            // 错误信息
    uint32 game_id = 2;            // 返回的游戏ID
    uint32 winning_rate =3;        // 指定游戏胜率
    uint32 total_burea = 4;        // 总局数
    uint32 max_winning_stream = 5; // 最高连胜
    uint32 max_multiple = 6;       // 最大获胜倍数 
}

// UpdatePlayerStateReq 更新玩家状态
message UpdatePlayerStateReq{
    uint64 player_id = 1;                    // 玩家ID  
    PlayerState old_state = 2;               // 旧状态       
    PlayerState new_state = 3;               // 新状态  
    ServerType server_type = 4;              // 服务类型
    string server_addr = 5;                  // 服务地址
}

// UpdatePlayerStateRsp  更新玩家状态应答
message UpdatePlayerStateRsp{
    int32 err_code = 1;           // 错误信息
    bool result = 2;              // 更新结果
}

// GetGameListInfoReq 获取游戏列表信息
message GetGameListInfoReq{

}

// GetGameListInfoRsp 获取游戏列表信息应答
message GetGameListInfoRsp{
    int32 err_code = 1;                                     // 错误信息
    repeated GameConfig game_config = 2;                    // 游戏玩法信息
    repeated GameLevelConfig game_level_config = 3;         // 游戏场次信息
}

// GetPlayerServerInfoReq 
message GetPlayerServerInfoReq{
    uint64 player_id = 1;                    // 玩家 id
}

// GetPlayerServerInfoRsp 获取玩家服务端信息
message GetPlayerServerInfoRsp{
    int32 err_code = 1;                      // 错误信息
    uint64 player_id = 2;                    // 玩家  id  
    string client_id = 3;                    // 客户端id
    string match_addr = 4;                   // 匹配服地址
    string gate_addr = 5;                    // 网关服地址
    string room_addr = 6;                    // 房间服地址
}

// PlayerData 玩家数据服务
service PlayerData {
    // GetPlayerByAccount 根据账号获取玩家
    rpc GetPlayerByAccount(GetPlayerByAccountReq) returns(GetPlayerByAccountRsp);
    // GetPlayerInfo 获取玩家信息
    rpc GetPlayerInfo(GetPlayerInfoReq) returns (GetPlayerInfoRsp);
    // UpdatePlayerInfo 更新玩家信息
    rpc UpdatePlayerInfo(UpdatePlayerInfoReq) returns (UpdatePlayerInfoRsp);
     // GetPlayerState 获取玩家状态
    rpc GetPlayerState(GetPlayerStateReq) returns (GetPlayerStateRsp);
    // GetPlayerGameInfo 获取玩家游戏信息
    rpc GetPlayerGameInfo(GetPlayerGameInfoReq) returns (GetPlayerGameInfoRsp);
    // UpdatePlayerState 更新玩家状态
    rpc UpdatePlayerState(UpdatePlayerStateReq) returns (UpdatePlayerStateRsp) ;
    // GetGameListInfo 获取游戏列表
    rpc GetGameListInfo(GetGameListInfoReq) returns (GetGameListInfoRsp);
   
}