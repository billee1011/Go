// Code generated by protoc-gen-go. DO NOT EDIT.
// source: majong.proto

package majong

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 杠的类型
type GangType int32

const (
	GangType_gang_angang   GangType = 0
	GangType_gang_minggang GangType = 1
	GangType_gang_bugang   GangType = 2
)

var GangType_name = map[int32]string{
	0: "gang_angang",
	1: "gang_minggang",
	2: "gang_bugang",
}
var GangType_value = map[string]int32{
	"gang_angang":   0,
	"gang_minggang": 1,
	"gang_bugang":   2,
}

func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// 胡类型
type HuType int32

const (
	HuType_hu_ganghoupao        HuType = 0
	HuType_hu_qiangganghu       HuType = 1
	HuType_hu_dianpao           HuType = 2
	HuType_hu_gangkai           HuType = 3
	HuType_hu_haidilao          HuType = 4
	HuType_hu_gangshanghaidilao HuType = 5
	HuType_hu_zimo              HuType = 6
	HuType_hu_tianhu            HuType = 7
	HuType_hu_dihu              HuType = 8
)

var HuType_name = map[int32]string{
	0: "hu_ganghoupao",
	1: "hu_qiangganghu",
	2: "hu_dianpao",
	3: "hu_gangkai",
	4: "hu_haidilao",
	5: "hu_gangshanghaidilao",
	6: "hu_zimo",
	7: "hu_tianhu",
	8: "hu_dihu",
}
var HuType_value = map[string]int32{
	"hu_ganghoupao":        0,
	"hu_qiangganghu":       1,
	"hu_dianpao":           2,
	"hu_gangkai":           3,
	"hu_haidilao":          4,
	"hu_gangshanghaidilao": 5,
	"hu_zimo":              6,
	"hu_tianhu":            7,
	"hu_dihu":              8,
}

func (x HuType) String() string {
	return proto.EnumName(HuType_name, int32(x))
}
func (HuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// 牌组类型
type CardType int32

const (
	CardType_PingHu          CardType = 0
	CardType_QingYiSe        CardType = 1
	CardType_QiDui           CardType = 2
	CardType_QingQiDui       CardType = 3
	CardType_LongQiDui       CardType = 4
	CardType_QingLongQiDui   CardType = 5
	CardType_PengPengHu      CardType = 6
	CardType_QingPeng        CardType = 7
	CardType_JingGouDiao     CardType = 8
	CardType_QingJingGouDiao CardType = 9
	CardType_ShiBaLuoHan     CardType = 10
	CardType_QingShiBaLuoHan CardType = 11
)

var CardType_name = map[int32]string{
	0:  "PingHu",
	1:  "QingYiSe",
	2:  "QiDui",
	3:  "QingQiDui",
	4:  "LongQiDui",
	5:  "QingLongQiDui",
	6:  "PengPengHu",
	7:  "QingPeng",
	8:  "JingGouDiao",
	9:  "QingJingGouDiao",
	10: "ShiBaLuoHan",
	11: "QingShiBaLuoHan",
}
var CardType_value = map[string]int32{
	"PingHu":          0,
	"QingYiSe":        1,
	"QiDui":           2,
	"QingQiDui":       3,
	"LongQiDui":       4,
	"QingLongQiDui":   5,
	"PengPengHu":      6,
	"QingPeng":        7,
	"JingGouDiao":     8,
	"QingJingGouDiao": 9,
	"ShiBaLuoHan":     10,
	"QingShiBaLuoHan": 11,
}

func (x CardType) String() string {
	return proto.EnumName(CardType_name, int32(x))
}
func (CardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

// 玩家行牌状态
type XingPaiState int32

const (
	XingPaiState_normal    XingPaiState = 0
	XingPaiState_hu        XingPaiState = 1
	XingPaiState_give_up   XingPaiState = 2
	XingPaiState_hu_giveup XingPaiState = 3
)

var XingPaiState_name = map[int32]string{
	0: "normal",
	1: "hu",
	2: "give_up",
	3: "hu_giveup",
}
var XingPaiState_value = map[string]int32{
	"normal":    0,
	"hu":        1,
	"give_up":   2,
	"hu_giveup": 3,
}

func (x XingPaiState) String() string {
	return proto.EnumName(XingPaiState_name, int32(x))
}
func (XingPaiState) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

// SettleType 结算类型
type SettleType int32

const (
	SettleType_settle_angang    SettleType = 0
	SettleType_settle_minggang  SettleType = 1
	SettleType_settle_bugang    SettleType = 2
	SettleType_settle_dianpao   SettleType = 3
	SettleType_settle_zimo      SettleType = 4
	SettleType_settle_flowerpig SettleType = 5
	SettleType_settle_yell      SettleType = 6
	SettleType_settle_taxrebeat SettleType = 7
	SettleType_settle_calldiver SettleType = 8
)

var SettleType_name = map[int32]string{
	0: "settle_angang",
	1: "settle_minggang",
	2: "settle_bugang",
	3: "settle_dianpao",
	4: "settle_zimo",
	5: "settle_flowerpig",
	6: "settle_yell",
	7: "settle_taxrebeat",
	8: "settle_calldiver",
}
var SettleType_value = map[string]int32{
	"settle_angang":    0,
	"settle_minggang":  1,
	"settle_bugang":    2,
	"settle_dianpao":   3,
	"settle_zimo":      4,
	"settle_flowerpig": 5,
	"settle_yell":      6,
	"settle_taxrebeat": 7,
	"settle_calldiver": 8,
}

func (x SettleType) String() string {
	return proto.EnumName(SettleType_name, int32(x))
}
func (SettleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

// 玩家操作
type Action int32

const (
	Action_action_peng Action = 0
	// action_zimo         = 1;  // 自摸
	// action_dianpao      = 2;  // 点炮
	Action_action_hu Action = 2
	// action_qiangganghu  = 3;  // 抢杠胡
	Action_action_gang Action = 3
	// action_bugang       = 4;  // 补杠
	// action_minggang     = 5;  // 明杠
	// action_angang       = 6;  // 暗杠
	Action_action_qi Action = 7
)

var Action_name = map[int32]string{
	0: "action_peng",
	2: "action_hu",
	3: "action_gang",
	7: "action_qi",
}
var Action_value = map[string]int32{
	"action_peng": 0,
	"action_hu":   2,
	"action_gang": 3,
	"action_qi":   7,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

// MopaiType 摸牌类型
type MopaiType int32

const (
	MopaiType_MT_NORMAL MopaiType = 0
	MopaiType_MT_GANG   MopaiType = 1
)

var MopaiType_name = map[int32]string{
	0: "MT_NORMAL",
	1: "MT_GANG",
}
var MopaiType_value = map[string]int32{
	"MT_NORMAL": 0,
	"MT_GANG":   1,
}

func (x MopaiType) String() string {
	return proto.EnumName(MopaiType_name, int32(x))
}
func (MopaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

// ZixunType 自询类型
type ZixunType int32

const (
	ZixunType_ZXT_NORMAL ZixunType = 0
	ZixunType_ZXT_PENG   ZixunType = 1
)

var ZixunType_name = map[int32]string{
	0: "ZXT_NORMAL",
	1: "ZXT_PENG",
}
var ZixunType_value = map[string]int32{
	"ZXT_NORMAL": 0,
	"ZXT_PENG":   1,
}

func (x ZixunType) String() string {
	return proto.EnumName(ZixunType_name, int32(x))
}
func (ZixunType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

// 麻将组类型
type CardsGroupType int32

const (
	CardsGroupType_CGT_HAND     CardsGroupType = 0
	CardsGroupType_CGT_CHI      CardsGroupType = 1
	CardsGroupType_CGT_PENG     CardsGroupType = 2
	CardsGroupType_CGT_MINGGANG CardsGroupType = 3
	CardsGroupType_CGT_ANGANG   CardsGroupType = 4
	CardsGroupType_CGT_BUGANG   CardsGroupType = 5
	CardsGroupType_CGT_HU       CardsGroupType = 6
	CardsGroupType_CGT_HUA      CardsGroupType = 7
	CardsGroupType_CGT_OUT      CardsGroupType = 8
)

var CardsGroupType_name = map[int32]string{
	0: "CGT_HAND",
	1: "CGT_CHI",
	2: "CGT_PENG",
	3: "CGT_MINGGANG",
	4: "CGT_ANGANG",
	5: "CGT_BUGANG",
	6: "CGT_HU",
	7: "CGT_HUA",
	8: "CGT_OUT",
}
var CardsGroupType_value = map[string]int32{
	"CGT_HAND":     0,
	"CGT_CHI":      1,
	"CGT_PENG":     2,
	"CGT_MINGGANG": 3,
	"CGT_ANGANG":   4,
	"CGT_BUGANG":   5,
	"CGT_HU":       6,
	"CGT_HUA":      7,
	"CGT_OUT":      8,
}

func (x CardsGroupType) String() string {
	return proto.EnumName(CardsGroupType_name, int32(x))
}
func (CardsGroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

// 杠牌数据
type GangCard struct {
	Card      *Card    `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	Type      GangType `protobuf:"varint,2,opt,name=type,enum=majong.GangType" json:"type,omitempty"`
	SrcPlayer uint64   `protobuf:"varint,3,opt,name=src_player,json=srcPlayer" json:"src_player,omitempty"`
}

func (m *GangCard) Reset()                    { *m = GangCard{} }
func (m *GangCard) String() string            { return proto.CompactTextString(m) }
func (*GangCard) ProtoMessage()               {}
func (*GangCard) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GangCard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *GangCard) GetType() GangType {
	if m != nil {
		return m.Type
	}
	return GangType_gang_angang
}

func (m *GangCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

// 碰牌数据
type PengCard struct {
	Card      *Card  `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	SrcPlayer uint64 `protobuf:"varint,2,opt,name=src_player,json=srcPlayer" json:"src_player,omitempty"`
}

func (m *PengCard) Reset()                    { *m = PengCard{} }
func (m *PengCard) String() string            { return proto.CompactTextString(m) }
func (*PengCard) ProtoMessage()               {}
func (*PengCard) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PengCard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *PengCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

// 胡牌数据
type HuCard struct {
	Card      *Card  `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	SrcPlayer uint64 `protobuf:"varint,2,opt,name=src_player,json=srcPlayer" json:"src_player,omitempty"`
	Type      HuType `protobuf:"varint,3,opt,name=type,enum=majong.HuType" json:"type,omitempty"`
	IsReal    bool   `protobuf:"varint,4,opt,name=is_real,json=isReal" json:"is_real,omitempty"`
}

func (m *HuCard) Reset()                    { *m = HuCard{} }
func (m *HuCard) String() string            { return proto.CompactTextString(m) }
func (*HuCard) ProtoMessage()               {}
func (*HuCard) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *HuCard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *HuCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

func (m *HuCard) GetType() HuType {
	if m != nil {
		return m.Type
	}
	return HuType_hu_ganghoupao
}

func (m *HuCard) GetIsReal() bool {
	if m != nil {
		return m.IsReal
	}
	return false
}

// 吃牌数据
type ChiCard struct {
	Cards     []*Card `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
	OprCard   *Card   `protobuf:"bytes,2,opt,name=opr_card,json=oprCard" json:"opr_card,omitempty"`
	SrcPlayer uint64  `protobuf:"varint,3,opt,name=src_player,json=srcPlayer" json:"src_player,omitempty"`
}

func (m *ChiCard) Reset()                    { *m = ChiCard{} }
func (m *ChiCard) String() string            { return proto.CompactTextString(m) }
func (*ChiCard) ProtoMessage()               {}
func (*ChiCard) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *ChiCard) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *ChiCard) GetOprCard() *Card {
	if m != nil {
		return m.OprCard
	}
	return nil
}

func (m *ChiCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

// TingCardInfo 听牌信息
type TingCardInfo struct {
	TingCard uint32 `protobuf:"varint,1,opt,name=ting_card,json=tingCard" json:"ting_card,omitempty"`
	Times    uint32 `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
}

func (m *TingCardInfo) Reset()                    { *m = TingCardInfo{} }
func (m *TingCardInfo) String() string            { return proto.CompactTextString(m) }
func (*TingCardInfo) ProtoMessage()               {}
func (*TingCardInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *TingCardInfo) GetTingCard() uint32 {
	if m != nil {
		return m.TingCard
	}
	return 0
}

func (m *TingCardInfo) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// CanTingCardInfo 出本张牌可以听
type CanTingCardInfo struct {
	OutCard      uint32          `protobuf:"varint,1,opt,name=out_card,json=outCard" json:"out_card,omitempty"`
	TingCardInfo []*TingCardInfo `protobuf:"bytes,2,rep,name=ting_card_info,json=tingCardInfo" json:"ting_card_info,omitempty"`
}

func (m *CanTingCardInfo) Reset()                    { *m = CanTingCardInfo{} }
func (m *CanTingCardInfo) String() string            { return proto.CompactTextString(m) }
func (*CanTingCardInfo) ProtoMessage()               {}
func (*CanTingCardInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CanTingCardInfo) GetOutCard() uint32 {
	if m != nil {
		return m.OutCard
	}
	return 0
}

func (m *CanTingCardInfo) GetTingCardInfo() []*TingCardInfo {
	if m != nil {
		return m.TingCardInfo
	}
	return nil
}

// ZixunRecord 自询
type ZixunRecord struct {
	EnableAngangCards []uint32           `protobuf:"varint,1,rep,packed,name=enable_angang_cards,json=enableAngangCards" json:"enable_angang_cards,omitempty"`
	EnableBugangCards []uint32           `protobuf:"varint,2,rep,packed,name=enable_bugang_cards,json=enableBugangCards" json:"enable_bugang_cards,omitempty"`
	EnableZimo        bool               `protobuf:"varint,3,opt,name=enable_zimo,json=enableZimo" json:"enable_zimo,omitempty"`
	EnableChupaiCards []uint32           `protobuf:"varint,4,rep,packed,name=enable_chupai_cards,json=enableChupaiCards" json:"enable_chupai_cards,omitempty"`
	CanTingCardInfo   []*CanTingCardInfo `protobuf:"bytes,5,rep,name=can_ting_card_info,json=canTingCardInfo" json:"can_ting_card_info,omitempty"`
	EnableQi          bool               `protobuf:"varint,6,opt,name=enable_qi,json=enableQi" json:"enable_qi,omitempty"`
	HuType            HuType             `protobuf:"varint,7,opt,name=hu_type,json=huType,enum=majong.HuType" json:"hu_type,omitempty"`
}

func (m *ZixunRecord) Reset()                    { *m = ZixunRecord{} }
func (m *ZixunRecord) String() string            { return proto.CompactTextString(m) }
func (*ZixunRecord) ProtoMessage()               {}
func (*ZixunRecord) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *ZixunRecord) GetEnableAngangCards() []uint32 {
	if m != nil {
		return m.EnableAngangCards
	}
	return nil
}

func (m *ZixunRecord) GetEnableBugangCards() []uint32 {
	if m != nil {
		return m.EnableBugangCards
	}
	return nil
}

func (m *ZixunRecord) GetEnableZimo() bool {
	if m != nil {
		return m.EnableZimo
	}
	return false
}

func (m *ZixunRecord) GetEnableChupaiCards() []uint32 {
	if m != nil {
		return m.EnableChupaiCards
	}
	return nil
}

func (m *ZixunRecord) GetCanTingCardInfo() []*CanTingCardInfo {
	if m != nil {
		return m.CanTingCardInfo
	}
	return nil
}

func (m *ZixunRecord) GetEnableQi() bool {
	if m != nil {
		return m.EnableQi
	}
	return false
}

func (m *ZixunRecord) GetHuType() HuType {
	if m != nil {
		return m.HuType
	}
	return HuType_hu_ganghoupao
}

// Player 玩家数据
type Player struct {
	PalyerId          uint64            `protobuf:"varint,1,opt,name=palyer_id,json=palyerId" json:"palyer_id,omitempty"`
	HandCards         []*Card           `protobuf:"bytes,2,rep,name=hand_cards,json=handCards" json:"hand_cards,omitempty"`
	OutCards          []*Card           `protobuf:"bytes,3,rep,name=out_cards,json=outCards" json:"out_cards,omitempty"`
	ChiCards          []*ChiCard        `protobuf:"bytes,4,rep,name=chi_cards,json=chiCards" json:"chi_cards,omitempty"`
	PengCards         []*PengCard       `protobuf:"bytes,5,rep,name=peng_cards,json=pengCards" json:"peng_cards,omitempty"`
	HuCards           []*HuCard         `protobuf:"bytes,6,rep,name=hu_cards,json=huCards" json:"hu_cards,omitempty"`
	GangCards         []*GangCard       `protobuf:"bytes,7,rep,name=gang_cards,json=gangCards" json:"gang_cards,omitempty"`
	PossibleActions   []Action          `protobuf:"varint,8,rep,packed,name=possible_actions,json=possibleActions,enum=majong.Action" json:"possible_actions,omitempty"`
	HasSelected       bool              `protobuf:"varint,9,opt,name=has_selected,json=hasSelected" json:"has_selected,omitempty"`
	SelectedAction    Action            `protobuf:"varint,10,opt,name=selected_action,json=selectedAction,enum=majong.Action" json:"selected_action,omitempty"`
	HasDingque        bool              `protobuf:"varint,11,opt,name=has_dingque,json=hasDingque" json:"has_dingque,omitempty"`
	DingqueColor      CardColor         `protobuf:"varint,12,opt,name=dingque_color,json=dingqueColor,enum=majong.CardColor" json:"dingque_color,omitempty"`
	HuansanzhangSure  bool              `protobuf:"varint,13,opt,name=huansanzhang_sure,json=huansanzhangSure" json:"huansanzhang_sure,omitempty"`
	HuansanzhangCards []*Card           `protobuf:"bytes,14,rep,name=huansanzhang_cards,json=huansanzhangCards" json:"huansanzhang_cards,omitempty"`
	MopaiCount        int32             `protobuf:"varint,15,opt,name=mopai_count,json=mopaiCount" json:"mopai_count,omitempty"`
	ZixunRecord       *ZixunRecord      `protobuf:"bytes,16,opt,name=zixun_record,json=zixunRecord" json:"zixun_record,omitempty"`
	XpState           XingPaiState      `protobuf:"varint,17,opt,name=xp_state,json=xpState,enum=majong.XingPaiState" json:"xp_state,omitempty"`
	IsQuit            bool              `protobuf:"varint,18,opt,name=is_quit,json=isQuit" json:"is_quit,omitempty"`
	TingCardInfo      []*TingCardInfo   `protobuf:"bytes,19,rep,name=ting_card_info,json=tingCardInfo" json:"ting_card_info,omitempty"`
	MaxCardValue      uint32            `protobuf:"varint,20,opt,name=max_card_value,json=maxCardValue" json:"max_card_value,omitempty"`
	CardsGroup        []*CardsGroup     `protobuf:"bytes,21,rep,name=cards_group,json=cardsGroup" json:"cards_group,omitempty"`
	Properties        map[string][]byte `protobuf:"bytes,256,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Player) GetPalyerId() uint64 {
	if m != nil {
		return m.PalyerId
	}
	return 0
}

func (m *Player) GetHandCards() []*Card {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *Player) GetOutCards() []*Card {
	if m != nil {
		return m.OutCards
	}
	return nil
}

func (m *Player) GetChiCards() []*ChiCard {
	if m != nil {
		return m.ChiCards
	}
	return nil
}

func (m *Player) GetPengCards() []*PengCard {
	if m != nil {
		return m.PengCards
	}
	return nil
}

func (m *Player) GetHuCards() []*HuCard {
	if m != nil {
		return m.HuCards
	}
	return nil
}

func (m *Player) GetGangCards() []*GangCard {
	if m != nil {
		return m.GangCards
	}
	return nil
}

func (m *Player) GetPossibleActions() []Action {
	if m != nil {
		return m.PossibleActions
	}
	return nil
}

func (m *Player) GetHasSelected() bool {
	if m != nil {
		return m.HasSelected
	}
	return false
}

func (m *Player) GetSelectedAction() Action {
	if m != nil {
		return m.SelectedAction
	}
	return Action_action_peng
}

func (m *Player) GetHasDingque() bool {
	if m != nil {
		return m.HasDingque
	}
	return false
}

func (m *Player) GetDingqueColor() CardColor {
	if m != nil {
		return m.DingqueColor
	}
	return CardColor_ColorWan
}

func (m *Player) GetHuansanzhangSure() bool {
	if m != nil {
		return m.HuansanzhangSure
	}
	return false
}

func (m *Player) GetHuansanzhangCards() []*Card {
	if m != nil {
		return m.HuansanzhangCards
	}
	return nil
}

func (m *Player) GetMopaiCount() int32 {
	if m != nil {
		return m.MopaiCount
	}
	return 0
}

func (m *Player) GetZixunRecord() *ZixunRecord {
	if m != nil {
		return m.ZixunRecord
	}
	return nil
}

func (m *Player) GetXpState() XingPaiState {
	if m != nil {
		return m.XpState
	}
	return XingPaiState_normal
}

func (m *Player) GetIsQuit() bool {
	if m != nil {
		return m.IsQuit
	}
	return false
}

func (m *Player) GetTingCardInfo() []*TingCardInfo {
	if m != nil {
		return m.TingCardInfo
	}
	return nil
}

func (m *Player) GetMaxCardValue() uint32 {
	if m != nil {
		return m.MaxCardValue
	}
	return 0
}

func (m *Player) GetCardsGroup() []*CardsGroup {
	if m != nil {
		return m.CardsGroup
	}
	return nil
}

func (m *Player) GetProperties() map[string][]byte {
	if m != nil {
		return m.Properties
	}
	return nil
}

// AutoEvent 自动事件
type AutoEvent struct {
	EventId      EventID `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=majong.EventID" json:"event_id,omitempty"`
	EventContext []byte  `protobuf:"bytes,2,opt,name=event_context,json=eventContext,proto3" json:"event_context,omitempty"`
	WaitTime     uint32  `protobuf:"varint,3,opt,name=wait_time,json=waitTime" json:"wait_time,omitempty"`
}

func (m *AutoEvent) Reset()                    { *m = AutoEvent{} }
func (m *AutoEvent) String() string            { return proto.CompactTextString(m) }
func (*AutoEvent) ProtoMessage()               {}
func (*AutoEvent) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *AutoEvent) GetEventId() EventID {
	if m != nil {
		return m.EventId
	}
	return EventID_event_invalid
}

func (m *AutoEvent) GetEventContext() []byte {
	if m != nil {
		return m.EventContext
	}
	return nil
}

func (m *AutoEvent) GetWaitTime() uint32 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

// SettleInfo 结算信息
type SettleInfo struct {
	Id           uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Scores       map[uint64]int64 `protobuf:"bytes,2,rep,name=scores" json:"scores,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SettleType   SettleType       `protobuf:"varint,3,opt,name=settle_type,json=settleType,enum=majong.SettleType" json:"settle_type,omitempty"`
	HuType       HuType           `protobuf:"varint,4,opt,name=hu_type,json=huType,enum=majong.HuType" json:"hu_type,omitempty"`
	CardType     []CardType       `protobuf:"varint,5,rep,packed,name=card_type,json=cardType,enum=majong.CardType" json:"card_type,omitempty"`
	CardValue    uint32           `protobuf:"varint,6,opt,name=card_value,json=cardValue" json:"card_value,omitempty"`
	GenCount     uint32           `protobuf:"varint,7,opt,name=gen_count,json=genCount" json:"gen_count,omitempty"`
	CallTransfer bool             `protobuf:"varint,8,opt,name=call_transfer,json=callTransfer" json:"call_transfer,omitempty"`
	GroupId      []uint64         `protobuf:"varint,9,rep,packed,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *SettleInfo) Reset()                    { *m = SettleInfo{} }
func (m *SettleInfo) String() string            { return proto.CompactTextString(m) }
func (*SettleInfo) ProtoMessage()               {}
func (*SettleInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *SettleInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SettleInfo) GetScores() map[uint64]int64 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *SettleInfo) GetSettleType() SettleType {
	if m != nil {
		return m.SettleType
	}
	return SettleType_settle_angang
}

func (m *SettleInfo) GetHuType() HuType {
	if m != nil {
		return m.HuType
	}
	return HuType_hu_ganghoupao
}

func (m *SettleInfo) GetCardType() []CardType {
	if m != nil {
		return m.CardType
	}
	return nil
}

func (m *SettleInfo) GetCardValue() uint32 {
	if m != nil {
		return m.CardValue
	}
	return 0
}

func (m *SettleInfo) GetGenCount() uint32 {
	if m != nil {
		return m.GenCount
	}
	return 0
}

func (m *SettleInfo) GetCallTransfer() bool {
	if m != nil {
		return m.CallTransfer
	}
	return false
}

func (m *SettleInfo) GetGroupId() []uint64 {
	if m != nil {
		return m.GroupId
	}
	return nil
}

// MajongContext 麻将现场
type MajongContext struct {
	GameId              int32               `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CurState            StateID             `protobuf:"varint,2,opt,name=cur_state,json=curState,enum=majong.StateID" json:"cur_state,omitempty"`
	Players             []*Player           `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	ActivePlayer        uint64              `protobuf:"varint,4,opt,name=active_player,json=activePlayer" json:"active_player,omitempty"`
	WallCards           []*Card             `protobuf:"bytes,5,rep,name=wall_cards,json=wallCards" json:"wall_cards,omitempty"`
	SettleInfos         []*SettleInfo       `protobuf:"bytes,6,rep,name=settle_infos,json=settleInfos" json:"settle_infos,omitempty"`
	CurrentSettleId     uint64              `protobuf:"varint,7,opt,name=current_settleId,json=currentSettleId" json:"current_settleId,omitempty"`
	RevertSettles       []uint64            `protobuf:"varint,8,rep,packed,name=revert_settles,json=revertSettles" json:"revert_settles,omitempty"`
	LastOutCard         *Card               `protobuf:"bytes,9,opt,name=last_out_card,json=lastOutCard" json:"last_out_card,omitempty"`
	ZhuangjiaIndex      uint32              `protobuf:"varint,10,opt,name=zhuangjia_index,json=zhuangjiaIndex" json:"zhuangjia_index,omitempty"`
	FixZhuangjiaIndex   bool                `protobuf:"varint,11,opt,name=fix_zhuangjia_index,json=fixZhuangjiaIndex" json:"fix_zhuangjia_index,omitempty"`
	LastHuPlayers       []uint64            `protobuf:"varint,12,rep,packed,name=last_hu_players,json=lastHuPlayers" json:"last_hu_players,omitempty"`
	LastPengPlayer      uint64              `protobuf:"varint,13,opt,name=last_peng_player,json=lastPengPlayer" json:"last_peng_player,omitempty"`
	LastGangPlayer      uint64              `protobuf:"varint,14,opt,name=last_gang_player,json=lastGangPlayer" json:"last_gang_player,omitempty"`
	LastChupaiPlayer    uint64              `protobuf:"varint,15,opt,name=last_chupai_player,json=lastChupaiPlayer" json:"last_chupai_player,omitempty"`
	MopaiPlayer         uint64              `protobuf:"varint,16,opt,name=mopai_player,json=mopaiPlayer" json:"mopai_player,omitempty"`
	LastMopaiPlayer     uint64              `protobuf:"varint,17,opt,name=last_mopai_player,json=lastMopaiPlayer" json:"last_mopai_player,omitempty"`
	LastMopaiCard       *Card               `protobuf:"bytes,18,opt,name=last_mopai_card,json=lastMopaiCard" json:"last_mopai_card,omitempty"`
	GangCard            *Card               `protobuf:"bytes,19,opt,name=gang_card,json=gangCard" json:"gang_card,omitempty"`
	MopaiType           MopaiType           `protobuf:"varint,20,opt,name=mopai_type,json=mopaiType,enum=majong.MopaiType" json:"mopai_type,omitempty"`
	ZixunType           ZixunType           `protobuf:"varint,21,opt,name=zixun_type,json=zixunType,enum=majong.ZixunType" json:"zixun_type,omitempty"`
	Dices               []uint32            `protobuf:"varint,22,rep,packed,name=dices" json:"dices,omitempty"`
	ExcutedHuansanzhang bool                `protobuf:"varint,23,opt,name=excuted_huansanzhang,json=excutedHuansanzhang" json:"excuted_huansanzhang,omitempty"`
	CardTotalNum        uint32              `protobuf:"varint,24,opt,name=card_total_num,json=cardTotalNum" json:"card_total_num,omitempty"`
	XingpaiOptionId     uint32              `protobuf:"varint,251,opt,name=xingpai_option_id,json=xingpaiOptionId" json:"xingpai_option_id,omitempty"`
	CardtypeOptionId    uint32              `protobuf:"varint,252,opt,name=cardtype_option_id,json=cardtypeOptionId" json:"cardtype_option_id,omitempty"`
	SettleOptionId      uint32              `protobuf:"varint,253,opt,name=settle_option_id,json=settleOptionId" json:"settle_option_id,omitempty"`
	Option              *MajongCommonOption `protobuf:"bytes,254,opt,name=option" json:"option,omitempty"`
	MajongOption        []byte              `protobuf:"bytes,255,opt,name=majong_option,json=majongOption,proto3" json:"majong_option,omitempty"`
}

func (m *MajongContext) Reset()                    { *m = MajongContext{} }
func (m *MajongContext) String() string            { return proto.CompactTextString(m) }
func (*MajongContext) ProtoMessage()               {}
func (*MajongContext) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *MajongContext) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MajongContext) GetCurState() StateID {
	if m != nil {
		return m.CurState
	}
	return StateID_state_init
}

func (m *MajongContext) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *MajongContext) GetActivePlayer() uint64 {
	if m != nil {
		return m.ActivePlayer
	}
	return 0
}

func (m *MajongContext) GetWallCards() []*Card {
	if m != nil {
		return m.WallCards
	}
	return nil
}

func (m *MajongContext) GetSettleInfos() []*SettleInfo {
	if m != nil {
		return m.SettleInfos
	}
	return nil
}

func (m *MajongContext) GetCurrentSettleId() uint64 {
	if m != nil {
		return m.CurrentSettleId
	}
	return 0
}

func (m *MajongContext) GetRevertSettles() []uint64 {
	if m != nil {
		return m.RevertSettles
	}
	return nil
}

func (m *MajongContext) GetLastOutCard() *Card {
	if m != nil {
		return m.LastOutCard
	}
	return nil
}

func (m *MajongContext) GetZhuangjiaIndex() uint32 {
	if m != nil {
		return m.ZhuangjiaIndex
	}
	return 0
}

func (m *MajongContext) GetFixZhuangjiaIndex() bool {
	if m != nil {
		return m.FixZhuangjiaIndex
	}
	return false
}

func (m *MajongContext) GetLastHuPlayers() []uint64 {
	if m != nil {
		return m.LastHuPlayers
	}
	return nil
}

func (m *MajongContext) GetLastPengPlayer() uint64 {
	if m != nil {
		return m.LastPengPlayer
	}
	return 0
}

func (m *MajongContext) GetLastGangPlayer() uint64 {
	if m != nil {
		return m.LastGangPlayer
	}
	return 0
}

func (m *MajongContext) GetLastChupaiPlayer() uint64 {
	if m != nil {
		return m.LastChupaiPlayer
	}
	return 0
}

func (m *MajongContext) GetMopaiPlayer() uint64 {
	if m != nil {
		return m.MopaiPlayer
	}
	return 0
}

func (m *MajongContext) GetLastMopaiPlayer() uint64 {
	if m != nil {
		return m.LastMopaiPlayer
	}
	return 0
}

func (m *MajongContext) GetLastMopaiCard() *Card {
	if m != nil {
		return m.LastMopaiCard
	}
	return nil
}

func (m *MajongContext) GetGangCard() *Card {
	if m != nil {
		return m.GangCard
	}
	return nil
}

func (m *MajongContext) GetMopaiType() MopaiType {
	if m != nil {
		return m.MopaiType
	}
	return MopaiType_MT_NORMAL
}

func (m *MajongContext) GetZixunType() ZixunType {
	if m != nil {
		return m.ZixunType
	}
	return ZixunType_ZXT_NORMAL
}

func (m *MajongContext) GetDices() []uint32 {
	if m != nil {
		return m.Dices
	}
	return nil
}

func (m *MajongContext) GetExcutedHuansanzhang() bool {
	if m != nil {
		return m.ExcutedHuansanzhang
	}
	return false
}

func (m *MajongContext) GetCardTotalNum() uint32 {
	if m != nil {
		return m.CardTotalNum
	}
	return 0
}

func (m *MajongContext) GetXingpaiOptionId() uint32 {
	if m != nil {
		return m.XingpaiOptionId
	}
	return 0
}

func (m *MajongContext) GetCardtypeOptionId() uint32 {
	if m != nil {
		return m.CardtypeOptionId
	}
	return 0
}

func (m *MajongContext) GetSettleOptionId() uint32 {
	if m != nil {
		return m.SettleOptionId
	}
	return 0
}

func (m *MajongContext) GetOption() *MajongCommonOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *MajongContext) GetMajongOption() []byte {
	if m != nil {
		return m.MajongOption
	}
	return nil
}

// MajongCommonOption 麻将通用玩法选项
type MajongCommonOption struct {
	MaxCartoonTime             uint32          `protobuf:"varint,1,opt,name=max_cartoon_time,json=maxCartoonTime" json:"max_cartoon_time,omitempty"`
	MaxFapaiCartoonTime        uint32          `protobuf:"varint,2,opt,name=max_fapai_cartoon_time,json=maxFapaiCartoonTime" json:"max_fapai_cartoon_time,omitempty"`
	MaxHuansanzhangCartoonTime uint32          `protobuf:"varint,3,opt,name=max_huansanzhang_cartoon_time,json=maxHuansanzhangCartoonTime" json:"max_huansanzhang_cartoon_time,omitempty"`
	HasHuansanzhang            bool            `protobuf:"varint,4,opt,name=has_huansanzhang,json=hasHuansanzhang" json:"has_huansanzhang,omitempty"`
	Cards                      string          `protobuf:"bytes,5,opt,name=cards" json:"cards,omitempty"`
	WallcardsLength            uint32          `protobuf:"varint,6,opt,name=wallcards_length,json=wallcardsLength" json:"wallcards_length,omitempty"`
	HszFx                      *Huansanzhangfx `protobuf:"bytes,7,opt,name=hsz_fx,json=hszFx" json:"hsz_fx,omitempty"`
	Zhuang                     *Zhuang         `protobuf:"bytes,8,opt,name=zhuang" json:"zhuang,omitempty"`
}

func (m *MajongCommonOption) Reset()                    { *m = MajongCommonOption{} }
func (m *MajongCommonOption) String() string            { return proto.CompactTextString(m) }
func (*MajongCommonOption) ProtoMessage()               {}
func (*MajongCommonOption) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *MajongCommonOption) GetMaxCartoonTime() uint32 {
	if m != nil {
		return m.MaxCartoonTime
	}
	return 0
}

func (m *MajongCommonOption) GetMaxFapaiCartoonTime() uint32 {
	if m != nil {
		return m.MaxFapaiCartoonTime
	}
	return 0
}

func (m *MajongCommonOption) GetMaxHuansanzhangCartoonTime() uint32 {
	if m != nil {
		return m.MaxHuansanzhangCartoonTime
	}
	return 0
}

func (m *MajongCommonOption) GetHasHuansanzhang() bool {
	if m != nil {
		return m.HasHuansanzhang
	}
	return false
}

func (m *MajongCommonOption) GetCards() string {
	if m != nil {
		return m.Cards
	}
	return ""
}

func (m *MajongCommonOption) GetWallcardsLength() uint32 {
	if m != nil {
		return m.WallcardsLength
	}
	return 0
}

func (m *MajongCommonOption) GetHszFx() *Huansanzhangfx {
	if m != nil {
		return m.HszFx
	}
	return nil
}

func (m *MajongCommonOption) GetZhuang() *Zhuang {
	if m != nil {
		return m.Zhuang
	}
	return nil
}

type Zhuang struct {
	NeedDeployZhuang bool  `protobuf:"varint,1,opt,name=need_deploy_zhuang,json=needDeployZhuang" json:"need_deploy_zhuang,omitempty"`
	ZhuangIndex      int32 `protobuf:"varint,2,opt,name=zhuang_index,json=zhuangIndex" json:"zhuang_index,omitempty"`
}

func (m *Zhuang) Reset()                    { *m = Zhuang{} }
func (m *Zhuang) String() string            { return proto.CompactTextString(m) }
func (*Zhuang) ProtoMessage()               {}
func (*Zhuang) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *Zhuang) GetNeedDeployZhuang() bool {
	if m != nil {
		return m.NeedDeployZhuang
	}
	return false
}

func (m *Zhuang) GetZhuangIndex() int32 {
	if m != nil {
		return m.ZhuangIndex
	}
	return 0
}

type Huansanzhangfx struct {
	NeedDeployFx   bool  `protobuf:"varint,1,opt,name=need_deploy_fx,json=needDeployFx" json:"need_deploy_fx,omitempty"`
	HuansanzhangFx int32 `protobuf:"varint,2,opt,name=huansanzhang_fx,json=huansanzhangFx" json:"huansanzhang_fx,omitempty"`
}

func (m *Huansanzhangfx) Reset()                    { *m = Huansanzhangfx{} }
func (m *Huansanzhangfx) String() string            { return proto.CompactTextString(m) }
func (*Huansanzhangfx) ProtoMessage()               {}
func (*Huansanzhangfx) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *Huansanzhangfx) GetNeedDeployFx() bool {
	if m != nil {
		return m.NeedDeployFx
	}
	return false
}

func (m *Huansanzhangfx) GetHuansanzhangFx() int32 {
	if m != nil {
		return m.HuansanzhangFx
	}
	return 0
}

// SichuanxueliuOption 四川血流麻将玩法
type SichuanxueliuOption struct {
	OpenHuansanzhang bool `protobuf:"varint,1,opt,name=open_huansanzhang,json=openHuansanzhang" json:"open_huansanzhang,omitempty"`
}

func (m *SichuanxueliuOption) Reset()                    { *m = SichuanxueliuOption{} }
func (m *SichuanxueliuOption) String() string            { return proto.CompactTextString(m) }
func (*SichuanxueliuOption) ProtoMessage()               {}
func (*SichuanxueliuOption) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *SichuanxueliuOption) GetOpenHuansanzhang() bool {
	if m != nil {
		return m.OpenHuansanzhang
	}
	return false
}

// SichuanxuezhanOption 四川血流麻将玩法
type SichuanxuezhanOption struct {
	OpenHuansanzhang bool `protobuf:"varint,1,opt,name=open_huansanzhang,json=openHuansanzhang" json:"open_huansanzhang,omitempty"`
}

func (m *SichuanxuezhanOption) Reset()                    { *m = SichuanxuezhanOption{} }
func (m *SichuanxuezhanOption) String() string            { return proto.CompactTextString(m) }
func (*SichuanxuezhanOption) ProtoMessage()               {}
func (*SichuanxuezhanOption) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *SichuanxuezhanOption) GetOpenHuansanzhang() bool {
	if m != nil {
		return m.OpenHuansanzhang
	}
	return false
}

// InitMajongContextParams 麻将现场初始化参数
type InitMajongContextParams struct {
	GameId         int32               `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Players        []uint64            `protobuf:"varint,2,rep,packed,name=players" json:"players,omitempty"`
	Option         *MajongCommonOption `protobuf:"bytes,3,opt,name=option" json:"option,omitempty"`
	MajongOption   []byte              `protobuf:"bytes,4,opt,name=majong_option,json=majongOption,proto3" json:"majong_option,omitempty"`
	ZhuangIndex    uint32              `protobuf:"varint,5,opt,name=zhuang_index,json=zhuangIndex" json:"zhuang_index,omitempty"`
	FixZhuangIndex bool                `protobuf:"varint,6,opt,name=fix_zhuang_index,json=fixZhuangIndex" json:"fix_zhuang_index,omitempty"`
}

func (m *InitMajongContextParams) Reset()                    { *m = InitMajongContextParams{} }
func (m *InitMajongContextParams) String() string            { return proto.CompactTextString(m) }
func (*InitMajongContextParams) ProtoMessage()               {}
func (*InitMajongContextParams) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *InitMajongContextParams) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *InitMajongContextParams) GetPlayers() []uint64 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *InitMajongContextParams) GetOption() *MajongCommonOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *InitMajongContextParams) GetMajongOption() []byte {
	if m != nil {
		return m.MajongOption
	}
	return nil
}

func (m *InitMajongContextParams) GetZhuangIndex() uint32 {
	if m != nil {
		return m.ZhuangIndex
	}
	return 0
}

func (m *InitMajongContextParams) GetFixZhuangIndex() bool {
	if m != nil {
		return m.FixZhuangIndex
	}
	return false
}

// ReplyClientMessage 回复给客户端的消息
type ReplyClientMessage struct {
	Players []uint64 `protobuf:"varint,1,rep,packed,name=players" json:"players,omitempty"`
	MsgId   int32    `protobuf:"varint,2,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Msg     []byte   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ReplyClientMessage) Reset()                    { *m = ReplyClientMessage{} }
func (m *ReplyClientMessage) String() string            { return proto.CompactTextString(m) }
func (*ReplyClientMessage) ProtoMessage()               {}
func (*ReplyClientMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *ReplyClientMessage) GetPlayers() []uint64 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ReplyClientMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyClientMessage) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

// TimeCheckInfo 时间检测信息
type TimeCheckInfo struct {
	Duration uint64 `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	Type     int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *TimeCheckInfo) Reset()                    { *m = TimeCheckInfo{} }
func (m *TimeCheckInfo) String() string            { return proto.CompactTextString(m) }
func (*TimeCheckInfo) ProtoMessage()               {}
func (*TimeCheckInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *TimeCheckInfo) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TimeCheckInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 麻将组
type CardsGroup struct {
	Cards  []uint32       `protobuf:"varint,1,rep,packed,name=cards" json:"cards,omitempty"`
	Type   CardsGroupType `protobuf:"varint,2,opt,name=type,enum=majong.CardsGroupType" json:"type,omitempty"`
	Pid    uint64         `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	IsReal bool           `protobuf:"varint,4,opt,name=is_real,json=isReal" json:"is_real,omitempty"`
}

func (m *CardsGroup) Reset()                    { *m = CardsGroup{} }
func (m *CardsGroup) String() string            { return proto.CompactTextString(m) }
func (*CardsGroup) ProtoMessage()               {}
func (*CardsGroup) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *CardsGroup) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *CardsGroup) GetType() CardsGroupType {
	if m != nil {
		return m.Type
	}
	return CardsGroupType_CGT_HAND
}

func (m *CardsGroup) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CardsGroup) GetIsReal() bool {
	if m != nil {
		return m.IsReal
	}
	return false
}

func init() {
	proto.RegisterType((*GangCard)(nil), "majong.GangCard")
	proto.RegisterType((*PengCard)(nil), "majong.PengCard")
	proto.RegisterType((*HuCard)(nil), "majong.HuCard")
	proto.RegisterType((*ChiCard)(nil), "majong.ChiCard")
	proto.RegisterType((*TingCardInfo)(nil), "majong.TingCardInfo")
	proto.RegisterType((*CanTingCardInfo)(nil), "majong.CanTingCardInfo")
	proto.RegisterType((*ZixunRecord)(nil), "majong.ZixunRecord")
	proto.RegisterType((*Player)(nil), "majong.Player")
	proto.RegisterType((*AutoEvent)(nil), "majong.AutoEvent")
	proto.RegisterType((*SettleInfo)(nil), "majong.SettleInfo")
	proto.RegisterType((*MajongContext)(nil), "majong.MajongContext")
	proto.RegisterType((*MajongCommonOption)(nil), "majong.MajongCommonOption")
	proto.RegisterType((*Zhuang)(nil), "majong.Zhuang")
	proto.RegisterType((*Huansanzhangfx)(nil), "majong.Huansanzhangfx")
	proto.RegisterType((*SichuanxueliuOption)(nil), "majong.SichuanxueliuOption")
	proto.RegisterType((*SichuanxuezhanOption)(nil), "majong.SichuanxuezhanOption")
	proto.RegisterType((*InitMajongContextParams)(nil), "majong.InitMajongContextParams")
	proto.RegisterType((*ReplyClientMessage)(nil), "majong.ReplyClientMessage")
	proto.RegisterType((*TimeCheckInfo)(nil), "majong.TimeCheckInfo")
	proto.RegisterType((*CardsGroup)(nil), "majong.CardsGroup")
	proto.RegisterEnum("majong.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("majong.HuType", HuType_name, HuType_value)
	proto.RegisterEnum("majong.CardType", CardType_name, CardType_value)
	proto.RegisterEnum("majong.XingPaiState", XingPaiState_name, XingPaiState_value)
	proto.RegisterEnum("majong.SettleType", SettleType_name, SettleType_value)
	proto.RegisterEnum("majong.Action", Action_name, Action_value)
	proto.RegisterEnum("majong.MopaiType", MopaiType_name, MopaiType_value)
	proto.RegisterEnum("majong.ZixunType", ZixunType_name, ZixunType_value)
	proto.RegisterEnum("majong.CardsGroupType", CardsGroupType_name, CardsGroupType_value)
}

func init() { proto.RegisterFile("majong.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 2581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0x16, 0xde, 0x8b, 0xc6, 0x6b, 0x39, 0xa4, 0xa5, 0x0d, 0x55, 0x4e, 0x68, 0xd8, 0x89, 0x48,
	0xca, 0x96, 0x1d, 0x29, 0x71, 0x62, 0xa7, 0x12, 0x17, 0x05, 0x5a, 0x24, 0x12, 0x51, 0xa2, 0x96,
	0x54, 0x62, 0xeb, 0xb2, 0x35, 0xc2, 0x0e, 0xb1, 0x63, 0x03, 0xbb, 0xab, 0x7d, 0xc8, 0x20, 0x4f,
	0x39, 0xe5, 0x9e, 0x5b, 0xee, 0xf9, 0x21, 0xb9, 0xbb, 0xf2, 0x6b, 0x52, 0x95, 0x43, 0x2a, 0xcf,
	0xea, 0x9e, 0xd9, 0xc5, 0x80, 0xa4, 0x53, 0xae, 0x54, 0x4e, 0xc0, 0x74, 0x7f, 0xd3, 0x3b, 0xd3,
	0xdd, 0xd3, 0x5f, 0xcf, 0x40, 0x77, 0xce, 0xbf, 0x88, 0xc2, 0xe9, 0xbd, 0x38, 0x89, 0xb2, 0x88,
	0x35, 0xd5, 0x68, 0xb3, 0x3b, 0x89, 0xe6, 0xf3, 0x28, 0x54, 0xd2, 0xcd, 0x6e, 0x9a, 0xf1, 0x4c,
	0xa4, 0xc5, 0x48, 0xbc, 0x16, 0x61, 0xa6, 0x47, 0xc3, 0x57, 0x60, 0x1d, 0xf0, 0x70, 0x3a, 0xe2,
	0x89, 0xcf, 0xb6, 0xa0, 0x3e, 0xe1, 0x89, 0xef, 0x54, 0xb6, 0x2a, 0xdb, 0x9d, 0xfb, 0xdd, 0x7b,
	0xda, 0x34, 0xea, 0x5c, 0xd2, 0xb0, 0x77, 0xa0, 0x9e, 0x9d, 0xc7, 0xc2, 0xa9, 0x6e, 0x55, 0xb6,
	0xfb, 0xf7, 0xed, 0x02, 0x81, 0x16, 0x4e, 0xcf, 0x63, 0xe1, 0x92, 0x96, 0xbd, 0x09, 0x90, 0x26,
	0x13, 0x2f, 0x9e, 0xf1, 0x73, 0x91, 0x38, 0xb5, 0xad, 0xca, 0x76, 0xdd, 0x6d, 0xa7, 0xc9, 0xe4,
	0x98, 0x04, 0xc3, 0x5f, 0x81, 0x75, 0x2c, 0xbe, 0xf5, 0x27, 0x57, 0x8d, 0x55, 0x2f, 0x1b, 0xfb,
	0x5d, 0x05, 0x9a, 0x87, 0xf9, 0xff, 0xc5, 0x16, 0x1b, 0xea, 0xdd, 0xd5, 0x68, 0x77, 0xfd, 0xc2,
	0xc0, 0x61, 0x6e, 0xec, 0xed, 0x16, 0xb4, 0x64, 0xea, 0x25, 0x82, 0xcf, 0x9c, 0xfa, 0x56, 0x65,
	0xdb, 0x72, 0x9b, 0x32, 0x75, 0x05, 0x9f, 0x0d, 0x73, 0x68, 0x8d, 0x02, 0x49, 0x0b, 0x19, 0x42,
	0x03, 0x3f, 0x97, 0x3a, 0x95, 0xad, 0xda, 0x95, 0x95, 0x28, 0x15, 0xbb, 0x03, 0x56, 0x14, 0x27,
	0x1e, 0x2d, 0xb8, 0x7a, 0xcd, 0x82, 0x5b, 0x51, 0x9c, 0x8c, 0xae, 0xae, 0xf9, 0x8a, 0x33, 0xf7,
	0xa0, 0x7b, 0x2a, 0x95, 0x33, 0xc7, 0xe1, 0x59, 0xc4, 0x6e, 0x43, 0x3b, 0x93, 0xe1, 0xd4, 0x2b,
	0x3d, 0xd1, 0x73, 0xad, 0x4c, 0x03, 0xd8, 0x06, 0x34, 0x32, 0x39, 0x17, 0x29, 0x7d, 0xb1, 0xe7,
	0xaa, 0xc1, 0x30, 0x80, 0xc1, 0x88, 0x87, 0x2b, 0x56, 0xbe, 0x03, 0x56, 0x94, 0x67, 0xa6, 0x91,
	0x56, 0x94, 0x67, 0x64, 0xe3, 0x63, 0xe8, 0x97, 0x1f, 0xf0, 0x64, 0x78, 0x16, 0x39, 0x55, 0xda,
	0xe5, 0x46, 0xb1, 0x7c, 0xd3, 0x90, 0xdb, 0xcd, 0x8c, 0xd1, 0xf0, 0xeb, 0x2a, 0x74, 0x5e, 0xc8,
	0x45, 0x1e, 0xba, 0x62, 0x12, 0x25, 0x3e, 0xbb, 0x07, 0xeb, 0x22, 0xe4, 0x2f, 0x67, 0xc2, 0xe3,
	0xe1, 0x94, 0x6b, 0xa3, 0xca, 0x6d, 0x3d, 0x77, 0x4d, 0xa9, 0xf6, 0x48, 0x33, 0x22, 0xa7, 0x2d,
	0xf1, 0x2f, 0x73, 0x03, 0x5f, 0x35, 0xf1, 0x0f, 0xf3, 0x25, 0xfe, 0x7b, 0xd0, 0xd1, 0xf8, 0x0b,
	0x39, 0x8f, 0xc8, 0x79, 0x96, 0x0b, 0x4a, 0xf4, 0x42, 0xce, 0x23, 0xc3, 0xe0, 0x24, 0xc8, 0x63,
	0x2e, 0xb5, 0xc1, 0xba, 0x69, 0x70, 0x44, 0x1a, 0x65, 0x70, 0x1f, 0xd8, 0x84, 0x87, 0xde, 0x25,
	0x07, 0x34, 0xc8, 0x01, 0xb7, 0x96, 0xf1, 0x5b, 0x71, 0xa6, 0x3b, 0x98, 0x5c, 0xf2, 0xee, 0x6d,
	0x68, 0xeb, 0xaf, 0xbe, 0x92, 0x4e, 0x93, 0x16, 0x65, 0x29, 0xc1, 0x33, 0xc9, 0xee, 0x40, 0x2b,
	0xc8, 0x3d, 0xca, 0xc3, 0xd6, 0xb5, 0x79, 0xd8, 0x0c, 0xe8, 0x77, 0xf8, 0x67, 0x0b, 0x9a, 0x3a,
	0x71, 0x6f, 0x43, 0x3b, 0xe6, 0xb3, 0x73, 0x91, 0x78, 0x52, 0xc5, 0xab, 0xee, 0x5a, 0x4a, 0x30,
	0xf6, 0xd9, 0x5d, 0x80, 0x80, 0x87, 0xbe, 0xe1, 0xab, 0xcb, 0xb9, 0xd6, 0x46, 0xbd, 0xda, 0xe0,
	0x0e, 0xb4, 0x8b, 0xc0, 0xa7, 0x4e, 0xed, 0x1a, 0xac, 0xa5, 0xf3, 0x20, 0x65, 0xef, 0x42, 0x7b,
	0x12, 0x98, 0x1e, 0xeb, 0xdc, 0x1f, 0x94, 0x50, 0x75, 0x12, 0x5c, 0x6b, 0x12, 0x68, 0xcf, 0xbd,
	0x0f, 0x10, 0x8b, 0x32, 0x62, 0xca, 0x63, 0x65, 0xfd, 0x28, 0xca, 0x81, 0xdb, 0x8e, 0x45, 0x11,
	0xbb, 0x1d, 0xb0, 0x82, 0x5c, 0xc3, 0x9b, 0x04, 0x37, 0x1c, 0xa1, 0x8e, 0x48, 0x90, 0x97, 0xb6,
	0x8d, 0x6c, 0x68, 0xad, 0xda, 0x2e, 0xaa, 0x9b, 0xdb, 0x5e, 0xe6, 0xc5, 0x47, 0x60, 0xc7, 0x51,
	0x9a, 0x4a, 0xca, 0xbc, 0x49, 0x26, 0xa3, 0x30, 0x75, 0xac, 0xad, 0x9a, 0xe9, 0xec, 0x3d, 0x12,
	0xbb, 0x83, 0x02, 0xa7, 0xc6, 0x29, 0x7b, 0x0b, 0xba, 0x01, 0x4f, 0xbd, 0x54, 0xcc, 0xc4, 0x24,
	0x13, 0xbe, 0xd3, 0xa6, 0xf0, 0x75, 0x02, 0x9e, 0x9e, 0x68, 0x11, 0xfb, 0x09, 0x0c, 0x0a, 0xb5,
	0xb6, 0xee, 0xc0, 0x6a, 0x24, 0xb5, 0xf1, 0x7e, 0x01, 0x53, 0x63, 0x4c, 0x57, 0xb4, 0xed, 0xcb,
	0x70, 0xfa, 0x2a, 0x17, 0x4e, 0x47, 0xa5, 0x6b, 0xc0, 0xd3, 0x7d, 0x25, 0x61, 0x1f, 0x42, 0x4f,
	0x2b, 0xbd, 0x49, 0x34, 0x8b, 0x12, 0xa7, 0x4b, 0x76, 0xd7, 0xcc, 0x08, 0x8d, 0x50, 0xe1, 0x76,
	0x35, 0x8e, 0x46, 0xec, 0x2e, 0xac, 0x05, 0x39, 0x0f, 0x53, 0x1e, 0x5e, 0x04, 0xe8, 0xa8, 0x34,
	0x4f, 0x84, 0xd3, 0x23, 0xf3, 0xb6, 0xa9, 0x38, 0xc9, 0x13, 0xc1, 0x7e, 0x06, 0x6c, 0x05, 0xac,
	0xbc, 0xda, 0xbf, 0x26, 0x17, 0x56, 0x8c, 0x96, 0x27, 0x6e, 0x1e, 0xd1, 0x41, 0x8a, 0xf2, 0x30,
	0x73, 0x06, 0x5b, 0x95, 0xed, 0x86, 0x0b, 0x24, 0x1a, 0xa1, 0x84, 0x7d, 0x08, 0xdd, 0x0b, 0xac,
	0x00, 0x5e, 0x42, 0x25, 0xc0, 0xb1, 0xa9, 0xf6, 0xad, 0x17, 0x76, 0x8d, 0xea, 0xe0, 0x76, 0x2e,
	0x8c, 0x52, 0xf1, 0x3e, 0x58, 0x8b, 0xd8, 0x23, 0x22, 0x73, 0xd6, 0x68, 0xd7, 0x65, 0xc1, 0xf9,
	0x4c, 0x86, 0xd3, 0x63, 0x2e, 0x4f, 0x50, 0xe7, 0xb6, 0x16, 0x31, 0xfd, 0xd1, 0x85, 0xfa, 0x55,
	0x2e, 0x33, 0x87, 0x15, 0x85, 0xfa, 0x59, 0x2e, 0xb3, 0x6b, 0x0a, 0xd8, 0xfa, 0xb7, 0x2d, 0x60,
	0xec, 0x1d, 0xe8, 0xcf, 0xf9, 0x42, 0x4d, 0x7d, 0xcd, 0x67, 0xb9, 0x70, 0x36, 0xa8, 0x3a, 0x76,
	0xe7, 0x7c, 0x81, 0xa0, 0x5f, 0xa3, 0x8c, 0x3d, 0x80, 0x0e, 0x39, 0xcd, 0x9b, 0x26, 0x51, 0x1e,
	0x3b, 0x6f, 0x90, 0x79, 0x66, 0xba, 0x2e, 0x3d, 0x40, 0x8d, 0x0b, 0x93, 0xf2, 0x3f, 0xfb, 0x04,
	0x20, 0x4e, 0xa2, 0x58, 0x24, 0x99, 0x14, 0xa9, 0xf3, 0x5b, 0x75, 0x4e, 0xbf, 0x5b, 0x9e, 0x10,
	0x3a, 0xe8, 0xf7, 0x8e, 0x4b, 0xc4, 0xa7, 0x61, 0x96, 0x9c, 0xbb, 0xc6, 0x94, 0xcd, 0x9f, 0xc3,
	0xe0, 0x92, 0x9a, 0xd9, 0x50, 0xfb, 0x52, 0x9c, 0x53, 0x45, 0x68, 0xbb, 0xf8, 0x17, 0x19, 0x40,
	0xad, 0x1b, 0x19, 0xa0, 0xeb, 0xaa, 0xc1, 0xc7, 0xd5, 0x9f, 0x56, 0x86, 0xe7, 0xd0, 0xde, 0xcb,
	0xb3, 0xe8, 0x53, 0x6c, 0x0e, 0xd8, 0x2e, 0x58, 0xd4, 0x25, 0x14, 0xf5, 0xa4, 0xbf, 0x3c, 0xda,
	0x04, 0x18, 0xef, 0xbb, 0x2d, 0x02, 0x8c, 0x7d, 0xf6, 0x36, 0xf4, 0x14, 0x76, 0x12, 0x85, 0x99,
	0x58, 0x64, 0xda, 0xb4, 0x6a, 0x33, 0x46, 0x4a, 0x86, 0x15, 0xea, 0x2b, 0x2e, 0x33, 0x0f, 0x19,
	0x87, 0xea, 0x70, 0xcf, 0xb5, 0x50, 0x70, 0x2a, 0xe7, 0x62, 0xf8, 0x87, 0x1a, 0xc0, 0x89, 0xc8,
	0xb2, 0x99, 0x20, 0x27, 0xf7, 0xa1, 0x5a, 0x96, 0xb1, 0xaa, 0xf4, 0xd9, 0x87, 0xd0, 0x4c, 0x27,
	0x51, 0x22, 0x8a, 0xe2, 0x55, 0x3a, 0x65, 0x39, 0xe7, 0xde, 0x09, 0x01, 0x94, 0x53, 0x34, 0x1a,
	0xc3, 0x90, 0x12, 0xc2, 0x33, 0x58, 0x9d, 0xad, 0x4e, 0xa6, 0x8a, 0x0a, 0x69, 0xf9, 0xdf, 0x2c,
	0xbf, 0xf5, 0xff, 0x56, 0x7e, 0xd9, 0x7b, 0xd0, 0xa6, 0x34, 0x20, 0x68, 0x83, 0x8a, 0x87, 0x6d,
	0x86, 0x98, 0xc0, 0xd6, 0x44, 0xff, 0x43, 0x1a, 0x37, 0xb2, 0xa6, 0x49, 0x1e, 0x20, 0x03, 0x2a,
	0x65, 0x6e, 0x43, 0x7b, 0x2a, 0x42, 0x7d, 0x6a, 0x5a, 0xca, 0x3f, 0x53, 0x11, 0xaa, 0x33, 0xf3,
	0x36, 0xf4, 0x26, 0x7c, 0x36, 0xf3, 0xb2, 0x84, 0x87, 0xe9, 0x99, 0x48, 0x1c, 0x8b, 0x12, 0xba,
	0x8b, 0xc2, 0x53, 0x2d, 0x43, 0xca, 0xa6, 0x74, 0xc3, 0x90, 0xb5, 0xb7, 0x6a, 0xdb, 0x75, 0xb7,
	0x45, 0xe3, 0xb1, 0xbf, 0xf9, 0x11, 0x74, 0x0c, 0xff, 0x98, 0x59, 0x51, 0xbf, 0x26, 0x2b, 0x6a,
	0x66, 0x56, 0xfc, 0xb5, 0x0d, 0xbd, 0x23, 0xda, 0x54, 0x11, 0xc9, 0x5b, 0xd0, 0x9a, 0xf2, 0xb9,
	0x28, 0x32, 0xa3, 0xe1, 0x36, 0x71, 0x38, 0xf6, 0x89, 0x0f, 0xf2, 0x44, 0x1f, 0xd1, 0xea, 0x6a,
	0xd2, 0xd0, 0x91, 0x1c, 0xef, 0xbb, 0xd6, 0x24, 0x4f, 0xd4, 0xf1, 0xdc, 0x86, 0x96, 0x6a, 0x69,
	0x0a, 0x9a, 0xe9, 0xaf, 0xa6, 0xba, 0x5b, 0xa8, 0x71, 0xf7, 0x58, 0x45, 0x5f, 0x8b, 0xa2, 0x07,
	0xaa, 0xd3, 0xc2, 0xbb, 0x4a, 0xa8, 0x19, 0xf0, 0x2e, 0xc0, 0x57, 0xe8, 0x22, 0x93, 0x5e, 0x2e,
	0x91, 0x1c, 0xea, 0x55, 0x91, 0xfa, 0x31, 0x74, 0x75, 0x62, 0xe0, 0xf1, 0x2f, 0xe8, 0x85, 0x5d,
	0x4d, 0x2b, 0x57, 0x27, 0x10, 0xfe, 0x47, 0x46, 0xb2, 0x27, 0x79, 0x92, 0x60, 0xaa, 0x6b, 0xb1,
	0x4f, 0xa1, 0xaa, 0xbb, 0x03, 0x2d, 0xd7, 0x33, 0x7d, 0xf6, 0x7d, 0xe8, 0x27, 0xe2, 0xb5, 0x48,
	0x0a, 0xa4, 0xa2, 0x97, 0xba, 0xdb, 0x53, 0x52, 0x85, 0x4b, 0xd9, 0x07, 0xd0, 0x9b, 0xf1, 0x34,
	0xf3, 0xca, 0x5e, 0xab, 0x7d, 0x4d, 0x27, 0xd8, 0x41, 0xc8, 0x53, 0xdd, 0x7d, 0xdd, 0x81, 0xc1,
	0x05, 0x56, 0xdd, 0xe9, 0x17, 0x92, 0x7b, 0x32, 0xf4, 0xc5, 0x82, 0xb8, 0xa5, 0xe7, 0xf6, 0x4b,
	0xf1, 0x18, 0xa5, 0xd8, 0xd9, 0x9c, 0xc9, 0x85, 0x77, 0x19, 0xac, 0x38, 0x65, 0xed, 0x4c, 0x2e,
	0x5e, 0xac, 0xe2, 0x7f, 0x00, 0x03, 0x5a, 0x4a, 0x90, 0x7b, 0x45, 0x5c, 0xba, 0x6a, 0xc9, 0x28,
	0x3e, 0xcc, 0x8f, 0x75, 0x34, 0xb6, 0xc1, 0x26, 0x1c, 0x91, 0xb9, 0x0e, 0x48, 0x8f, 0x9c, 0xd0,
	0x47, 0x39, 0x32, 0xb9, 0x0e, 0x49, 0x81, 0x24, 0x6a, 0xd6, 0xc8, 0xfe, 0x12, 0x89, 0xbc, 0xac,
	0x91, 0xef, 0x02, 0x23, 0xa4, 0xee, 0xc1, 0x34, 0x76, 0x40, 0x58, 0xb2, 0xa1, 0x5a, 0x30, 0x8d,
	0x7e, 0x0b, 0xba, 0x8a, 0x62, 0x34, 0xce, 0x26, 0x9c, 0xa2, 0x1d, 0x0d, 0xd9, 0x85, 0x35, 0x32,
	0xb8, 0x82, 0x5b, 0x53, 0xa1, 0x42, 0xc5, 0x91, 0x81, 0xfd, 0x91, 0xde, 0xb8, 0xa6, 0x2d, 0x8c,
	0x02, 0xbb, 0x26, 0x0a, 0xbd, 0x72, 0x1e, 0xc5, 0x61, 0x07, 0xda, 0x65, 0xcb, 0xe1, 0xac, 0x5f,
	0x83, 0xb7, 0x8a, 0x6e, 0x83, 0x7d, 0x00, 0x8a, 0xff, 0x54, 0xa5, 0xd8, 0x58, 0x65, 0x6c, 0xb2,
	0x48, 0xa5, 0xa2, 0x3d, 0x2f, 0xfe, 0xe2, 0x0c, 0xc5, 0x91, 0x34, 0xe3, 0x8d, 0xd5, 0x19, 0xc4,
	0x90, 0x6a, 0xc6, 0x45, 0xf1, 0x17, 0x0f, 0xb0, 0x2f, 0x27, 0x22, 0x75, 0x6e, 0x52, 0xe7, 0xaa,
	0x06, 0xec, 0x87, 0xb0, 0x21, 0x16, 0x93, 0x1c, 0xfb, 0x10, 0x93, 0xa9, 0x9d, 0x5b, 0x94, 0x04,
	0xeb, 0x5a, 0x77, 0x68, 0xa8, 0x90, 0xe0, 0x54, 0x55, 0x8b, 0x32, 0x3e, 0xf3, 0xc2, 0x7c, 0xee,
	0x38, 0x8a, 0xe0, 0xa8, 0x90, 0xa1, 0xf0, 0x49, 0x3e, 0xc7, 0x7e, 0x62, 0x21, 0xc3, 0x29, 0x6e,
	0x2a, 0x8a, 0xb1, 0x75, 0xc1, 0x6a, 0xf0, 0x77, 0x75, 0x51, 0x18, 0x68, 0xcd, 0x53, 0x52, 0x8c,
	0x7d, 0xf6, 0x1e, 0xf6, 0xcc, 0x89, 0x8f, 0x7b, 0x31, 0xd0, 0xff, 0x50, 0x68, 0xbb, 0x50, 0x95,
	0xf0, 0x1d, 0xb0, 0xf5, 0xe1, 0x5c, 0x82, 0xff, 0xa9, 0xc0, 0x7d, 0xa5, 0x28, 0xa1, 0x0f, 0xa0,
	0xa9, 0x30, 0xce, 0xbf, 0xd4, 0x9d, 0x6f, 0xb3, 0x74, 0xab, 0x2e, 0x59, 0x78, 0x09, 0x56, 0x70,
	0x57, 0x43, 0xd9, 0x3b, 0xd0, 0x53, 0x20, 0x6d, 0xdf, 0xf9, 0x77, 0x45, 0xf1, 0x95, 0x92, 0x2a,
	0xf4, 0xf0, 0x6f, 0x55, 0x60, 0x57, 0x8d, 0x60, 0x4e, 0x6b, 0xfe, 0xcf, 0xa2, 0x28, 0x54, 0x6c,
	0xa6, 0xd7, 0xa6, 0x3a, 0x00, 0x14, 0x23, 0xa7, 0xb1, 0x07, 0x70, 0x13, 0x91, 0x67, 0x5c, 0x67,
	0xd5, 0x12, 0xaf, 0xee, 0x5e, 0xeb, 0x73, 0xbe, 0x78, 0xc4, 0x55, 0x3a, 0x95, 0x93, 0xf6, 0xe0,
	0x4d, 0x9c, 0x74, 0xb9, 0xfd, 0x5a, 0xce, 0x55, 0xcc, 0xb9, 0x39, 0xe7, 0x8b, 0xc3, 0xd5, 0xd6,
	0xab, 0x34, 0xb1, 0x03, 0x36, 0xf6, 0x90, 0x2b, 0xf1, 0x56, 0x17, 0xd5, 0x41, 0xc0, 0xd3, 0x95,
	0x58, 0x6f, 0x14, 0xd7, 0xd4, 0x06, 0xf5, 0x07, 0xfa, 0x62, 0xba, 0x03, 0x36, 0x56, 0x4a, 0xd5,
	0xc0, 0xcc, 0x44, 0x38, 0xcd, 0x02, 0x4d, 0x57, 0x83, 0x52, 0xfe, 0x98, 0xc4, 0xec, 0x3d, 0x68,
	0x06, 0xe9, 0x85, 0x77, 0xb6, 0xa0, 0x32, 0xd8, 0xb9, 0x7f, 0x73, 0x49, 0x95, 0xcb, 0xcf, 0x9c,
	0x2d, 0xdc, 0x46, 0x90, 0x5e, 0x3c, 0xc2, 0x12, 0xd3, 0x54, 0xe5, 0x88, 0xf8, 0xcb, 0xa8, 0xf8,
	0xaa, 0x14, 0xb9, 0x5a, 0x3b, 0xfc, 0x1c, 0x9a, 0x4a, 0x82, 0x85, 0x21, 0x14, 0xc2, 0xf7, 0x7c,
	0x11, 0xcf, 0xa2, 0x73, 0x5d, 0xcc, 0xc8, 0xe1, 0x96, 0x6b, 0xa3, 0x66, 0x9f, 0x14, 0x1a, 0xfd,
	0x16, 0x74, 0x15, 0x42, 0xd7, 0xba, 0x2a, 0xd1, 0x53, 0x47, 0xc9, 0xa8, 0xca, 0x0d, 0x3d, 0xe8,
	0xaf, 0xae, 0x0d, 0x13, 0xde, 0xfc, 0xc4, 0xd9, 0x42, 0x9b, 0xef, 0x2e, 0xcd, 0x3f, 0x5a, 0x60,
	0xd9, 0x5d, 0x09, 0xca, 0x59, 0x61, 0xbd, 0x6f, 0x8a, 0x1f, 0x2d, 0x86, 0x0f, 0x61, 0xfd, 0x44,
	0x4e, 0x50, 0xb8, 0xc8, 0xc5, 0x4c, 0xe6, 0x3a, 0x6f, 0xee, 0xc2, 0x5a, 0x14, 0x8b, 0x70, 0x35,
	0x2c, 0x7a, 0x1f, 0xa8, 0x30, 0x17, 0x35, 0x1c, 0xc1, 0xc6, 0xd2, 0x06, 0x8a, 0xfe, 0x17, 0x23,
	0x7f, 0xa9, 0xc0, 0xad, 0x71, 0x28, 0xb3, 0x15, 0xf2, 0x3e, 0xe6, 0x09, 0x9f, 0xa7, 0xdf, 0x4c,
	0xe1, 0xce, 0x92, 0x94, 0xab, 0xaa, 0x85, 0x28, 0x48, 0xf8, 0x7e, 0x79, 0xd4, 0x6a, 0xdf, 0xfa,
	0xa4, 0xbd, 0x7d, 0xf9, 0xa4, 0xd5, 0xaf, 0x1e, 0xb4, 0x2b, 0x41, 0x6b, 0x50, 0xaa, 0x99, 0x41,
	0xc3, 0x43, 0xb7, 0xa4, 0x32, 0x0d, 0x53, 0xb7, 0xe6, 0x7e, 0xc9, 0x63, 0x2a, 0xbc, 0xbf, 0x01,
	0xe6, 0x8a, 0x78, 0x76, 0x3e, 0x9a, 0x49, 0x11, 0x66, 0x47, 0x22, 0x4d, 0xf9, 0x54, 0x98, 0xbb,
	0xaa, 0xac, 0xee, 0xea, 0x0d, 0x68, 0xce, 0xd3, 0x29, 0xfa, 0x41, 0x45, 0xb3, 0x31, 0x4f, 0xa7,
	0x63, 0x1f, 0x1b, 0xa4, 0x79, 0x3a, 0xa5, 0x9d, 0x76, 0x5d, 0xfc, 0x3b, 0xfc, 0x04, 0x7a, 0x78,
	0xba, 0x46, 0x81, 0x98, 0x7c, 0x49, 0x3d, 0xea, 0x26, 0x58, 0x7e, 0x9e, 0x70, 0xda, 0x96, 0xbe,
	0x70, 0x17, 0x63, 0xc6, 0x8c, 0x47, 0xb2, 0x86, 0x7a, 0x36, 0x1a, 0x9e, 0x03, 0x2c, 0xfb, 0xfe,
	0xe5, 0xc9, 0x53, 0x2f, 0x1d, 0xfa, 0xe4, 0xed, 0xae, 0x3c, 0xae, 0xdd, 0xbc, 0x7a, 0x5f, 0x30,
	0x9e, 0xa1, 0x6c, 0xa8, 0xc5, 0xd2, 0xd7, 0xcf, 0x41, 0xf8, 0xf7, 0x1b, 0x1f, 0xa6, 0x76, 0x3f,
	0x51, 0x2f, 0x7c, 0xc4, 0x13, 0x03, 0xe8, 0x10, 0x6d, 0xa9, 0xe7, 0x16, 0xfb, 0x06, 0x5b, 0x83,
	0x1e, 0x09, 0xe6, 0x32, 0x9c, 0x92, 0xa8, 0x52, 0x62, 0xd4, 0x13, 0x8b, 0x5d, 0xdd, 0xfd, 0x23,
	0x3d, 0xb1, 0xd1, 0xfc, 0x35, 0xe8, 0x05, 0x39, 0x31, 0x7a, 0x10, 0xe5, 0x31, 0x8f, 0xec, 0x1b,
	0x8c, 0x41, 0x3f, 0xc8, 0xbd, 0x57, 0x92, 0x2b, 0x03, 0x41, 0x6e, 0x57, 0x58, 0x1f, 0x20, 0xc8,
	0x3d, 0x5f, 0xf2, 0x10, 0x31, 0x55, 0x3d, 0x46, 0xf5, 0x97, 0x5c, 0xda, 0x35, 0xfc, 0x44, 0x90,
	0x7b, 0x01, 0x97, 0xbe, 0x9c, 0xf1, 0xc8, 0xae, 0x33, 0x07, 0x36, 0x34, 0x20, 0xc5, 0xec, 0x2d,
	0x35, 0x0d, 0xd6, 0xa1, 0x7e, 0xfc, 0x42, 0xce, 0x23, 0xbb, 0xc9, 0x7a, 0xd0, 0xc6, 0xe6, 0x5c,
	0xf2, 0x30, 0xc8, 0xed, 0x96, 0xd6, 0xf9, 0x32, 0xc8, 0x6d, 0x6b, 0xf7, 0xeb, 0x0a, 0x58, 0x45,
	0xdf, 0xcd, 0x00, 0x9a, 0xc7, 0x32, 0x9c, 0x1e, 0xe6, 0xf6, 0x0d, 0xd6, 0x05, 0xeb, 0x99, 0x0c,
	0xa7, 0x9f, 0xcb, 0x13, 0x61, 0x57, 0x58, 0x1b, 0x1a, 0xcf, 0xe4, 0x7e, 0x2e, 0xed, 0x2a, 0x5a,
	0x43, 0x85, 0x1a, 0xd6, 0x70, 0xf8, 0x38, 0x2a, 0x86, 0x75, 0xdc, 0x2a, 0x6a, 0x97, 0xa2, 0x06,
	0x6e, 0x83, 0xfa, 0x1b, 0x41, 0x96, 0x9b, 0x85, 0x65, 0x1c, 0xdb, 0x2d, 0xdc, 0xd4, 0x2f, 0x65,
	0x38, 0x3d, 0x88, 0xf2, 0x7d, 0xc9, 0x23, 0xdb, 0x62, 0xeb, 0x30, 0x40, 0xb5, 0x29, 0x6c, 0x23,
	0xea, 0x24, 0x90, 0x0f, 0xf9, 0xe3, 0x3c, 0x3a, 0xe4, 0xa1, 0x0d, 0x05, 0xca, 0x14, 0x76, 0x76,
	0x7f, 0x01, 0x5d, 0xf3, 0x56, 0x8b, 0xfb, 0x09, 0xa3, 0x64, 0xce, 0x67, 0xf6, 0x0d, 0xd6, 0x84,
	0x2a, 0x39, 0xb9, 0x03, 0xad, 0x29, 0x76, 0xc5, 0x79, 0xac, 0xf6, 0x82, 0x0e, 0x94, 0xaf, 0x45,
	0x1e, 0xdb, 0xb5, 0xdd, 0x3f, 0x55, 0x8a, 0x1b, 0x55, 0x11, 0x36, 0xcd, 0xa9, 0x65, 0xe0, 0xd7,
	0x61, 0xa0, 0x45, 0x46, 0xe8, 0x97, 0xb8, 0x22, 0xf8, 0x18, 0x5e, 0x2d, 0x2a, 0xc2, 0x49, 0xe1,
	0xd3, 0x32, 0x8a, 0x4b, 0x9d, 0x6d, 0x94, 0x9c, 0x7d, 0x36, 0x8b, 0xbe, 0x12, 0x49, 0x2c, 0xa7,
	0x76, 0xc3, 0x80, 0x9d, 0x8b, 0xd9, 0xcc, 0x6e, 0x1a, 0xb0, 0x8c, 0x2f, 0x12, 0xf1, 0x52, 0xf0,
	0xcc, 0x6e, 0x19, 0x52, 0xbc, 0xcf, 0xf8, 0xf2, 0xb5, 0x48, 0x6c, 0x6b, 0xf7, 0x10, 0x9a, 0xfa,
	0x55, 0x64, 0x00, 0x1d, 0xf5, 0x8a, 0x42, 0x3d, 0xa7, 0x7d, 0x03, 0xf7, 0xaa, 0x05, 0x41, 0x6e,
	0x57, 0x0d, 0x3d, 0x2d, 0xb9, 0x66, 0xe8, 0x5f, 0x49, 0xbb, 0xb5, 0x7b, 0x07, 0xda, 0x65, 0x97,
	0x85, 0xba, 0xa3, 0x53, 0xef, 0xc9, 0x53, 0xf7, 0x68, 0xef, 0xb1, 0x7d, 0x03, 0x7d, 0x78, 0x74,
	0xea, 0x1d, 0xec, 0x3d, 0x39, 0xb0, 0x2b, 0xbb, 0x3b, 0xd0, 0x2e, 0x9b, 0x2b, 0x8c, 0xf5, 0x8b,
	0xcf, 0x0c, 0x64, 0x17, 0x2c, 0x1c, 0x1f, 0x7f, 0x4a, 0xd0, 0xdf, 0x57, 0xa0, 0xbf, 0x7a, 0x2e,
	0x11, 0x30, 0x3a, 0x38, 0xf5, 0x0e, 0xf7, 0x9e, 0xec, 0x2b, 0xc3, 0x38, 0x1a, 0x1d, 0x8e, 0xed,
	0x4a, 0xa1, 0xa2, 0xb9, 0x55, 0x66, 0x43, 0x17, 0x47, 0x47, 0xe3, 0x27, 0x07, 0xf4, 0xe1, 0x1a,
	0x7e, 0x0b, 0x25, 0x7b, 0x4f, 0x68, 0x5c, 0x2f, 0xc6, 0x0f, 0x9f, 0xd3, 0xb8, 0x81, 0xd1, 0x27,
	0xd3, 0xcf, 0xed, 0x66, 0x61, 0xf8, 0xf0, 0xf9, 0x9e, 0x3a, 0x00, 0x38, 0x78, 0xfa, 0xfc, 0xd4,
	0xb6, 0x5e, 0x36, 0xe9, 0x41, 0xff, 0xc1, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x40, 0x21,
	0x1a, 0x12, 0x18, 0x00, 0x00,
}
