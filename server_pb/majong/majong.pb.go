// Code generated by protoc-gen-go. DO NOT EDIT.
// source: majong.proto

package majong

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 杠的类型
type GangType int32

const (
	GangType_gang_angang   GangType = 0
	GangType_gang_minggang GangType = 1
	GangType_gang_bugang   GangType = 2
)

var GangType_name = map[int32]string{
	0: "gang_angang",
	1: "gang_minggang",
	2: "gang_bugang",
}
var GangType_value = map[string]int32{
	"gang_angang":   0,
	"gang_minggang": 1,
	"gang_bugang":   2,
}

func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (GangType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{0}
}

// 胡类型
type HuType int32

const (
	HuType_hu_ganghoupao        HuType = 0
	HuType_hu_qiangganghu       HuType = 1
	HuType_hu_dianpao           HuType = 2
	HuType_hu_gangkai           HuType = 3
	HuType_hu_haidilao          HuType = 4
	HuType_hu_gangshanghaidilao HuType = 5
	HuType_hu_zimo              HuType = 6
	HuType_hu_tianhu            HuType = 7
	HuType_hu_dihu              HuType = 8
	HuType_hu_miaoshouhuichun   HuType = 9
	HuType_hu_renhu             HuType = 10
	HuType_hu_quanqiuren        HuType = 11
	HuType_hu_buqiuren          HuType = 12
	HuType_hu_juezhang          HuType = 13
)

var HuType_name = map[int32]string{
	0:  "hu_ganghoupao",
	1:  "hu_qiangganghu",
	2:  "hu_dianpao",
	3:  "hu_gangkai",
	4:  "hu_haidilao",
	5:  "hu_gangshanghaidilao",
	6:  "hu_zimo",
	7:  "hu_tianhu",
	8:  "hu_dihu",
	9:  "hu_miaoshouhuichun",
	10: "hu_renhu",
	11: "hu_quanqiuren",
	12: "hu_buqiuren",
	13: "hu_juezhang",
}
var HuType_value = map[string]int32{
	"hu_ganghoupao":        0,
	"hu_qiangganghu":       1,
	"hu_dianpao":           2,
	"hu_gangkai":           3,
	"hu_haidilao":          4,
	"hu_gangshanghaidilao": 5,
	"hu_zimo":              6,
	"hu_tianhu":            7,
	"hu_dihu":              8,
	"hu_miaoshouhuichun":   9,
	"hu_renhu":             10,
	"hu_quanqiuren":        11,
	"hu_buqiuren":          12,
	"hu_juezhang":          13,
}

func (x HuType) String() string {
	return proto.EnumName(HuType_name, int32(x))
}
func (HuType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{1}
}

// 玩家行牌状态
type XingPaiState int32

const (
	XingPaiState_normal  XingPaiState = 0
	XingPaiState_hu      XingPaiState = 1
	XingPaiState_give_up XingPaiState = 2
)

var XingPaiState_name = map[int32]string{
	0: "normal",
	1: "hu",
	2: "give_up",
}
var XingPaiState_value = map[string]int32{
	"normal":  0,
	"hu":      1,
	"give_up": 2,
}

func (x XingPaiState) String() string {
	return proto.EnumName(XingPaiState_name, int32(x))
}
func (XingPaiState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{2}
}

// SettleType 结算类型
type SettleType int32

const (
	SettleType_settle_angang    SettleType = 0
	SettleType_settle_minggang  SettleType = 1
	SettleType_settle_bugang    SettleType = 2
	SettleType_settle_dianpao   SettleType = 3
	SettleType_settle_zimo      SettleType = 4
	SettleType_settle_flowerpig SettleType = 5
	SettleType_settle_yell      SettleType = 6
	SettleType_settle_taxrebeat SettleType = 7
	SettleType_settle_calldiver SettleType = 8
)

var SettleType_name = map[int32]string{
	0: "settle_angang",
	1: "settle_minggang",
	2: "settle_bugang",
	3: "settle_dianpao",
	4: "settle_zimo",
	5: "settle_flowerpig",
	6: "settle_yell",
	7: "settle_taxrebeat",
	8: "settle_calldiver",
}
var SettleType_value = map[string]int32{
	"settle_angang":    0,
	"settle_minggang":  1,
	"settle_bugang":    2,
	"settle_dianpao":   3,
	"settle_zimo":      4,
	"settle_flowerpig": 5,
	"settle_yell":      6,
	"settle_taxrebeat": 7,
	"settle_calldiver": 8,
}

func (x SettleType) String() string {
	return proto.EnumName(SettleType_name, int32(x))
}
func (SettleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{3}
}

// 玩家操作
type Action int32

const (
	Action_action_peng Action = 0
	// action_zimo         = 1;  // 自摸
	// action_dianpao      = 2;  // 点炮
	Action_action_hu Action = 2
	// action_qiangganghu  = 3;  // 抢杠胡
	Action_action_gang Action = 3
	// action_bugang       = 4;  // 补杠
	// action_minggang     = 5;  // 明杠
	// action_angang       = 6;  // 暗杠
	Action_action_chi Action = 4
	Action_action_qi  Action = 7
)

var Action_name = map[int32]string{
	0: "action_peng",
	2: "action_hu",
	3: "action_gang",
	4: "action_chi",
	7: "action_qi",
}
var Action_value = map[string]int32{
	"action_peng": 0,
	"action_hu":   2,
	"action_gang": 3,
	"action_chi":  4,
	"action_qi":   7,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{4}
}

// MopaiType 摸牌类型
type MopaiType int32

const (
	MopaiType_MT_NORMAL MopaiType = 0
	MopaiType_MT_GANG   MopaiType = 1
)

var MopaiType_name = map[int32]string{
	0: "MT_NORMAL",
	1: "MT_GANG",
}
var MopaiType_value = map[string]int32{
	"MT_NORMAL": 0,
	"MT_GANG":   1,
}

func (x MopaiType) String() string {
	return proto.EnumName(MopaiType_name, int32(x))
}
func (MopaiType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{5}
}

// ZixunType 自询类型
type ZixunType int32

const (
	ZixunType_ZXT_NORMAL ZixunType = 0
	ZixunType_ZXT_PENG   ZixunType = 1
	ZixunType_ZXT_CHI    ZixunType = 2
)

var ZixunType_name = map[int32]string{
	0: "ZXT_NORMAL",
	1: "ZXT_PENG",
	2: "ZXT_CHI",
}
var ZixunType_value = map[string]int32{
	"ZXT_NORMAL": 0,
	"ZXT_PENG":   1,
	"ZXT_CHI":    2,
}

func (x ZixunType) String() string {
	return proto.EnumName(ZixunType_name, int32(x))
}
func (ZixunType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{6}
}

// 麻将组类型
type CardsGroupType int32

const (
	CardsGroupType_CGT_HAND     CardsGroupType = 0
	CardsGroupType_CGT_CHI      CardsGroupType = 1
	CardsGroupType_CGT_PENG     CardsGroupType = 2
	CardsGroupType_CGT_MINGGANG CardsGroupType = 3
	CardsGroupType_CGT_ANGANG   CardsGroupType = 4
	CardsGroupType_CGT_BUGANG   CardsGroupType = 5
	CardsGroupType_CGT_HU       CardsGroupType = 6
	CardsGroupType_CGT_HUA      CardsGroupType = 7
	CardsGroupType_CGT_OUT      CardsGroupType = 8
)

var CardsGroupType_name = map[int32]string{
	0: "CGT_HAND",
	1: "CGT_CHI",
	2: "CGT_PENG",
	3: "CGT_MINGGANG",
	4: "CGT_ANGANG",
	5: "CGT_BUGANG",
	6: "CGT_HU",
	7: "CGT_HUA",
	8: "CGT_OUT",
}
var CardsGroupType_value = map[string]int32{
	"CGT_HAND":     0,
	"CGT_CHI":      1,
	"CGT_PENG":     2,
	"CGT_MINGGANG": 3,
	"CGT_ANGANG":   4,
	"CGT_BUGANG":   5,
	"CGT_HU":       6,
	"CGT_HUA":      7,
	"CGT_OUT":      8,
}

func (x CardsGroupType) String() string {
	return proto.EnumName(CardsGroupType_name, int32(x))
}
func (CardsGroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{7}
}

// 杠牌数据
type GangCard struct {
	Card                 *Card    `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	Type                 GangType `protobuf:"varint,2,opt,name=type,proto3,enum=majong.GangType" json:"type,omitempty"`
	SrcPlayer            uint64   `protobuf:"varint,3,opt,name=src_player,json=srcPlayer,proto3" json:"src_player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GangCard) Reset()         { *m = GangCard{} }
func (m *GangCard) String() string { return proto.CompactTextString(m) }
func (*GangCard) ProtoMessage()    {}
func (*GangCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{0}
}
func (m *GangCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GangCard.Unmarshal(m, b)
}
func (m *GangCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GangCard.Marshal(b, m, deterministic)
}
func (dst *GangCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GangCard.Merge(dst, src)
}
func (m *GangCard) XXX_Size() int {
	return xxx_messageInfo_GangCard.Size(m)
}
func (m *GangCard) XXX_DiscardUnknown() {
	xxx_messageInfo_GangCard.DiscardUnknown(m)
}

var xxx_messageInfo_GangCard proto.InternalMessageInfo

func (m *GangCard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *GangCard) GetType() GangType {
	if m != nil {
		return m.Type
	}
	return GangType_gang_angang
}

func (m *GangCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

// 碰牌数据
type PengCard struct {
	Card                 *Card    `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	SrcPlayer            uint64   `protobuf:"varint,2,opt,name=src_player,json=srcPlayer,proto3" json:"src_player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PengCard) Reset()         { *m = PengCard{} }
func (m *PengCard) String() string { return proto.CompactTextString(m) }
func (*PengCard) ProtoMessage()    {}
func (*PengCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{1}
}
func (m *PengCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PengCard.Unmarshal(m, b)
}
func (m *PengCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PengCard.Marshal(b, m, deterministic)
}
func (dst *PengCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PengCard.Merge(dst, src)
}
func (m *PengCard) XXX_Size() int {
	return xxx_messageInfo_PengCard.Size(m)
}
func (m *PengCard) XXX_DiscardUnknown() {
	xxx_messageInfo_PengCard.DiscardUnknown(m)
}

var xxx_messageInfo_PengCard proto.InternalMessageInfo

func (m *PengCard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *PengCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

// 玩家胡牌对应的fanType
type HuFanType struct {
	HuCard               *Card    `protobuf:"bytes,1,opt,name=hu_card,json=huCard,proto3" json:"hu_card,omitempty"`
	GenCount             uint64   `protobuf:"varint,2,opt,name=gen_count,json=genCount,proto3" json:"gen_count,omitempty"`
	HuaCount             uint64   `protobuf:"varint,3,opt,name=hua_count,json=huaCount,proto3" json:"hua_count,omitempty"`
	FanTypes             []int64  `protobuf:"varint,4,rep,packed,name=fan_types,json=fanTypes,proto3" json:"fan_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HuFanType) Reset()         { *m = HuFanType{} }
func (m *HuFanType) String() string { return proto.CompactTextString(m) }
func (*HuFanType) ProtoMessage()    {}
func (*HuFanType) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{2}
}
func (m *HuFanType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuFanType.Unmarshal(m, b)
}
func (m *HuFanType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuFanType.Marshal(b, m, deterministic)
}
func (dst *HuFanType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuFanType.Merge(dst, src)
}
func (m *HuFanType) XXX_Size() int {
	return xxx_messageInfo_HuFanType.Size(m)
}
func (m *HuFanType) XXX_DiscardUnknown() {
	xxx_messageInfo_HuFanType.DiscardUnknown(m)
}

var xxx_messageInfo_HuFanType proto.InternalMessageInfo

func (m *HuFanType) GetHuCard() *Card {
	if m != nil {
		return m.HuCard
	}
	return nil
}

func (m *HuFanType) GetGenCount() uint64 {
	if m != nil {
		return m.GenCount
	}
	return 0
}

func (m *HuFanType) GetHuaCount() uint64 {
	if m != nil {
		return m.HuaCount
	}
	return 0
}

func (m *HuFanType) GetFanTypes() []int64 {
	if m != nil {
		return m.FanTypes
	}
	return nil
}

// 胡牌数据
type HuCard struct {
	Card                 *Card    `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	SrcPlayer            uint64   `protobuf:"varint,2,opt,name=src_player,json=srcPlayer,proto3" json:"src_player,omitempty"`
	Type                 HuType   `protobuf:"varint,3,opt,name=type,proto3,enum=majong.HuType" json:"type,omitempty"`
	IsReal               bool     `protobuf:"varint,4,opt,name=is_real,json=isReal,proto3" json:"is_real,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HuCard) Reset()         { *m = HuCard{} }
func (m *HuCard) String() string { return proto.CompactTextString(m) }
func (*HuCard) ProtoMessage()    {}
func (*HuCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{3}
}
func (m *HuCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuCard.Unmarshal(m, b)
}
func (m *HuCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuCard.Marshal(b, m, deterministic)
}
func (dst *HuCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuCard.Merge(dst, src)
}
func (m *HuCard) XXX_Size() int {
	return xxx_messageInfo_HuCard.Size(m)
}
func (m *HuCard) XXX_DiscardUnknown() {
	xxx_messageInfo_HuCard.DiscardUnknown(m)
}

var xxx_messageInfo_HuCard proto.InternalMessageInfo

func (m *HuCard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *HuCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

func (m *HuCard) GetType() HuType {
	if m != nil {
		return m.Type
	}
	return HuType_hu_ganghoupao
}

func (m *HuCard) GetIsReal() bool {
	if m != nil {
		return m.IsReal
	}
	return false
}

// 吃牌数据
type ChiCard struct {
	Card                 *Card    `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	OprCard              *Card    `protobuf:"bytes,2,opt,name=opr_card,json=oprCard,proto3" json:"opr_card,omitempty"`
	SrcPlayer            uint64   `protobuf:"varint,3,opt,name=src_player,json=srcPlayer,proto3" json:"src_player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChiCard) Reset()         { *m = ChiCard{} }
func (m *ChiCard) String() string { return proto.CompactTextString(m) }
func (*ChiCard) ProtoMessage()    {}
func (*ChiCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{4}
}
func (m *ChiCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChiCard.Unmarshal(m, b)
}
func (m *ChiCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChiCard.Marshal(b, m, deterministic)
}
func (dst *ChiCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChiCard.Merge(dst, src)
}
func (m *ChiCard) XXX_Size() int {
	return xxx_messageInfo_ChiCard.Size(m)
}
func (m *ChiCard) XXX_DiscardUnknown() {
	xxx_messageInfo_ChiCard.DiscardUnknown(m)
}

var xxx_messageInfo_ChiCard proto.InternalMessageInfo

func (m *ChiCard) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *ChiCard) GetOprCard() *Card {
	if m != nil {
		return m.OprCard
	}
	return nil
}

func (m *ChiCard) GetSrcPlayer() uint64 {
	if m != nil {
		return m.SrcPlayer
	}
	return 0
}

// TingCardInfo 听牌信息
type TingCardInfo struct {
	TingCard             uint32   `protobuf:"varint,1,opt,name=ting_card,json=tingCard,proto3" json:"ting_card,omitempty"`
	Times                uint32   `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TingCardInfo) Reset()         { *m = TingCardInfo{} }
func (m *TingCardInfo) String() string { return proto.CompactTextString(m) }
func (*TingCardInfo) ProtoMessage()    {}
func (*TingCardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{5}
}
func (m *TingCardInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TingCardInfo.Unmarshal(m, b)
}
func (m *TingCardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TingCardInfo.Marshal(b, m, deterministic)
}
func (dst *TingCardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TingCardInfo.Merge(dst, src)
}
func (m *TingCardInfo) XXX_Size() int {
	return xxx_messageInfo_TingCardInfo.Size(m)
}
func (m *TingCardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TingCardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TingCardInfo proto.InternalMessageInfo

func (m *TingCardInfo) GetTingCard() uint32 {
	if m != nil {
		return m.TingCard
	}
	return 0
}

func (m *TingCardInfo) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// CanTingCardInfo 出本张牌可以听
type CanTingCardInfo struct {
	OutCard              uint32          `protobuf:"varint,1,opt,name=out_card,json=outCard,proto3" json:"out_card,omitempty"`
	TingCardInfo         []*TingCardInfo `protobuf:"bytes,2,rep,name=ting_card_info,json=tingCardInfo,proto3" json:"ting_card_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CanTingCardInfo) Reset()         { *m = CanTingCardInfo{} }
func (m *CanTingCardInfo) String() string { return proto.CompactTextString(m) }
func (*CanTingCardInfo) ProtoMessage()    {}
func (*CanTingCardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{6}
}
func (m *CanTingCardInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CanTingCardInfo.Unmarshal(m, b)
}
func (m *CanTingCardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CanTingCardInfo.Marshal(b, m, deterministic)
}
func (dst *CanTingCardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanTingCardInfo.Merge(dst, src)
}
func (m *CanTingCardInfo) XXX_Size() int {
	return xxx_messageInfo_CanTingCardInfo.Size(m)
}
func (m *CanTingCardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CanTingCardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CanTingCardInfo proto.InternalMessageInfo

func (m *CanTingCardInfo) GetOutCard() uint32 {
	if m != nil {
		return m.OutCard
	}
	return 0
}

func (m *CanTingCardInfo) GetTingCardInfo() []*TingCardInfo {
	if m != nil {
		return m.TingCardInfo
	}
	return nil
}

// ZiXunRecord 记录
type ZiXunRecord struct {
	EnableAngangCards    []uint32           `protobuf:"varint,1,rep,packed,name=enable_angang_cards,json=enableAngangCards,proto3" json:"enable_angang_cards,omitempty"`
	EnableBugangCards    []uint32           `protobuf:"varint,2,rep,packed,name=enable_bugang_cards,json=enableBugangCards,proto3" json:"enable_bugang_cards,omitempty"`
	EnableZimo           bool               `protobuf:"varint,3,opt,name=enable_zimo,json=enableZimo,proto3" json:"enable_zimo,omitempty"`
	EnableChupaiCards    []uint32           `protobuf:"varint,4,rep,packed,name=enable_chupai_cards,json=enableChupaiCards,proto3" json:"enable_chupai_cards,omitempty"`
	CanTingCardInfo      []*CanTingCardInfo `protobuf:"bytes,5,rep,name=can_ting_card_info,json=canTingCardInfo,proto3" json:"can_ting_card_info,omitempty"`
	EnableQi             bool               `protobuf:"varint,6,opt,name=enable_qi,json=enableQi,proto3" json:"enable_qi,omitempty"`
	HuType               HuType             `protobuf:"varint,7,opt,name=hu_type,json=huType,proto3,enum=majong.HuType" json:"hu_type,omitempty"`
	EnableTing           bool               `protobuf:"varint,8,opt,name=enable_ting,json=enableTing,proto3" json:"enable_ting,omitempty"`
	TingType             TingType           `protobuf:"varint,9,opt,name=ting_type,json=tingType,proto3,enum=majong.TingType" json:"ting_type,omitempty"`
	HuFanType            *HuFanType         `protobuf:"bytes,10,opt,name=hu_fan_type,json=huFanType,proto3" json:"hu_fan_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ZiXunRecord) Reset()         { *m = ZiXunRecord{} }
func (m *ZiXunRecord) String() string { return proto.CompactTextString(m) }
func (*ZiXunRecord) ProtoMessage()    {}
func (*ZiXunRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{7}
}
func (m *ZiXunRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZiXunRecord.Unmarshal(m, b)
}
func (m *ZiXunRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZiXunRecord.Marshal(b, m, deterministic)
}
func (dst *ZiXunRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZiXunRecord.Merge(dst, src)
}
func (m *ZiXunRecord) XXX_Size() int {
	return xxx_messageInfo_ZiXunRecord.Size(m)
}
func (m *ZiXunRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ZiXunRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ZiXunRecord proto.InternalMessageInfo

func (m *ZiXunRecord) GetEnableAngangCards() []uint32 {
	if m != nil {
		return m.EnableAngangCards
	}
	return nil
}

func (m *ZiXunRecord) GetEnableBugangCards() []uint32 {
	if m != nil {
		return m.EnableBugangCards
	}
	return nil
}

func (m *ZiXunRecord) GetEnableZimo() bool {
	if m != nil {
		return m.EnableZimo
	}
	return false
}

func (m *ZiXunRecord) GetEnableChupaiCards() []uint32 {
	if m != nil {
		return m.EnableChupaiCards
	}
	return nil
}

func (m *ZiXunRecord) GetCanTingCardInfo() []*CanTingCardInfo {
	if m != nil {
		return m.CanTingCardInfo
	}
	return nil
}

func (m *ZiXunRecord) GetEnableQi() bool {
	if m != nil {
		return m.EnableQi
	}
	return false
}

func (m *ZiXunRecord) GetHuType() HuType {
	if m != nil {
		return m.HuType
	}
	return HuType_hu_ganghoupao
}

func (m *ZiXunRecord) GetEnableTing() bool {
	if m != nil {
		return m.EnableTing
	}
	return false
}

func (m *ZiXunRecord) GetTingType() TingType {
	if m != nil {
		return m.TingType
	}
	return TingType_TT_NORMAL_TING
}

func (m *ZiXunRecord) GetHuFanType() *HuFanType {
	if m != nil {
		return m.HuFanType
	}
	return nil
}

// Player 玩家数据
type Player struct {
	PalyerId             uint64            `protobuf:"varint,1,opt,name=palyer_id,json=palyerId,proto3" json:"palyer_id,omitempty"`
	HandCards            []*Card           `protobuf:"bytes,2,rep,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`
	OutCards             []*Card           `protobuf:"bytes,3,rep,name=out_cards,json=outCards,proto3" json:"out_cards,omitempty"`
	ChiCards             []*ChiCard        `protobuf:"bytes,4,rep,name=chi_cards,json=chiCards,proto3" json:"chi_cards,omitempty"`
	PengCards            []*PengCard       `protobuf:"bytes,5,rep,name=peng_cards,json=pengCards,proto3" json:"peng_cards,omitempty"`
	HuCards              []*HuCard         `protobuf:"bytes,6,rep,name=hu_cards,json=huCards,proto3" json:"hu_cards,omitempty"`
	GangCards            []*GangCard       `protobuf:"bytes,7,rep,name=gang_cards,json=gangCards,proto3" json:"gang_cards,omitempty"`
	PossibleActions      []Action          `protobuf:"varint,8,rep,packed,name=possible_actions,json=possibleActions,proto3,enum=majong.Action" json:"possible_actions,omitempty"`
	HasSelected          bool              `protobuf:"varint,9,opt,name=has_selected,json=hasSelected,proto3" json:"has_selected,omitempty"`
	SelectedAction       Action            `protobuf:"varint,10,opt,name=selected_action,json=selectedAction,proto3,enum=majong.Action" json:"selected_action,omitempty"`
	HasDingque           bool              `protobuf:"varint,11,opt,name=has_dingque,json=hasDingque,proto3" json:"has_dingque,omitempty"`
	DingqueColor         CardColor         `protobuf:"varint,12,opt,name=dingque_color,json=dingqueColor,proto3,enum=majong.CardColor" json:"dingque_color,omitempty"`
	HuansanzhangSure     bool              `protobuf:"varint,13,opt,name=huansanzhang_sure,json=huansanzhangSure,proto3" json:"huansanzhang_sure,omitempty"`
	HuansanzhangCards    []*Card           `protobuf:"bytes,14,rep,name=huansanzhang_cards,json=huansanzhangCards,proto3" json:"huansanzhang_cards,omitempty"`
	MopaiCount           int32             `protobuf:"varint,15,opt,name=mopai_count,json=mopaiCount,proto3" json:"mopai_count,omitempty"`
	ZixunRecord          *ZiXunRecord      `protobuf:"bytes,16,opt,name=zixun_record,json=zixunRecord,proto3" json:"zixun_record,omitempty"`
	XpState              XingPaiState      `protobuf:"varint,17,opt,name=xp_state,json=xpState,proto3,enum=majong.XingPaiState" json:"xp_state,omitempty"`
	IsQuit               bool              `protobuf:"varint,18,opt,name=is_quit,json=isQuit,proto3" json:"is_quit,omitempty"`
	TingCardInfo         []*TingCardInfo   `protobuf:"bytes,19,rep,name=ting_card_info,json=tingCardInfo,proto3" json:"ting_card_info,omitempty"`
	HuaCards             []*Card           `protobuf:"bytes,20,rep,name=hua_cards,json=huaCards,proto3" json:"hua_cards,omitempty"`
	TingStateInfo        *TingStateInfo    `protobuf:"bytes,21,opt,name=ting_state_info,json=tingStateInfo,proto3" json:"ting_state_info,omitempty"`
	ZixunCount           int32             `protobuf:"varint,22,opt,name=zixun_count,json=zixunCount,proto3" json:"zixun_count,omitempty"`
	EnbleChiCards        []uint32          `protobuf:"varint,23,rep,packed,name=enble_chi_cards,json=enbleChiCards,proto3" json:"enble_chi_cards,omitempty"`
	DesignChiCards       []*Card           `protobuf:"bytes,24,rep,name=design_chi_cards,json=designChiCards,proto3" json:"design_chi_cards,omitempty"`
	MaxCardValue         uint32            `protobuf:"varint,25,opt,name=max_card_value,json=maxCardValue,proto3" json:"max_card_value,omitempty"`
	CardsGroup           []*CardsGroup     `protobuf:"bytes,26,rep,name=cards_group,json=cardsGroup,proto3" json:"cards_group,omitempty"`
	SelectedTing         bool              `protobuf:"varint,27,opt,name=selected_ting,json=selectedTing,proto3" json:"selected_ting,omitempty"`
	ChupaiCount          int32             `protobuf:"varint,28,opt,name=chupai_count,json=chupaiCount,proto3" json:"chupai_count,omitempty"`
	Properties           map[string][]byte `protobuf:"bytes,256,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{8}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (dst *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(dst, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetPalyerId() uint64 {
	if m != nil {
		return m.PalyerId
	}
	return 0
}

func (m *Player) GetHandCards() []*Card {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *Player) GetOutCards() []*Card {
	if m != nil {
		return m.OutCards
	}
	return nil
}

func (m *Player) GetChiCards() []*ChiCard {
	if m != nil {
		return m.ChiCards
	}
	return nil
}

func (m *Player) GetPengCards() []*PengCard {
	if m != nil {
		return m.PengCards
	}
	return nil
}

func (m *Player) GetHuCards() []*HuCard {
	if m != nil {
		return m.HuCards
	}
	return nil
}

func (m *Player) GetGangCards() []*GangCard {
	if m != nil {
		return m.GangCards
	}
	return nil
}

func (m *Player) GetPossibleActions() []Action {
	if m != nil {
		return m.PossibleActions
	}
	return nil
}

func (m *Player) GetHasSelected() bool {
	if m != nil {
		return m.HasSelected
	}
	return false
}

func (m *Player) GetSelectedAction() Action {
	if m != nil {
		return m.SelectedAction
	}
	return Action_action_peng
}

func (m *Player) GetHasDingque() bool {
	if m != nil {
		return m.HasDingque
	}
	return false
}

func (m *Player) GetDingqueColor() CardColor {
	if m != nil {
		return m.DingqueColor
	}
	return CardColor_ColorWan
}

func (m *Player) GetHuansanzhangSure() bool {
	if m != nil {
		return m.HuansanzhangSure
	}
	return false
}

func (m *Player) GetHuansanzhangCards() []*Card {
	if m != nil {
		return m.HuansanzhangCards
	}
	return nil
}

func (m *Player) GetMopaiCount() int32 {
	if m != nil {
		return m.MopaiCount
	}
	return 0
}

func (m *Player) GetZixunRecord() *ZiXunRecord {
	if m != nil {
		return m.ZixunRecord
	}
	return nil
}

func (m *Player) GetXpState() XingPaiState {
	if m != nil {
		return m.XpState
	}
	return XingPaiState_normal
}

func (m *Player) GetIsQuit() bool {
	if m != nil {
		return m.IsQuit
	}
	return false
}

func (m *Player) GetTingCardInfo() []*TingCardInfo {
	if m != nil {
		return m.TingCardInfo
	}
	return nil
}

func (m *Player) GetHuaCards() []*Card {
	if m != nil {
		return m.HuaCards
	}
	return nil
}

func (m *Player) GetTingStateInfo() *TingStateInfo {
	if m != nil {
		return m.TingStateInfo
	}
	return nil
}

func (m *Player) GetZixunCount() int32 {
	if m != nil {
		return m.ZixunCount
	}
	return 0
}

func (m *Player) GetEnbleChiCards() []uint32 {
	if m != nil {
		return m.EnbleChiCards
	}
	return nil
}

func (m *Player) GetDesignChiCards() []*Card {
	if m != nil {
		return m.DesignChiCards
	}
	return nil
}

func (m *Player) GetMaxCardValue() uint32 {
	if m != nil {
		return m.MaxCardValue
	}
	return 0
}

func (m *Player) GetCardsGroup() []*CardsGroup {
	if m != nil {
		return m.CardsGroup
	}
	return nil
}

func (m *Player) GetSelectedTing() bool {
	if m != nil {
		return m.SelectedTing
	}
	return false
}

func (m *Player) GetChupaiCount() int32 {
	if m != nil {
		return m.ChupaiCount
	}
	return 0
}

func (m *Player) GetProperties() map[string][]byte {
	if m != nil {
		return m.Properties
	}
	return nil
}

type TingStateInfo struct {
	IsTing               bool     `protobuf:"varint,1,opt,name=is_ting,json=isTing,proto3" json:"is_ting,omitempty"`
	IsTianting           bool     `protobuf:"varint,2,opt,name=is_tianting,json=isTianting,proto3" json:"is_tianting,omitempty"`
	BaotingyifaCount     int32    `protobuf:"varint,3,opt,name=baotingyifa_count,json=baotingyifaCount,proto3" json:"baotingyifa_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TingStateInfo) Reset()         { *m = TingStateInfo{} }
func (m *TingStateInfo) String() string { return proto.CompactTextString(m) }
func (*TingStateInfo) ProtoMessage()    {}
func (*TingStateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{9}
}
func (m *TingStateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TingStateInfo.Unmarshal(m, b)
}
func (m *TingStateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TingStateInfo.Marshal(b, m, deterministic)
}
func (dst *TingStateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TingStateInfo.Merge(dst, src)
}
func (m *TingStateInfo) XXX_Size() int {
	return xxx_messageInfo_TingStateInfo.Size(m)
}
func (m *TingStateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TingStateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TingStateInfo proto.InternalMessageInfo

func (m *TingStateInfo) GetIsTing() bool {
	if m != nil {
		return m.IsTing
	}
	return false
}

func (m *TingStateInfo) GetIsTianting() bool {
	if m != nil {
		return m.IsTianting
	}
	return false
}

func (m *TingStateInfo) GetBaotingyifaCount() int32 {
	if m != nil {
		return m.BaotingyifaCount
	}
	return 0
}

// AutoEvent 自动事件
type AutoEvent struct {
	EventId              EventID  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3,enum=majong.EventID" json:"event_id,omitempty"`
	EventContext         []byte   `protobuf:"bytes,2,opt,name=event_context,json=eventContext,proto3" json:"event_context,omitempty"`
	WaitTime             uint32   `protobuf:"varint,3,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutoEvent) Reset()         { *m = AutoEvent{} }
func (m *AutoEvent) String() string { return proto.CompactTextString(m) }
func (*AutoEvent) ProtoMessage()    {}
func (*AutoEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{10}
}
func (m *AutoEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutoEvent.Unmarshal(m, b)
}
func (m *AutoEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutoEvent.Marshal(b, m, deterministic)
}
func (dst *AutoEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoEvent.Merge(dst, src)
}
func (m *AutoEvent) XXX_Size() int {
	return xxx_messageInfo_AutoEvent.Size(m)
}
func (m *AutoEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AutoEvent proto.InternalMessageInfo

func (m *AutoEvent) GetEventId() EventID {
	if m != nil {
		return m.EventId
	}
	return EventID_event_invalid
}

func (m *AutoEvent) GetEventContext() []byte {
	if m != nil {
		return m.EventContext
	}
	return nil
}

func (m *AutoEvent) GetWaitTime() uint32 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

// SettleInfo 结算信息
type SettleInfo struct {
	Id                   uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Scores               map[uint64]int64 `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SettleType           SettleType       `protobuf:"varint,3,opt,name=settle_type,json=settleType,proto3,enum=majong.SettleType" json:"settle_type,omitempty"`
	HuType               HuType           `protobuf:"varint,4,opt,name=hu_type,json=huType,proto3,enum=majong.HuType" json:"hu_type,omitempty"`
	CardType             []int64          `protobuf:"varint,5,rep,packed,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	CardValue            uint32           `protobuf:"varint,6,opt,name=card_value,json=cardValue,proto3" json:"card_value,omitempty"`
	GenCount             uint32           `protobuf:"varint,7,opt,name=gen_count,json=genCount,proto3" json:"gen_count,omitempty"`
	HuaCount             uint32           `protobuf:"varint,8,opt,name=hua_count,json=huaCount,proto3" json:"hua_count,omitempty"`
	CallTransfer         bool             `protobuf:"varint,9,opt,name=call_transfer,json=callTransfer,proto3" json:"call_transfer,omitempty"`
	GroupId              []uint64         `protobuf:"varint,10,rep,packed,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	HuPlayers            []uint64         `protobuf:"varint,11,rep,packed,name=hu_players,json=huPlayers,proto3" json:"hu_players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SettleInfo) Reset()         { *m = SettleInfo{} }
func (m *SettleInfo) String() string { return proto.CompactTextString(m) }
func (*SettleInfo) ProtoMessage()    {}
func (*SettleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{11}
}
func (m *SettleInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettleInfo.Unmarshal(m, b)
}
func (m *SettleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettleInfo.Marshal(b, m, deterministic)
}
func (dst *SettleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleInfo.Merge(dst, src)
}
func (m *SettleInfo) XXX_Size() int {
	return xxx_messageInfo_SettleInfo.Size(m)
}
func (m *SettleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SettleInfo proto.InternalMessageInfo

func (m *SettleInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SettleInfo) GetScores() map[uint64]int64 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *SettleInfo) GetSettleType() SettleType {
	if m != nil {
		return m.SettleType
	}
	return SettleType_settle_angang
}

func (m *SettleInfo) GetHuType() HuType {
	if m != nil {
		return m.HuType
	}
	return HuType_hu_ganghoupao
}

func (m *SettleInfo) GetCardType() []int64 {
	if m != nil {
		return m.CardType
	}
	return nil
}

func (m *SettleInfo) GetCardValue() uint32 {
	if m != nil {
		return m.CardValue
	}
	return 0
}

func (m *SettleInfo) GetGenCount() uint32 {
	if m != nil {
		return m.GenCount
	}
	return 0
}

func (m *SettleInfo) GetHuaCount() uint32 {
	if m != nil {
		return m.HuaCount
	}
	return 0
}

func (m *SettleInfo) GetCallTransfer() bool {
	if m != nil {
		return m.CallTransfer
	}
	return false
}

func (m *SettleInfo) GetGroupId() []uint64 {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *SettleInfo) GetHuPlayers() []uint64 {
	if m != nil {
		return m.HuPlayers
	}
	return nil
}

// MajongContext 麻将现场
type MajongContext struct {
	GameId          int32         `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	CurState        StateID       `protobuf:"varint,2,opt,name=cur_state,json=curState,proto3,enum=majong.StateID" json:"cur_state,omitempty"`
	Players         []*Player     `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	ActivePlayer    uint64        `protobuf:"varint,4,opt,name=active_player,json=activePlayer,proto3" json:"active_player,omitempty"`
	WallCards       []*Card       `protobuf:"bytes,5,rep,name=wall_cards,json=wallCards,proto3" json:"wall_cards,omitempty"`
	SettleInfos     []*SettleInfo `protobuf:"bytes,6,rep,name=settle_infos,json=settleInfos,proto3" json:"settle_infos,omitempty"`
	CurrentSettleId uint64        `protobuf:"varint,7,opt,name=current_settleId,json=currentSettleId,proto3" json:"current_settleId,omitempty"`
	RevertSettles   []uint64      `protobuf:"varint,8,rep,packed,name=revert_settles,json=revertSettles,proto3" json:"revert_settles,omitempty"`
	LastOutCard     *Card         `protobuf:"bytes,9,opt,name=last_out_card,json=lastOutCard,proto3" json:"last_out_card,omitempty"`
	ZhuangjiaIndex  uint32        `protobuf:"varint,10,opt,name=zhuangjia_index,json=zhuangjiaIndex,proto3" json:"zhuangjia_index,omitempty"`
	// bool fix_zhuangjia_index = 11;  // 是否固定庄家位置
	LastHuPlayers        []uint64            `protobuf:"varint,12,rep,packed,name=last_hu_players,json=lastHuPlayers,proto3" json:"last_hu_players,omitempty"`
	LastPengPlayer       uint64              `protobuf:"varint,13,opt,name=last_peng_player,json=lastPengPlayer,proto3" json:"last_peng_player,omitempty"`
	LastGangPlayer       uint64              `protobuf:"varint,14,opt,name=last_gang_player,json=lastGangPlayer,proto3" json:"last_gang_player,omitempty"`
	LastChupaiPlayer     uint64              `protobuf:"varint,15,opt,name=last_chupai_player,json=lastChupaiPlayer,proto3" json:"last_chupai_player,omitempty"`
	MopaiPlayer          uint64              `protobuf:"varint,16,opt,name=mopai_player,json=mopaiPlayer,proto3" json:"mopai_player,omitempty"`
	LastMopaiPlayer      uint64              `protobuf:"varint,17,opt,name=last_mopai_player,json=lastMopaiPlayer,proto3" json:"last_mopai_player,omitempty"`
	LastMopaiCard        *Card               `protobuf:"bytes,18,opt,name=last_mopai_card,json=lastMopaiCard,proto3" json:"last_mopai_card,omitempty"`
	GangCard             *Card               `protobuf:"bytes,19,opt,name=gang_card,json=gangCard,proto3" json:"gang_card,omitempty"`
	MopaiType            MopaiType           `protobuf:"varint,20,opt,name=mopai_type,json=mopaiType,proto3,enum=majong.MopaiType" json:"mopai_type,omitempty"`
	ZixunType            ZixunType           `protobuf:"varint,21,opt,name=zixun_type,json=zixunType,proto3,enum=majong.ZixunType" json:"zixun_type,omitempty"`
	Dices                []uint32            `protobuf:"varint,22,rep,packed,name=dices,proto3" json:"dices,omitempty"`
	ExcutedHuansanzhang  bool                `protobuf:"varint,23,opt,name=excuted_huansanzhang,json=excutedHuansanzhang,proto3" json:"excuted_huansanzhang,omitempty"`
	CardTotalNum         uint32              `protobuf:"varint,24,opt,name=card_total_num,json=cardTotalNum,proto3" json:"card_total_num,omitempty"`
	LastChiPlayer        uint64              `protobuf:"varint,25,opt,name=last_chi_player,json=lastChiPlayer,proto3" json:"last_chi_player,omitempty"`
	NextBankerSeat       uint32              `protobuf:"varint,26,opt,name=next_banker_seat,json=nextBankerSeat,proto3" json:"next_banker_seat,omitempty"`
	FixNextBankerSeat    bool                `protobuf:"varint,27,opt,name=fix_next_banker_seat,json=fixNextBankerSeat,proto3" json:"fix_next_banker_seat,omitempty"`
	XingpaiOptionId      uint32              `protobuf:"varint,251,opt,name=xingpai_option_id,json=xingpaiOptionId,proto3" json:"xingpai_option_id,omitempty"`
	CardtypeOptionId     uint32              `protobuf:"varint,252,opt,name=cardtype_option_id,json=cardtypeOptionId,proto3" json:"cardtype_option_id,omitempty"`
	SettleOptionId       uint32              `protobuf:"varint,253,opt,name=settle_option_id,json=settleOptionId,proto3" json:"settle_option_id,omitempty"`
	Option               *MajongCommonOption `protobuf:"bytes,254,opt,name=option,proto3" json:"option,omitempty"`
	MajongOption         []byte              `protobuf:"bytes,255,opt,name=majong_option,json=majongOption,proto3" json:"majong_option,omitempty"`
	TempData             *TempDatas          `protobuf:"bytes,256,opt,name=TempData,proto3" json:"TempData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MajongContext) Reset()         { *m = MajongContext{} }
func (m *MajongContext) String() string { return proto.CompactTextString(m) }
func (*MajongContext) ProtoMessage()    {}
func (*MajongContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{12}
}
func (m *MajongContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MajongContext.Unmarshal(m, b)
}
func (m *MajongContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MajongContext.Marshal(b, m, deterministic)
}
func (dst *MajongContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MajongContext.Merge(dst, src)
}
func (m *MajongContext) XXX_Size() int {
	return xxx_messageInfo_MajongContext.Size(m)
}
func (m *MajongContext) XXX_DiscardUnknown() {
	xxx_messageInfo_MajongContext.DiscardUnknown(m)
}

var xxx_messageInfo_MajongContext proto.InternalMessageInfo

func (m *MajongContext) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MajongContext) GetCurState() StateID {
	if m != nil {
		return m.CurState
	}
	return StateID_state_init
}

func (m *MajongContext) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *MajongContext) GetActivePlayer() uint64 {
	if m != nil {
		return m.ActivePlayer
	}
	return 0
}

func (m *MajongContext) GetWallCards() []*Card {
	if m != nil {
		return m.WallCards
	}
	return nil
}

func (m *MajongContext) GetSettleInfos() []*SettleInfo {
	if m != nil {
		return m.SettleInfos
	}
	return nil
}

func (m *MajongContext) GetCurrentSettleId() uint64 {
	if m != nil {
		return m.CurrentSettleId
	}
	return 0
}

func (m *MajongContext) GetRevertSettles() []uint64 {
	if m != nil {
		return m.RevertSettles
	}
	return nil
}

func (m *MajongContext) GetLastOutCard() *Card {
	if m != nil {
		return m.LastOutCard
	}
	return nil
}

func (m *MajongContext) GetZhuangjiaIndex() uint32 {
	if m != nil {
		return m.ZhuangjiaIndex
	}
	return 0
}

func (m *MajongContext) GetLastHuPlayers() []uint64 {
	if m != nil {
		return m.LastHuPlayers
	}
	return nil
}

func (m *MajongContext) GetLastPengPlayer() uint64 {
	if m != nil {
		return m.LastPengPlayer
	}
	return 0
}

func (m *MajongContext) GetLastGangPlayer() uint64 {
	if m != nil {
		return m.LastGangPlayer
	}
	return 0
}

func (m *MajongContext) GetLastChupaiPlayer() uint64 {
	if m != nil {
		return m.LastChupaiPlayer
	}
	return 0
}

func (m *MajongContext) GetMopaiPlayer() uint64 {
	if m != nil {
		return m.MopaiPlayer
	}
	return 0
}

func (m *MajongContext) GetLastMopaiPlayer() uint64 {
	if m != nil {
		return m.LastMopaiPlayer
	}
	return 0
}

func (m *MajongContext) GetLastMopaiCard() *Card {
	if m != nil {
		return m.LastMopaiCard
	}
	return nil
}

func (m *MajongContext) GetGangCard() *Card {
	if m != nil {
		return m.GangCard
	}
	return nil
}

func (m *MajongContext) GetMopaiType() MopaiType {
	if m != nil {
		return m.MopaiType
	}
	return MopaiType_MT_NORMAL
}

func (m *MajongContext) GetZixunType() ZixunType {
	if m != nil {
		return m.ZixunType
	}
	return ZixunType_ZXT_NORMAL
}

func (m *MajongContext) GetDices() []uint32 {
	if m != nil {
		return m.Dices
	}
	return nil
}

func (m *MajongContext) GetExcutedHuansanzhang() bool {
	if m != nil {
		return m.ExcutedHuansanzhang
	}
	return false
}

func (m *MajongContext) GetCardTotalNum() uint32 {
	if m != nil {
		return m.CardTotalNum
	}
	return 0
}

func (m *MajongContext) GetLastChiPlayer() uint64 {
	if m != nil {
		return m.LastChiPlayer
	}
	return 0
}

func (m *MajongContext) GetNextBankerSeat() uint32 {
	if m != nil {
		return m.NextBankerSeat
	}
	return 0
}

func (m *MajongContext) GetFixNextBankerSeat() bool {
	if m != nil {
		return m.FixNextBankerSeat
	}
	return false
}

func (m *MajongContext) GetXingpaiOptionId() uint32 {
	if m != nil {
		return m.XingpaiOptionId
	}
	return 0
}

func (m *MajongContext) GetCardtypeOptionId() uint32 {
	if m != nil {
		return m.CardtypeOptionId
	}
	return 0
}

func (m *MajongContext) GetSettleOptionId() uint32 {
	if m != nil {
		return m.SettleOptionId
	}
	return 0
}

func (m *MajongContext) GetOption() *MajongCommonOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *MajongContext) GetMajongOption() []byte {
	if m != nil {
		return m.MajongOption
	}
	return nil
}

func (m *MajongContext) GetTempData() *TempDatas {
	if m != nil {
		return m.TempData
	}
	return nil
}

// MajongCommonOption 麻将通用玩法选项
type MajongCommonOption struct {
	MaxCartoonTime             uint32          `protobuf:"varint,1,opt,name=max_cartoon_time,json=maxCartoonTime,proto3" json:"max_cartoon_time,omitempty"`
	MaxFapaiCartoonTime        uint32          `protobuf:"varint,2,opt,name=max_fapai_cartoon_time,json=maxFapaiCartoonTime,proto3" json:"max_fapai_cartoon_time,omitempty"`
	MaxHuansanzhangCartoonTime uint32          `protobuf:"varint,3,opt,name=max_huansanzhang_cartoon_time,json=maxHuansanzhangCartoonTime,proto3" json:"max_huansanzhang_cartoon_time,omitempty"`
	HasHuansanzhang            bool            `protobuf:"varint,4,opt,name=has_huansanzhang,json=hasHuansanzhang,proto3" json:"has_huansanzhang,omitempty"`
	Cards                      string          `protobuf:"bytes,5,opt,name=cards,proto3" json:"cards,omitempty"`
	WallcardsLength            uint32          `protobuf:"varint,6,opt,name=wallcards_length,json=wallcardsLength,proto3" json:"wallcards_length,omitempty"`
	HszFx                      *Huansanzhangfx `protobuf:"bytes,7,opt,name=hsz_fx,json=hszFx,proto3" json:"hsz_fx,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}        `json:"-"`
	XXX_unrecognized           []byte          `json:"-"`
	XXX_sizecache              int32           `json:"-"`
}

func (m *MajongCommonOption) Reset()         { *m = MajongCommonOption{} }
func (m *MajongCommonOption) String() string { return proto.CompactTextString(m) }
func (*MajongCommonOption) ProtoMessage()    {}
func (*MajongCommonOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{13}
}
func (m *MajongCommonOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MajongCommonOption.Unmarshal(m, b)
}
func (m *MajongCommonOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MajongCommonOption.Marshal(b, m, deterministic)
}
func (dst *MajongCommonOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MajongCommonOption.Merge(dst, src)
}
func (m *MajongCommonOption) XXX_Size() int {
	return xxx_messageInfo_MajongCommonOption.Size(m)
}
func (m *MajongCommonOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MajongCommonOption.DiscardUnknown(m)
}

var xxx_messageInfo_MajongCommonOption proto.InternalMessageInfo

func (m *MajongCommonOption) GetMaxCartoonTime() uint32 {
	if m != nil {
		return m.MaxCartoonTime
	}
	return 0
}

func (m *MajongCommonOption) GetMaxFapaiCartoonTime() uint32 {
	if m != nil {
		return m.MaxFapaiCartoonTime
	}
	return 0
}

func (m *MajongCommonOption) GetMaxHuansanzhangCartoonTime() uint32 {
	if m != nil {
		return m.MaxHuansanzhangCartoonTime
	}
	return 0
}

func (m *MajongCommonOption) GetHasHuansanzhang() bool {
	if m != nil {
		return m.HasHuansanzhang
	}
	return false
}

func (m *MajongCommonOption) GetCards() string {
	if m != nil {
		return m.Cards
	}
	return ""
}

func (m *MajongCommonOption) GetWallcardsLength() uint32 {
	if m != nil {
		return m.WallcardsLength
	}
	return 0
}

func (m *MajongCommonOption) GetHszFx() *Huansanzhangfx {
	if m != nil {
		return m.HszFx
	}
	return nil
}

type Huansanzhangfx struct {
	NeedDeployFx         bool     `protobuf:"varint,1,opt,name=need_deploy_fx,json=needDeployFx,proto3" json:"need_deploy_fx,omitempty"`
	HuansanzhangFx       int32    `protobuf:"varint,2,opt,name=huansanzhang_fx,json=huansanzhangFx,proto3" json:"huansanzhang_fx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Huansanzhangfx) Reset()         { *m = Huansanzhangfx{} }
func (m *Huansanzhangfx) String() string { return proto.CompactTextString(m) }
func (*Huansanzhangfx) ProtoMessage()    {}
func (*Huansanzhangfx) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{14}
}
func (m *Huansanzhangfx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Huansanzhangfx.Unmarshal(m, b)
}
func (m *Huansanzhangfx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Huansanzhangfx.Marshal(b, m, deterministic)
}
func (dst *Huansanzhangfx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Huansanzhangfx.Merge(dst, src)
}
func (m *Huansanzhangfx) XXX_Size() int {
	return xxx_messageInfo_Huansanzhangfx.Size(m)
}
func (m *Huansanzhangfx) XXX_DiscardUnknown() {
	xxx_messageInfo_Huansanzhangfx.DiscardUnknown(m)
}

var xxx_messageInfo_Huansanzhangfx proto.InternalMessageInfo

func (m *Huansanzhangfx) GetNeedDeployFx() bool {
	if m != nil {
		return m.NeedDeployFx
	}
	return false
}

func (m *Huansanzhangfx) GetHuansanzhangFx() int32 {
	if m != nil {
		return m.HuansanzhangFx
	}
	return 0
}

// SichuanxueliuOption 四川血流麻将玩法
type SichuanxueliuOption struct {
	OpenHuansanzhang     bool     `protobuf:"varint,1,opt,name=open_huansanzhang,json=openHuansanzhang,proto3" json:"open_huansanzhang,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SichuanxueliuOption) Reset()         { *m = SichuanxueliuOption{} }
func (m *SichuanxueliuOption) String() string { return proto.CompactTextString(m) }
func (*SichuanxueliuOption) ProtoMessage()    {}
func (*SichuanxueliuOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{15}
}
func (m *SichuanxueliuOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SichuanxueliuOption.Unmarshal(m, b)
}
func (m *SichuanxueliuOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SichuanxueliuOption.Marshal(b, m, deterministic)
}
func (dst *SichuanxueliuOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SichuanxueliuOption.Merge(dst, src)
}
func (m *SichuanxueliuOption) XXX_Size() int {
	return xxx_messageInfo_SichuanxueliuOption.Size(m)
}
func (m *SichuanxueliuOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SichuanxueliuOption.DiscardUnknown(m)
}

var xxx_messageInfo_SichuanxueliuOption proto.InternalMessageInfo

func (m *SichuanxueliuOption) GetOpenHuansanzhang() bool {
	if m != nil {
		return m.OpenHuansanzhang
	}
	return false
}

// SichuanxuezhanOption 四川血流麻将玩法
type SichuanxuezhanOption struct {
	OpenHuansanzhang     bool     `protobuf:"varint,1,opt,name=open_huansanzhang,json=openHuansanzhang,proto3" json:"open_huansanzhang,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SichuanxuezhanOption) Reset()         { *m = SichuanxuezhanOption{} }
func (m *SichuanxuezhanOption) String() string { return proto.CompactTextString(m) }
func (*SichuanxuezhanOption) ProtoMessage()    {}
func (*SichuanxuezhanOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{16}
}
func (m *SichuanxuezhanOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SichuanxuezhanOption.Unmarshal(m, b)
}
func (m *SichuanxuezhanOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SichuanxuezhanOption.Marshal(b, m, deterministic)
}
func (dst *SichuanxuezhanOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SichuanxuezhanOption.Merge(dst, src)
}
func (m *SichuanxuezhanOption) XXX_Size() int {
	return xxx_messageInfo_SichuanxuezhanOption.Size(m)
}
func (m *SichuanxuezhanOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SichuanxuezhanOption.DiscardUnknown(m)
}

var xxx_messageInfo_SichuanxuezhanOption proto.InternalMessageInfo

func (m *SichuanxuezhanOption) GetOpenHuansanzhang() bool {
	if m != nil {
		return m.OpenHuansanzhang
	}
	return false
}

// InitMajongContextParams 麻将现场初始化参数
type InitMajongContextParams struct {
	GameId               int32               `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Players              []uint64            `protobuf:"varint,2,rep,packed,name=players,proto3" json:"players,omitempty"`
	Option               *MajongCommonOption `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
	MajongOption         []byte              `protobuf:"bytes,4,opt,name=majong_option,json=majongOption,proto3" json:"majong_option,omitempty"`
	ZhuangIndex          uint32              `protobuf:"varint,5,opt,name=zhuang_index,json=zhuangIndex,proto3" json:"zhuang_index,omitempty"`
	FixZhuangIndex       bool                `protobuf:"varint,6,opt,name=fix_zhuang_index,json=fixZhuangIndex,proto3" json:"fix_zhuang_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *InitMajongContextParams) Reset()         { *m = InitMajongContextParams{} }
func (m *InitMajongContextParams) String() string { return proto.CompactTextString(m) }
func (*InitMajongContextParams) ProtoMessage()    {}
func (*InitMajongContextParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{17}
}
func (m *InitMajongContextParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitMajongContextParams.Unmarshal(m, b)
}
func (m *InitMajongContextParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitMajongContextParams.Marshal(b, m, deterministic)
}
func (dst *InitMajongContextParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitMajongContextParams.Merge(dst, src)
}
func (m *InitMajongContextParams) XXX_Size() int {
	return xxx_messageInfo_InitMajongContextParams.Size(m)
}
func (m *InitMajongContextParams) XXX_DiscardUnknown() {
	xxx_messageInfo_InitMajongContextParams.DiscardUnknown(m)
}

var xxx_messageInfo_InitMajongContextParams proto.InternalMessageInfo

func (m *InitMajongContextParams) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *InitMajongContextParams) GetPlayers() []uint64 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *InitMajongContextParams) GetOption() *MajongCommonOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *InitMajongContextParams) GetMajongOption() []byte {
	if m != nil {
		return m.MajongOption
	}
	return nil
}

func (m *InitMajongContextParams) GetZhuangIndex() uint32 {
	if m != nil {
		return m.ZhuangIndex
	}
	return 0
}

func (m *InitMajongContextParams) GetFixZhuangIndex() bool {
	if m != nil {
		return m.FixZhuangIndex
	}
	return false
}

// ReplyClientMessage 回复给客户端的消息
type ReplyClientMessage struct {
	Players              []uint64 `protobuf:"varint,1,rep,packed,name=players,proto3" json:"players,omitempty"`
	MsgId                int32    `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Msg                  []byte   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyClientMessage) Reset()         { *m = ReplyClientMessage{} }
func (m *ReplyClientMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyClientMessage) ProtoMessage()    {}
func (*ReplyClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{18}
}
func (m *ReplyClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyClientMessage.Unmarshal(m, b)
}
func (m *ReplyClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyClientMessage.Marshal(b, m, deterministic)
}
func (dst *ReplyClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyClientMessage.Merge(dst, src)
}
func (m *ReplyClientMessage) XXX_Size() int {
	return xxx_messageInfo_ReplyClientMessage.Size(m)
}
func (m *ReplyClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyClientMessage proto.InternalMessageInfo

func (m *ReplyClientMessage) GetPlayers() []uint64 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ReplyClientMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyClientMessage) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

// TimeCheckInfo 时间检测信息
type TimeCheckInfo struct {
	Duration             uint64   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeCheckInfo) Reset()         { *m = TimeCheckInfo{} }
func (m *TimeCheckInfo) String() string { return proto.CompactTextString(m) }
func (*TimeCheckInfo) ProtoMessage()    {}
func (*TimeCheckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{19}
}
func (m *TimeCheckInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeCheckInfo.Unmarshal(m, b)
}
func (m *TimeCheckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeCheckInfo.Marshal(b, m, deterministic)
}
func (dst *TimeCheckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeCheckInfo.Merge(dst, src)
}
func (m *TimeCheckInfo) XXX_Size() int {
	return xxx_messageInfo_TimeCheckInfo.Size(m)
}
func (m *TimeCheckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeCheckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TimeCheckInfo proto.InternalMessageInfo

func (m *TimeCheckInfo) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TimeCheckInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 麻将组
type CardsGroup struct {
	Cards                []uint32       `protobuf:"varint,1,rep,packed,name=cards,proto3" json:"cards,omitempty"`
	Type                 CardsGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=majong.CardsGroupType" json:"type,omitempty"`
	Pid                  uint64         `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	IsReal               bool           `protobuf:"varint,4,opt,name=is_real,json=isReal,proto3" json:"is_real,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CardsGroup) Reset()         { *m = CardsGroup{} }
func (m *CardsGroup) String() string { return proto.CompactTextString(m) }
func (*CardsGroup) ProtoMessage()    {}
func (*CardsGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{20}
}
func (m *CardsGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CardsGroup.Unmarshal(m, b)
}
func (m *CardsGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CardsGroup.Marshal(b, m, deterministic)
}
func (dst *CardsGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardsGroup.Merge(dst, src)
}
func (m *CardsGroup) XXX_Size() int {
	return xxx_messageInfo_CardsGroup.Size(m)
}
func (m *CardsGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CardsGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CardsGroup proto.InternalMessageInfo

func (m *CardsGroup) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *CardsGroup) GetType() CardsGroupType {
	if m != nil {
		return m.Type
	}
	return CardsGroupType_CGT_HAND
}

func (m *CardsGroup) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CardsGroup) GetIsReal() bool {
	if m != nil {
		return m.IsReal
	}
	return false
}

// TempDatas 临时数据存储
type TempDatas struct {
	CartoonReqPlayerIDs  []uint64 `protobuf:"varint,1,rep,packed,name=CartoonReqPlayerIDs,proto3" json:"CartoonReqPlayerIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TempDatas) Reset()         { *m = TempDatas{} }
func (m *TempDatas) String() string { return proto.CompactTextString(m) }
func (*TempDatas) ProtoMessage()    {}
func (*TempDatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_majong_16b437aeabfddbe0, []int{21}
}
func (m *TempDatas) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempDatas.Unmarshal(m, b)
}
func (m *TempDatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempDatas.Marshal(b, m, deterministic)
}
func (dst *TempDatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempDatas.Merge(dst, src)
}
func (m *TempDatas) XXX_Size() int {
	return xxx_messageInfo_TempDatas.Size(m)
}
func (m *TempDatas) XXX_DiscardUnknown() {
	xxx_messageInfo_TempDatas.DiscardUnknown(m)
}

var xxx_messageInfo_TempDatas proto.InternalMessageInfo

func (m *TempDatas) GetCartoonReqPlayerIDs() []uint64 {
	if m != nil {
		return m.CartoonReqPlayerIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*GangCard)(nil), "majong.GangCard")
	proto.RegisterType((*PengCard)(nil), "majong.PengCard")
	proto.RegisterType((*HuFanType)(nil), "majong.HuFanType")
	proto.RegisterType((*HuCard)(nil), "majong.HuCard")
	proto.RegisterType((*ChiCard)(nil), "majong.ChiCard")
	proto.RegisterType((*TingCardInfo)(nil), "majong.TingCardInfo")
	proto.RegisterType((*CanTingCardInfo)(nil), "majong.CanTingCardInfo")
	proto.RegisterType((*ZiXunRecord)(nil), "majong.ZiXunRecord")
	proto.RegisterType((*Player)(nil), "majong.Player")
	proto.RegisterMapType((map[string][]byte)(nil), "majong.Player.PropertiesEntry")
	proto.RegisterType((*TingStateInfo)(nil), "majong.TingStateInfo")
	proto.RegisterType((*AutoEvent)(nil), "majong.AutoEvent")
	proto.RegisterType((*SettleInfo)(nil), "majong.SettleInfo")
	proto.RegisterMapType((map[uint64]int64)(nil), "majong.SettleInfo.ScoresEntry")
	proto.RegisterType((*MajongContext)(nil), "majong.MajongContext")
	proto.RegisterType((*MajongCommonOption)(nil), "majong.MajongCommonOption")
	proto.RegisterType((*Huansanzhangfx)(nil), "majong.Huansanzhangfx")
	proto.RegisterType((*SichuanxueliuOption)(nil), "majong.SichuanxueliuOption")
	proto.RegisterType((*SichuanxuezhanOption)(nil), "majong.SichuanxuezhanOption")
	proto.RegisterType((*InitMajongContextParams)(nil), "majong.InitMajongContextParams")
	proto.RegisterType((*ReplyClientMessage)(nil), "majong.ReplyClientMessage")
	proto.RegisterType((*TimeCheckInfo)(nil), "majong.TimeCheckInfo")
	proto.RegisterType((*CardsGroup)(nil), "majong.CardsGroup")
	proto.RegisterType((*TempDatas)(nil), "majong.TempDatas")
	proto.RegisterEnum("majong.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("majong.HuType", HuType_name, HuType_value)
	proto.RegisterEnum("majong.XingPaiState", XingPaiState_name, XingPaiState_value)
	proto.RegisterEnum("majong.SettleType", SettleType_name, SettleType_value)
	proto.RegisterEnum("majong.Action", Action_name, Action_value)
	proto.RegisterEnum("majong.MopaiType", MopaiType_name, MopaiType_value)
	proto.RegisterEnum("majong.ZixunType", ZixunType_name, ZixunType_value)
	proto.RegisterEnum("majong.CardsGroupType", CardsGroupType_name, CardsGroupType_value)
}

func init() { proto.RegisterFile("majong.proto", fileDescriptor_majong_16b437aeabfddbe0) }

var fileDescriptor_majong_16b437aeabfddbe0 = []byte{
	// 2787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x59, 0x5b, 0x73, 0x1c, 0x47,
	0xf5, 0xff, 0xef, 0x7d, 0xb6, 0xf7, 0x36, 0x1a, 0xc9, 0xf2, 0x46, 0xf9, 0x07, 0xc2, 0x26, 0x10,
	0x47, 0x24, 0x0e, 0x38, 0x60, 0x48, 0xa8, 0x94, 0x4b, 0x5e, 0xd9, 0x92, 0x8a, 0x48, 0x56, 0x46,
	0x32, 0xb8, 0xfc, 0x32, 0x35, 0xda, 0x1d, 0xed, 0x8e, 0xbd, 0x3b, 0xb3, 0x9a, 0x8b, 0xbd, 0xd2,
	0x13, 0x4f, 0x54, 0xf1, 0xc8, 0x27, 0xa2, 0x8a, 0x77, 0x1e, 0xf8, 0x2a, 0x3c, 0x51, 0x05, 0x24,
	0x9c, 0x4b, 0xf7, 0x4c, 0x8f, 0xb4, 0xa6, 0x5c, 0x14, 0x4f, 0xda, 0x73, 0xce, 0xaf, 0x4f, 0x77,
	0x9f, 0xfb, 0xb4, 0x44, 0x7b, 0xee, 0xbe, 0x08, 0x83, 0xc9, 0xdd, 0x45, 0x14, 0x26, 0xa1, 0x55,
	0x67, 0x6a, 0xab, 0x3d, 0x0a, 0xe7, 0xf3, 0x30, 0x60, 0xee, 0x56, 0x3b, 0x4e, 0xdc, 0xc4, 0x8b,
	0x15, 0xe5, 0xbd, 0xf2, 0x82, 0x44, 0x52, 0x83, 0x0b, 0x61, 0xec, 0xb9, 0xc1, 0x64, 0xe8, 0x46,
	0x63, 0xeb, 0x7d, 0x51, 0x1d, 0xc1, 0xdf, 0x7e, 0xe9, 0xfd, 0xd2, 0x9d, 0xd6, 0xbd, 0xf6, 0x5d,
	0xa9, 0x1a, 0x65, 0x36, 0x49, 0xac, 0x0f, 0x45, 0x35, 0xb9, 0x5c, 0x78, 0xfd, 0x32, 0x20, 0xba,
	0xf7, 0x4c, 0x85, 0x40, 0x0d, 0xa7, 0xc0, 0xb7, 0x49, 0x6a, 0xbd, 0x27, 0x44, 0x1c, 0x8d, 0x9c,
	0xc5, 0xcc, 0xbd, 0xf4, 0xa2, 0x7e, 0x05, 0xb0, 0x55, 0xbb, 0x09, 0x9c, 0x63, 0x62, 0x0c, 0x7e,
	0x2d, 0x8c, 0x63, 0xef, 0xad, 0xb7, 0x2c, 0x2a, 0x2b, 0x5f, 0x57, 0xf6, 0x87, 0x92, 0x68, 0xee,
	0xa7, 0x8f, 0xdd, 0x00, 0xf7, 0xb7, 0x7e, 0x28, 0x1a, 0xd3, 0xd4, 0x79, 0xa3, 0xc6, 0xfa, 0x34,
	0xa5, 0x5d, 0xdf, 0x15, 0xcd, 0x89, 0x17, 0x38, 0xa3, 0x30, 0x0d, 0x12, 0xa9, 0xd2, 0x00, 0xc6,
	0x10, 0x69, 0x14, 0x4e, 0x53, 0x57, 0x0a, 0xf9, 0xf0, 0x06, 0x30, 0x32, 0xe1, 0xb9, 0x1b, 0x38,
	0x78, 0xcd, 0xb8, 0x5f, 0x7d, 0xbf, 0x72, 0xa7, 0x62, 0x1b, 0xe7, 0xbc, 0x79, 0x3c, 0xf8, 0x7d,
	0x49, 0xd4, 0xf7, 0xd3, 0xff, 0xc9, 0xbd, 0xac, 0x81, 0xb4, 0x74, 0x85, 0x2c, 0xdd, 0x55, 0x0a,
	0xf6, 0x53, 0xcd, 0xce, 0xb7, 0x45, 0xc3, 0x8f, 0x9d, 0xc8, 0x73, 0x67, 0x70, 0x94, 0xd2, 0x1d,
	0xc3, 0xae, 0xfb, 0xb1, 0x0d, 0xd4, 0x20, 0x16, 0x8d, 0xe1, 0xd4, 0x7f, 0xcb, 0x83, 0x7c, 0x24,
	0x8c, 0x70, 0x11, 0xb1, 0xd1, 0xca, 0x2b, 0x50, 0x0d, 0x90, 0x0e, 0x6f, 0x9e, 0xf8, 0x86, 0x5b,
	0x77, 0x44, 0xfb, 0xd4, 0x67, 0xb7, 0x1e, 0x04, 0xe7, 0x21, 0x9a, 0x2a, 0x01, 0x3a, 0xf7, 0x46,
	0xc7, 0x36, 0x12, 0x09, 0xb0, 0x36, 0x44, 0x2d, 0xf1, 0xe7, 0x60, 0xc3, 0x32, 0x09, 0x98, 0x18,
	0x4c, 0x45, 0x6f, 0x08, 0xc6, 0xd4, 0xb5, 0xbc, 0x03, 0xa7, 0x4b, 0x13, 0x5d, 0x49, 0x03, 0x68,
	0xd2, 0xf1, 0xa5, 0xe8, 0x66, 0x1b, 0x38, 0x3e, 0x80, 0x41, 0x59, 0x05, 0x8e, 0xbf, 0xa1, 0x8e,
	0xaf, 0x2b, 0xb2, 0xdb, 0x89, 0x46, 0x0d, 0xfe, 0x52, 0x11, 0xad, 0xe7, 0xfe, 0xb3, 0x34, 0xb0,
	0xbd, 0x51, 0x08, 0xba, 0xee, 0x8a, 0x75, 0x2f, 0x70, 0xcf, 0x66, 0x9e, 0x03, 0xa1, 0xec, 0x4a,
	0xa5, 0x31, 0xec, 0x58, 0x81, 0x1d, 0xd7, 0x58, 0xb4, 0x43, 0x12, 0x54, 0x11, 0x6b, 0xf8, 0xb3,
	0x54, 0xc3, 0x97, 0x75, 0xfc, 0xc3, 0x34, 0xc7, 0x7f, 0x5f, 0xb4, 0x24, 0xfe, 0xca, 0x9f, 0x87,
	0x64, 0x3c, 0xc3, 0x16, 0xcc, 0x7a, 0x0e, 0x1c, 0x4d, 0xe1, 0x68, 0x9a, 0x2e, 0x5c, 0x5f, 0x2a,
	0xac, 0xea, 0x0a, 0x87, 0x24, 0x61, 0x85, 0xbb, 0xc2, 0x1a, 0x61, 0x20, 0x16, 0x0d, 0x50, 0x23,
	0x03, 0xdc, 0xce, 0xfd, 0x57, 0x30, 0xa6, 0xdd, 0x1b, 0x5d, 0xb3, 0x2e, 0xf8, 0x48, 0xee, 0x7a,
	0xe1, 0xf7, 0xeb, 0x74, 0x28, 0x83, 0x19, 0xdf, 0xf8, 0x10, 0x18, 0x98, 0x4c, 0x14, 0x85, 0x8d,
	0x95, 0x51, 0x08, 0xe9, 0x44, 0x59, 0x97, 0x5f, 0x0e, 0x8f, 0xd3, 0x37, 0xf4, 0xcb, 0xe1, 0x76,
	0xd6, 0xa7, 0x32, 0x14, 0x48, 0x57, 0xb3, 0x58, 0x3b, 0x10, 0x40, 0xda, 0x28, 0x38, 0x48, 0xdf,
	0x4f, 0x45, 0x0b, 0x36, 0x56, 0x79, 0xd6, 0x17, 0x14, 0x94, 0x6b, 0xf9, 0xe6, 0x32, 0xdb, 0x6d,
	0xc8, 0x53, 0xf9, 0x73, 0xf0, 0x9d, 0x10, 0x75, 0x99, 0x39, 0x70, 0xa7, 0x85, 0x3b, 0x83, 0x5f,
	0x8e, 0xcf, 0x21, 0x03, 0xf9, 0xcb, 0x8c, 0x83, 0xb1, 0xf5, 0x63, 0x21, 0xa6, 0x6e, 0x30, 0xd6,
	0xdc, 0x75, 0x3d, 0xdc, 0x9b, 0x28, 0x67, 0x1b, 0x7f, 0x2c, 0x9a, 0x2a, 0xf6, 0x62, 0x70, 0xd9,
	0x4d, 0xac, 0x21, 0x43, 0x31, 0xb6, 0x3e, 0x11, 0xcd, 0xd1, 0x54, 0x77, 0x5a, 0xeb, 0x5e, 0x2f,
	0x83, 0x72, 0x2a, 0xda, 0xc6, 0x68, 0x2a, 0x9d, 0xf7, 0x99, 0x10, 0x0b, 0x2f, 0x0b, 0x1a, 0x76,
	0x5a, 0x66, 0x10, 0x55, 0x1b, 0xed, 0xe6, 0xc2, 0x53, 0xe1, 0xf3, 0xb1, 0x30, 0x64, 0x5d, 0x8b,
	0xc1, 0x4d, 0x08, 0xd7, 0x7c, 0xc1, 0x59, 0xca, 0xa5, 0x8d, 0x74, 0x6b, 0x01, 0xd9, 0x28, 0xea,
	0x56, 0xa5, 0xde, 0x6e, 0xe6, 0xa1, 0xf9, 0x85, 0x30, 0x17, 0x61, 0x1c, 0xfb, 0x14, 0xfc, 0xa3,
	0xc4, 0x0f, 0x83, 0x18, 0x5c, 0x58, 0xd1, 0xfd, 0xbd, 0x43, 0x6c, 0xbb, 0xa7, 0x70, 0x4c, 0xc7,
	0xd6, 0x0f, 0x44, 0x7b, 0xea, 0xc6, 0x4e, 0xec, 0xcd, 0xbc, 0x51, 0xe2, 0x8d, 0xc9, 0xb5, 0x86,
	0xdd, 0x02, 0xde, 0x89, 0x64, 0x59, 0xbf, 0x10, 0x3d, 0x25, 0x96, 0xda, 0xc9, 0x9f, 0x37, 0x95,
	0x77, 0x15, 0x8c, 0x69, 0x0c, 0x2a, 0xd4, 0x3d, 0x86, 0xa0, 0xb8, 0x48, 0xbd, 0x7e, 0x8b, 0x83,
	0x0a, 0x58, 0xbb, 0xcc, 0xb1, 0xee, 0x8b, 0x8e, 0x14, 0x42, 0xad, 0x9e, 0x85, 0x51, 0xbf, 0x4d,
	0x7a, 0xd7, 0x74, 0x0f, 0x0d, 0x51, 0x60, 0xb7, 0x25, 0x8e, 0x28, 0x08, 0x81, 0x35, 0x28, 0xe7,
	0x41, 0xec, 0x06, 0x57, 0x53, 0x34, 0x54, 0x9c, 0x46, 0x5e, 0xbf, 0x43, 0xea, 0x4d, 0x5d, 0x70,
	0x02, 0x7c, 0xeb, 0x57, 0xc2, 0x2a, 0x80, 0xd9, 0xaa, 0xdd, 0x15, 0xb1, 0x50, 0x50, 0x9a, 0x25,
	0xfd, 0x3c, 0xa4, 0x5c, 0xa6, 0x5e, 0xd2, 0x83, 0x3d, 0x6a, 0xb6, 0x20, 0x16, 0x77, 0x93, 0xfb,
	0xa2, 0x7d, 0xe5, 0x2f, 0xd3, 0x00, 0x6a, 0x38, 0x56, 0xa1, 0xbe, 0x49, 0x91, 0xbe, 0xae, 0xf4,
	0x6a, 0x05, 0xca, 0x6e, 0x11, 0x50, 0x56, 0xab, 0xcf, 0x84, 0xb1, 0x5c, 0x38, 0xd4, 0xd5, 0xfb,
	0x6b, 0x74, 0xeb, 0xac, 0xe6, 0x3d, 0x83, 0xab, 0x1e, 0xbb, 0xfe, 0x09, 0xca, 0xec, 0xc6, 0x72,
	0x41, 0x3f, 0x64, 0xa7, 0xb8, 0x48, 0xfd, 0xa4, 0x6f, 0xa9, 0x4e, 0xf1, 0x0d, 0x50, 0x2b, 0x6a,
	0xe8, 0xfa, 0xdb, 0xd6, 0x50, 0x4c, 0x0f, 0x6a, 0x94, 0x64, 0x92, 0x8d, 0x55, 0xe9, 0x81, 0x6d,
	0x93, 0x2c, 0xf1, 0x95, 0xe8, 0xd1, 0x36, 0x74, 0x64, 0xde, 0xe7, 0x16, 0xdd, 0xf5, 0x96, 0xbe,
	0x0f, 0x9d, 0x95, 0x36, 0xea, 0x24, 0x3a, 0x89, 0x86, 0x64, 0x3b, 0xb1, 0x21, 0x37, 0xd9, 0x90,
	0xc4, 0x62, 0x43, 0xfe, 0x48, 0xf4, 0xbc, 0x80, 0x8b, 0xa7, 0x4a, 0xc2, 0xdb, 0x54, 0x39, 0x3b,
	0xc4, 0x1e, 0xaa, 0xc4, 0xbb, 0x2f, 0xcc, 0xb1, 0x17, 0xfb, 0x93, 0x40, 0x03, 0xf6, 0x57, 0x9c,
	0xbc, 0xcb, 0xa8, 0x6c, 0xdd, 0x87, 0xa2, 0x3b, 0x77, 0x97, 0x6c, 0xa5, 0x57, 0xee, 0x0c, 0xe2,
	0xf1, 0x1d, 0xea, 0x45, 0x30, 0x7d, 0x2d, 0x11, 0xf1, 0x1b, 0xe4, 0x59, 0x9f, 0x8b, 0x16, 0xa9,
	0x74, 0x26, 0x51, 0x98, 0x2e, 0xfa, 0x5b, 0xa4, 0xd8, 0xd2, 0x15, 0xc7, 0x7b, 0x28, 0xb1, 0xc5,
	0x28, 0xfb, 0x6d, 0x7d, 0x20, 0x3a, 0x59, 0x82, 0x50, 0xf9, 0x7c, 0x97, 0x1c, 0xd4, 0x56, 0x4c,
	0x2a, 0xa0, 0x90, 0x68, 0xaa, 0x2d, 0x90, 0x05, 0xfe, 0x9f, 0x2c, 0xd0, 0x62, 0x1e, 0x9b, 0xe0,
	0x01, 0xd4, 0x94, 0x28, 0x5c, 0x78, 0x51, 0xe2, 0x43, 0x5b, 0xfd, 0x1d, 0x97, 0xb6, 0xef, 0x65,
	0x45, 0x85, 0x6a, 0xe3, 0xdd, 0xe3, 0x0c, 0xf1, 0x28, 0x48, 0xa2, 0x4b, 0x5b, 0x5b, 0xb2, 0x05,
	0x3e, 0xba, 0x26, 0xb6, 0x4c, 0x51, 0x79, 0xe9, 0x5d, 0x52, 0x11, 0x6d, 0xda, 0xf8, 0x13, 0xfb,
	0x36, 0xdf, 0x1f, 0xfb, 0x76, 0xdb, 0x66, 0xe2, 0xcb, 0xf2, 0x2f, 0x4b, 0x83, 0x57, 0xa2, 0x53,
	0xf0, 0xa1, 0x8c, 0x39, 0xba, 0x52, 0x49, 0xc5, 0x1c, 0x5d, 0x06, 0xbc, 0x49, 0x02, 0x37, 0x20,
	0x61, 0x99, 0x33, 0x1b, 0x85, 0xcc, 0xc1, 0x0c, 0x3d, 0x73, 0x43, 0xfc, 0x79, 0xe9, 0x9f, 0xeb,
	0x93, 0x58, 0xcd, 0x36, 0x35, 0x01, 0xdd, 0x7b, 0x70, 0x29, 0x9a, 0x3b, 0x69, 0x12, 0x3e, 0xc2,
	0xa1, 0xd6, 0xda, 0x16, 0x06, 0x4d, 0xb7, 0xaa, 0xf4, 0x77, 0xf3, 0x2a, 0x4c, 0x80, 0x83, 0x5d,
	0xbb, 0x41, 0x00, 0x68, 0x05, 0x60, 0x78, 0xc6, 0x8e, 0xc2, 0x20, 0xf1, 0x96, 0x89, 0xbc, 0x12,
	0x8f, 0xc7, 0x43, 0xe6, 0x61, 0x33, 0x79, 0xed, 0xfa, 0x89, 0x83, 0xf3, 0x09, 0x1d, 0x01, 0x86,
	0x18, 0x64, 0x9c, 0x02, 0x3d, 0xf8, 0x73, 0x45, 0x88, 0x13, 0x2f, 0x49, 0x66, 0x7c, 0xe1, 0xae,
	0x28, 0x67, 0x1d, 0x07, 0x7e, 0x41, 0xb0, 0xd5, 0x63, 0x48, 0x57, 0x4f, 0xf5, 0x99, 0xcc, 0x19,
	0xf9, 0x9a, 0xbb, 0x27, 0x04, 0x60, 0x67, 0x48, 0x34, 0x86, 0x51, 0x4c, 0x08, 0x47, 0x9b, 0x00,
	0xad, 0xe2, 0x62, 0xea, 0x7f, 0x22, 0xce, 0x7e, 0xeb, 0xcd, 0xba, 0xfa, 0x1f, 0x9b, 0x35, 0xdc,
	0x88, 0xc2, 0x98, 0xa0, 0x35, 0x9e, 0x60, 0x91, 0x71, 0x2a, 0x27, 0x77, 0x2d, 0xc6, 0xeb, 0x74,
	0x5f, 0x82, 0x73, 0x80, 0x17, 0xe6, 0xe6, 0x06, 0x5b, 0x63, 0xf5, 0xdc, 0x6c, 0xb0, 0x30, 0x9b,
	0x9b, 0xc1, 0xd8, 0x23, 0x77, 0x36, 0x73, 0x92, 0x08, 0x8a, 0xe4, 0x39, 0x8c, 0x8f, 0xdc, 0x2a,
	0xda, 0xc8, 0x3c, 0x95, 0x3c, 0x9c, 0xf5, 0x28, 0x73, 0xd0, 0x7b, 0x02, 0x4e, 0x56, 0xb5, 0x1b,
	0x44, 0x1f, 0xd0, 0xec, 0x09, 0xd7, 0xe3, 0xd1, 0x33, 0x86, 0x66, 0x80, 0x42, 0xd8, 0x8e, 0xc3,
	0x3a, 0xde, 0xfa, 0x42, 0xb4, 0x34, 0x4b, 0xea, 0x71, 0x5b, 0x5d, 0x11, 0xb7, 0x15, 0x3d, 0x6e,
	0xff, 0x2e, 0x44, 0xe7, 0x90, 0x2c, 0xa5, 0x7c, 0x0e, 0x81, 0x3b, 0x71, 0xe7, 0x9e, 0x8a, 0xa1,
	0x9a, 0x5d, 0x47, 0x12, 0x0e, 0x81, 0x4d, 0x3e, 0x8d, 0x64, 0xdd, 0x2d, 0x17, 0xc3, 0x8b, 0xe3,
	0x7e, 0x17, 0x6c, 0x99, 0x46, 0x5c, 0x73, 0xef, 0x88, 0x86, 0x3a, 0x6f, 0xa5, 0xd8, 0xb2, 0xf9,
	0xd4, 0xb6, 0x12, 0xa3, 0x71, 0xb0, 0x35, 0xbe, 0xf2, 0xd4, 0x6c, 0x5d, 0xa5, 0x83, 0xb7, 0x99,
	0x29, 0xc7, 0x1a, 0x98, 0x5c, 0x5e, 0xa3, 0x05, 0xf5, 0x99, 0xe1, 0xda, 0xe4, 0x82, 0x72, 0xae,
	0x57, 0x3f, 0x17, 0x6d, 0x19, 0x42, 0x58, 0x6b, 0xd5, 0xcc, 0x60, 0xdd, 0x0c, 0x40, 0x5b, 0x86,
	0x1a, 0xfe, 0xc6, 0x31, 0xc3, 0x84, 0xe3, 0x47, 0x98, 0x14, 0x92, 0x3d, 0x26, 0x37, 0x57, 0x61,
	0x72, 0x64, 0xbe, 0x5c, 0x39, 0x86, 0x2f, 0xad, 0x6e, 0x04, 0x99, 0x12, 0x29, 0x24, 0xcf, 0x0c,
	0x55, 0xbb, 0xc3, 0x5c, 0xc6, 0xc5, 0xd6, 0x4f, 0x44, 0x67, 0xe6, 0xc6, 0x89, 0x93, 0xcd, 0xf0,
	0xcd, 0x15, 0x5f, 0x18, 0x2d, 0x84, 0x3c, 0x91, 0x53, 0xfd, 0x47, 0xa2, 0x77, 0x85, 0xad, 0x74,
	0xf2, 0xc2, 0x77, 0xe1, 0xf4, 0x63, 0x6f, 0x49, 0x03, 0x43, 0xc7, 0xee, 0x66, 0xec, 0x03, 0xe4,
	0x62, 0xcd, 0x27, 0xd5, 0x5a, 0x5c, 0xb4, 0xf9, 0x08, 0xc8, 0xde, 0x57, 0xb1, 0x01, 0x7e, 0x30,
	0x09, 0x47, 0x13, 0x97, 0x34, 0x70, 0x87, 0x2e, 0xd5, 0x45, 0x3e, 0x8e, 0x5b, 0xd2, 0xc4, 0x0a,
	0x49, 0xf3, 0x93, 0x44, 0x76, 0x73, 0x24, 0x0e, 0x4f, 0x12, 0xf9, 0x89, 0xb0, 0x08, 0x29, 0x8b,
	0xb2, 0xc4, 0xf6, 0x08, 0x4b, 0x3a, 0x78, 0x54, 0x97, 0x68, 0xa8, 0xde, 0x3c, 0x07, 0x48, 0x9c,
	0x49, 0x38, 0x9e, 0x0d, 0x24, 0x64, 0x5b, 0xac, 0x91, 0xc2, 0x02, 0x6e, 0x8d, 0x4d, 0x8f, 0x82,
	0x43, 0x0d, 0xfb, 0x33, 0x79, 0x71, 0x39, 0x5b, 0xa0, 0x55, 0xad, 0x15, 0x56, 0xed, 0x64, 0xeb,
	0xc8, 0xae, 0xd0, 0xad, 0xb3, 0xb9, 0x10, 0x9a, 0xfc, 0x4d, 0xbc, 0xa1, 0x46, 0x42, 0x70, 0x1a,
	0x0f, 0x29, 0x5c, 0x23, 0x36, 0x8a, 0x63, 0x15, 0x69, 0xe4, 0xf1, 0x7b, 0xae, 0x7e, 0xe2, 0x0a,
	0x6e, 0xd0, 0xb4, 0xe2, 0x56, 0x71, 0xc5, 0x73, 0x94, 0xf0, 0x8a, 0x2b, 0xf5, 0x13, 0x13, 0x72,
	0xec, 0x8f, 0x20, 0x6c, 0x36, 0xa9, 0x4f, 0x33, 0x01, 0x93, 0xff, 0x86, 0xb7, 0x1c, 0xa5, 0xd8,
	0x0b, 0xf5, 0x71, 0x0a, 0x9a, 0x39, 0x56, 0x8b, 0x75, 0x29, 0xdb, 0xd7, 0x44, 0xd8, 0x9a, 0xb9,
	0x9e, 0x85, 0x89, 0x3b, 0x73, 0x82, 0x74, 0x0e, 0x0d, 0x9d, 0x5a, 0x33, 0x15, 0x35, 0x64, 0x1e,
	0xa5, 0xf3, 0x2c, 0x58, 0xb0, 0xed, 0x4b, 0xeb, 0xbe, 0x43, 0xd6, 0xed, 0xb0, 0xb7, 0xfc, 0x3c,
	0x04, 0x02, 0xa8, 0x01, 0xce, 0x99, 0x1b, 0xbc, 0x84, 0x2f, 0x88, 0xd8, 0x73, 0x13, 0xe8, 0xe3,
	0x14, 0x7e, 0xc8, 0x7f, 0x48, 0xec, 0x13, 0xe0, 0xc2, 0x0c, 0xb6, 0x71, 0xee, 0x2f, 0x9d, 0x1b,
	0x68, 0x6e, 0xdf, 0x6b, 0x20, 0x3b, 0x2a, 0x2e, 0x80, 0xae, 0xb6, 0x84, 0xce, 0x85, 0x76, 0x0d,
	0x17, 0x38, 0xe2, 0x62, 0x81, 0xf9, 0x07, 0x7f, 0xd3, 0xf6, 0xa4, 0xe4, 0x09, 0x09, 0x20, 0xbd,
	0x3e, 0xc5, 0xcf, 0xbb, 0x68, 0x8c, 0xe6, 0xd4, 0xd0, 0xff, 0x64, 0xb4, 0xa9, 0x44, 0x19, 0x1c,
	0x12, 0x57, 0xe6, 0x7b, 0x0e, 0xfe, 0x17, 0x83, 0xbb, 0x2c, 0xc8, 0xa0, 0x9f, 0x8b, 0x3a, 0x63,
	0xfa, 0xdf, 0xf2, 0x9b, 0xc0, 0x56, 0xe6, 0x59, 0x59, 0x05, 0xf1, 0xe5, 0x88, 0xe1, 0xb6, 0x84,
	0x82, 0x91, 0x3b, 0x0c, 0x92, 0xfa, 0xfb, 0xdf, 0x95, 0xb8, 0x59, 0x32, 0x97, 0xd1, 0xf0, 0x0d,
	0x6b, 0x9c, 0x7a, 0xf3, 0xc5, 0xae, 0x9b, 0xb8, 0x38, 0x80, 0x14, 0xbe, 0xda, 0x94, 0x20, 0xb6,
	0x33, 0xcc, 0xe0, 0xaf, 0x65, 0x61, 0xdd, 0xdc, 0x14, 0x7d, 0x20, 0x87, 0xad, 0x24, 0x0c, 0x03,
	0x6e, 0xbd, 0xf2, 0x2e, 0x3c, 0x6e, 0x21, 0x1b, 0x1b, 0x30, 0xdc, 0x65, 0x13, 0x91, 0xe7, 0xae,
	0x4c, 0x84, 0x1c, 0xcf, 0xcf, 0x0a, 0xeb, 0x20, 0x7d, 0xec, 0x72, 0x06, 0x64, 0x8b, 0x76, 0xc4,
	0x7b, 0xb8, 0xe8, 0xfa, 0x58, 0x9f, 0xaf, 0xe5, 0x36, 0xbf, 0x05, 0xa0, 0xfd, 0xe2, 0x48, 0x9f,
	0xa9, 0x00, 0x73, 0xe3, 0xb7, 0x49, 0x21, 0x44, 0xf9, 0x05, 0xa6, 0x07, 0xfc, 0x42, 0x78, 0x42,
	0x9c, 0xab, 0x8a, 0x8d, 0x43, 0x14, 0x13, 0xa8, 0x00, 0x8b, 0x35, 0x4f, 0x8b, 0x33, 0xa8, 0x40,
	0xc9, 0x54, 0x76, 0xdb, 0x5e, 0xc6, 0xff, 0x9a, 0xd8, 0x10, 0x09, 0xf5, 0x69, 0x7c, 0xe5, 0x9c,
	0x2f, 0xa9, 0x12, 0xb7, 0xee, 0x6d, 0xe6, 0x7d, 0x3d, 0xdf, 0xe6, 0x7c, 0x69, 0xd7, 0x00, 0xf5,
	0x78, 0x39, 0x70, 0x44, 0xb7, 0x28, 0xc0, 0x04, 0x09, 0x3c, 0x48, 0xa8, 0xb1, 0xb7, 0x98, 0x85,
	0x97, 0xa8, 0x88, 0xc7, 0xb1, 0x36, 0x72, 0x77, 0x89, 0xf9, 0x78, 0x89, 0x65, 0xb7, 0x60, 0x11,
	0x80, 0x95, 0xa9, 0xf9, 0x75, 0x75, 0x36, 0x6c, 0xf0, 0x50, 0xac, 0x9f, 0xf8, 0x23, 0x64, 0x2e,
	0x53, 0x6f, 0xe6, 0xa7, 0xd2, 0x69, 0x10, 0xdd, 0x30, 0x3b, 0x06, 0x45, 0x9b, 0xf0, 0x46, 0x26,
	0x0a, 0xf4, 0x43, 0x0d, 0x86, 0x62, 0x23, 0xd7, 0x81, 0xac, 0xff, 0x46, 0xc9, 0xdf, 0x4a, 0xe2,
	0xf6, 0x41, 0xe0, 0x27, 0x85, 0xe6, 0x7d, 0xec, 0x46, 0xee, 0x3c, 0x7e, 0x73, 0x0b, 0xef, 0xe7,
	0x4d, 0xb9, 0xcc, 0x13, 0x86, 0x6a, 0xc2, 0xf7, 0xb2, 0xbc, 0xa8, 0xbc, 0x75, 0x5a, 0x7c, 0x70,
	0x3d, 0x2d, 0xaa, 0x2b, 0xb2, 0x02, 0xaa, 0x3f, 0x77, 0x2e, 0xd9, 0xcd, 0x6a, 0xe4, 0xe7, 0x16,
	0xf3, 0xb8, 0x95, 0x41, 0xc4, 0x63, 0x2d, 0x29, 0xc0, 0xf8, 0x35, 0xa6, 0x0b, 0xfc, 0xe7, 0x39,
	0x72, 0xf0, 0x5b, 0x61, 0xd9, 0xe0, 0xb2, 0xcb, 0xe1, 0xcc, 0x87, 0x6e, 0x7c, 0xe8, 0xc5, 0xb1,
	0x3b, 0xf1, 0xf4, 0x5b, 0x95, 0x8a, 0xb7, 0xba, 0x25, 0xea, 0xf3, 0x78, 0x82, 0x76, 0x60, 0x6f,
	0xd6, 0x80, 0x02, 0x33, 0xc0, 0x80, 0x04, 0x3f, 0xe8, 0xa6, 0x6d, 0x1b, 0x7f, 0x0e, 0x1e, 0xe0,
	0xf8, 0x3e, 0x87, 0x2f, 0x25, 0x6f, 0xf4, 0x92, 0xa6, 0xd9, 0x2d, 0x61, 0x8c, 0xd3, 0xc8, 0xa5,
	0x6b, 0xc9, 0x57, 0x14, 0x45, 0x5b, 0x96, 0xf6, 0x0c, 0x5c, 0xe3, 0xc7, 0x48, 0x98, 0xc3, 0x45,
	0xfe, 0x85, 0x93, 0x87, 0x3d, 0xbf, 0xa0, 0xc9, 0xb0, 0xdf, 0x2e, 0x3c, 0x1f, 0x6f, 0xde, 0xfc,
	0x32, 0xd2, 0x1e, 0x37, 0xe1, 0x88, 0x0b, 0x38, 0x36, 0x3f, 0x33, 0xe2, 0xcf, 0x37, 0x3f, 0x77,
	0x7e, 0x25, 0x9a, 0x59, 0x79, 0x81, 0x56, 0xb4, 0x2e, 0x53, 0xd5, 0xf6, 0x2e, 0xb8, 0xaa, 0x1f,
	0xec, 0x2a, 0xbb, 0xac, 0x12, 0x6d, 0x3f, 0xe0, 0x27, 0x70, 0x6a, 0x4b, 0x3d, 0xd1, 0xa2, 0x2e,
	0xc9, 0xaf, 0x80, 0xe6, 0xff, 0x59, 0x6b, 0xa2, 0x43, 0x8c, 0x39, 0x14, 0x68, 0x62, 0x95, 0x32,
	0x0c, 0xbf, 0xfc, 0x99, 0xe5, 0xed, 0x6f, 0xe9, 0xdd, 0x97, 0xd6, 0x03, 0x1c, 0xe6, 0x11, 0xe4,
	0x4f, 0xe1, 0x3a, 0x6e, 0x08, 0x1a, 0x2c, 0x01, 0x29, 0xe4, 0x5c, 0xc0, 0xc7, 0x0d, 0x29, 0x98,
	0xa6, 0xa0, 0xa2, 0x4b, 0xe3, 0xec, 0x18, 0x78, 0x88, 0x29, 0x4b, 0x1a, 0xc5, 0x2f, 0x5d, 0xdf,
	0xac, 0xe0, 0x16, 0x40, 0x4f, 0x5d, 0x7f, 0xec, 0xcf, 0x00, 0x50, 0x05, 0x0f, 0x6f, 0x48, 0x40,
	0x8c, 0xc1, 0x9f, 0x49, 0x6a, 0x56, 0x8b, 0x06, 0x7f, 0x7c, 0x55, 0x34, 0xeb, 0x56, 0x07, 0x67,
	0x70, 0xfa, 0xb4, 0x82, 0x6d, 0x1a, 0x52, 0x36, 0xf6, 0x81, 0x30, 0xac, 0x4d, 0x7c, 0xca, 0x80,
	0x7b, 0xb8, 0x61, 0x0c, 0x67, 0x9b, 0xa6, 0x98, 0x80, 0x81, 0xd9, 0xb4, 0xda, 0xf4, 0xb6, 0x04,
	0xc3, 0x1d, 0xa0, 0x84, 0xbc, 0xc0, 0x05, 0x44, 0xdc, 0x85, 0x9f, 0x02, 0xd3, 0x6c, 0xc9, 0xc3,
	0x9c, 0xa5, 0x92, 0xd1, 0x96, 0x8c, 0x17, 0x9c, 0xba, 0x13, 0xb3, 0xb3, 0xfd, 0x99, 0x68, 0xeb,
	0xef, 0x0e, 0x96, 0x10, 0xf5, 0x20, 0x8c, 0xe6, 0xee, 0x0c, 0xae, 0x5f, 0x17, 0x65, 0xba, 0x32,
	0x9c, 0x65, 0x82, 0x23, 0x6e, 0xba, 0x00, 0x8b, 0xfd, 0xa9, 0xa4, 0xbe, 0x9c, 0x94, 0xd5, 0x64,
	0xfb, 0xca, 0xec, 0xbe, 0x8e, 0xef, 0x46, 0xc4, 0xd2, 0x2c, 0x9f, 0xe3, 0x94, 0xed, 0xd1, 0xba,
	0x92, 0xa5, 0xac, 0x49, 0xd6, 0x93, 0x3c, 0x32, 0x4b, 0x15, 0xa2, 0x51, 0xb5, 0xc7, 0xf3, 0x59,
	0xf8, 0xda, 0x8b, 0x16, 0xfe, 0x04, 0x2c, 0x97, 0xc3, 0x2e, 0xbd, 0xd9, 0x0c, 0xac, 0x97, 0xc3,
	0x12, 0x77, 0x19, 0x79, 0x67, 0xd0, 0xb5, 0xc1, 0x88, 0x39, 0x17, 0x3f, 0x56, 0xc6, 0x70, 0x87,
	0xc8, 0x34, 0xb6, 0x9f, 0x89, 0xba, 0x7c, 0xa8, 0x02, 0x35, 0xfc, 0xb0, 0x45, 0x13, 0x26, 0x1c,
	0x1d, 0x9c, 0x20, 0x19, 0x70, 0xf1, 0xb2, 0x26, 0xa7, 0x23, 0x57, 0xd0, 0xd9, 0x92, 0x01, 0xd3,
	0x08, 0x9c, 0x2e, 0xc7, 0x5f, 0xf8, 0x66, 0x63, 0xfb, 0x23, 0xd1, 0xcc, 0x66, 0x2c, 0x94, 0x1d,
	0x9e, 0x3a, 0x47, 0x4f, 0xec, 0xc3, 0x9d, 0xaf, 0x41, 0x35, 0x18, 0x11, 0xc8, 0xbd, 0x9d, 0xa3,
	0x3d, 0xb3, 0xb4, 0x7d, 0x5f, 0x34, 0xb3, 0xd1, 0x0a, 0x95, 0x3e, 0x7f, 0xa6, 0x21, 0xc1, 0xab,
	0x48, 0x1f, 0x3f, 0x42, 0x28, 0xae, 0x43, 0x6a, 0xb8, 0x7f, 0x00, 0xc6, 0xff, 0x63, 0x49, 0x74,
	0x8b, 0x29, 0x87, 0xe8, 0xe1, 0xde, 0xa9, 0xb3, 0xbf, 0x73, 0xb4, 0xcb, 0xbb, 0x20, 0x85, 0xe8,
	0x92, 0x12, 0x91, 0xa2, 0x32, 0x64, 0x65, 0x1b, 0xa9, 0xc3, 0x83, 0xa3, 0x3d, 0x3a, 0x05, 0xdd,
	0x06, 0x39, 0x40, 0x20, 0x5d, 0x55, 0xf4, 0xc3, 0xa7, 0x44, 0xd7, 0x30, 0x16, 0x48, 0xf5, 0x53,
	0x30, 0xb0, 0x54, 0xbc, 0xff, 0x74, 0x87, 0x83, 0x13, 0x89, 0x27, 0x4f, 0x4f, 0x4d, 0xe3, 0xac,
	0x4e, 0xff, 0x8d, 0xfa, 0xfc, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x93, 0xc3, 0x8f, 0xcf,
	0x1a, 0x00, 0x00,
}
