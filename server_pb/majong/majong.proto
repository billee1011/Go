syntax = "proto3";

package majong;

import "common.proto";
import "states.proto";
import "events.proto";


// 杠的类型
enum GangType {
    gang_angang     = 0;    // 暗杠
    gang_minggang   = 1;    // 明杠
    gang_bugang     = 2;    // 补杠 
}

// 杠牌数据
message GangCard {
    Card        card = 1;  // 杠的牌
    GangType    type = 2;  // 杠类型
    uint64      src_player = 3;  // 杠牌来源玩家
}

// 碰牌数据
message PengCard {
    Card    card = 1; // 碰的牌
    uint64  src_player = 2;  // 碰牌来源玩家
}

// 胡类型
enum HuType { 
    hu_ganghoupao = 0;         // 杠后炮
    hu_qiangganghu = 1;        // 抢杠胡
    hu_dianpao = 2;            // 点炮
    hu_gangkai = 3;            // 杠开
    hu_haidilao = 4;           // 海底捞
    hu_gangshanghaidilao = 5;  // 杠上海底捞
    hu_zimo = 6;               // 自摸
    hu_tianhu = 7;             // 天胡
    hu_dihu = 8;               // 地胡
    hu_miaoshouhuichun = 9;    // 妙手回春 
    hu_renhu = 10;             // 人胡
    hu_quanqiuren = 11;        // 全求人
    hu_buqiuren = 12;          // 不求人
    hu_juezhang = 13;          // 胡绝张
}

// 玩家行牌状态
enum XingPaiState{
    normal  = 0x0;   // 正常行牌,二进制: 0000
    hu      = 0x1;   // 已胡牌,二进制:   0001
    give_up = 0x2;   // 已认输, 二进制:  0010
 }


// 玩家胡牌对应的fanType
message HuFanType{
    Card hu_card = 1;
    uint64 gen_count = 2;
    uint64 hua_count = 3;
    repeated int64 fan_types = 4;
}

// 胡牌数据
message HuCard {
    Card card = 1; // 胡的牌
    uint64 src_player = 2;  // 胡牌来源玩家
    HuType type = 3;    // 胡牌类型 
    bool is_real = 4;   // 是否为实（一炮多响时，点炮者的第一个胡牌下家为实，其他胡牌的玩家为虚）
}

// 吃牌数据
message ChiCard {
    Card card = 1;    // 最小牌
    Card opr_card = 2;  // 吃的牌
    uint64 src_player = 3; // 吃牌来源玩家
}
 
// TingCardInfo 听牌信息
message TingCardInfo{
    uint32 ting_card = 1; // 听的牌
    uint32 times = 2;   // 胡牌倍数
}

// CanTingCardInfo 出本张牌可以听
message CanTingCardInfo{
    uint32 out_card = 1; // 要出的牌
    repeated TingCardInfo ting_card_info = 2; // 听的牌和倍数
}

// ZiXunRecord 记录
message ZiXunRecord {
    repeated uint32 enable_angang_cards = 1;  // 能暗杠的牌
    repeated uint32 enable_bugang_cards = 2;  // 能补杠的牌
    bool enable_zimo = 3;          // 是否能自摸
    repeated uint32 enable_chupai_cards = 4;  // 可以出的牌
    repeated CanTingCardInfo can_ting_card_info = 5; // 每张牌对应的听的牌和倍数
    bool enable_qi = 6; //是否可弃牌
    HuType hu_type = 7;  // 胡牌类型
    bool enable_ting = 8;   //是否能听
    TingType ting_type = 9; //听的类型
    HuFanType hu_fan_type = 10; // 胡牌的番型
}

// Player 玩家数据
message Player {
    uint64 palyer_id = 1;                   // 玩家 ID 
    repeated Card hand_cards = 2;           // 玩家手牌
    repeated Card out_cards = 3;            // 玩家打出的牌
    repeated ChiCard chi_cards = 4;         // 玩家吃的牌
    repeated PengCard peng_cards = 5;       // 玩家碰的牌
    repeated HuCard hu_cards = 6;           // 玩家胡的牌
    repeated GangCard gang_cards = 7;       // 玩家杠的牌
    repeated Action possible_actions = 8;   // 可选操作
    bool has_selected = 9;                  // 是否已经选择了某个操作
    Action selected_action = 10;            // 玩家选择的操作
    bool has_dingque = 11;                  // 是否已经定缺
    CardColor dingque_color = 12;           // 定缺花色
    bool huansanzhang_sure = 13;            // 换三张是否已确认
    repeated Card huansanzhang_cards = 14;  // 换三张的牌
    int32 mopai_count = 15;                 // 已经摸牌的次数
    ZiXunRecord zixun_record = 16;          // 自询记录
    XingPaiState xp_state = 17;             // 玩家牌局状态
    bool is_quit = 18;                       // 玩家是否退出牌局
    repeated TingCardInfo ting_card_info = 19;       // 听牌信息 
    repeated Card hua_cards = 20;           //补的花牌
    TingStateInfo ting_state_info = 21;     //听的状态信息
    int32 zixun_count = 22;                 // 进入自询的次数
    repeated uint32 enble_chi_cards = 23;   //可以吃的牌組
    repeated Card  design_chi_cards = 24;   //玩家請求指定吃的牌組
    uint32 max_card_value = 25;              // 胡最大倍数（胡牌时）
    repeated CardsGroup cards_group = 26;   // 胡最大倍数时的牌组（胡牌时）
    bool selected_ting = 27;                //玩家出牌请求时，是否请求了听
    int32 chupai_count = 28;                //进入出牌状态的次数
    map<string, bytes> properties = 256;    // 其他的一些属性
}

message TingStateInfo{
   bool is_ting = 1; //听
   bool is_tianting = 2; //天听
   int32 baotingyifa_count = 3; //报听前所有的特殊操作加上出牌count的数量（不包括胡）
}

// AutoEvent 自动事件
message AutoEvent {
    EventID event_id = 1;       // 事件 ID 
    bytes event_context = 2;    // 事件现场
    uint32 wait_time = 3;       // 多长时间（ms）后产生该事件
}

// SettleType 结算类型
enum SettleType {
    settle_angang = 0;              // 暗杠
    settle_minggang = 1;            // 明杠
    settle_bugang = 2;              // 补杠
    settle_dianpao = 3;             // 点炮
    settle_zimo = 4;                // 自摸
    settle_flowerpig = 5;           // 查花猪
    settle_yell = 6;                // 查大叫
    settle_taxrebeat = 7;           // 退税
    settle_calldiver = 8;           // 呼叫转移
}

// SettleInfo 结算信息
message SettleInfo {
    uint64 id = 1;                     // 结算 id 
    map<uint64, int64> scores = 2;     // 玩家结算分数
    SettleType settle_type = 3;        // 结算类型
    HuType hu_type =4;                 // 胡牌类型
    repeated int64 card_type = 5;      // 牌组类型(胡牌时)
    uint32 card_value = 6;             // 牌组倍数
    uint32 gen_count=7;                // 根的数目
    uint32 hua_count = 8;              // 花的数目
    bool call_transfer = 9;            // 结算是否被呼叫转移
    repeated uint64 group_id = 10;      // 一炮多响相关联的结算 id
}

// 玩家操作
enum Action {
    action_peng         = 0;  // 碰
    // action_zimo         = 1;  // 自摸
    // action_dianpao      = 2;  // 点炮
    action_hu      = 2;  // 胡
    // action_qiangganghu  = 3;  // 抢杠胡
    action_gang = 3;
    // action_bugang       = 4;  // 补杠
    // action_minggang     = 5;  // 明杠
    // action_angang       = 6;  // 暗杠
    action_chi = 4; //吃
    action_qi           = 7;  // 弃
}

// MopaiType 摸牌类型
enum MopaiType {
    MT_NORMAL = 0;  // 普通摸牌
    MT_GANG = 1;    // 杠后摸牌
}

// ZixunType 自询类型
enum ZixunType {
    ZXT_NORMAL = 0; // 普通自询
    ZXT_PENG = 1;   // 碰后的自询
    ZXT_CHI = 2;    // 吃后的自询
}

// 麻将组类型
enum CardsGroupType{
    CGT_HAND = 0;     // 手牌
    CGT_CHI = 1;      // 吃牌
    CGT_PENG = 2;     // 碰牌
    CGT_MINGGANG = 3; // 明杠牌
    CGT_ANGANG = 4;   // 暗杠牌
    CGT_BUGANG = 5;   // 补杠牌
    CGT_HU = 6;       // 胡的牌
    CGT_HUA = 7;      // 花牌 
	CGT_OUT = 8;      // 出去的牌 
}

// MajongContext 麻将现场
message MajongContext {
    int32 game_id = 1;              // 游戏 ID 
    StateID cur_state = 2;          // 当前状态
    repeated Player players = 3;    // 玩家列表
    uint64 active_player = 4;       // 当前轮次的玩家 ID (可能要废弃，含义不明确)
    repeated Card wall_cards = 5;   // 墙牌
    repeated SettleInfo settle_infos = 6;   // 结算信息表
    uint64 current_settleId = 7;                // 最大结算信息id
    repeated uint64 revert_settles = 8; // 退税结算 ids
    Card last_out_card = 9;   // 最后一次出的牌
    uint32 zhuangjia_index = 10; // 庄家索引
    // bool fix_zhuangjia_index = 11;  // 是否固定庄家位置
    repeated uint64 last_hu_players = 12; // 最近一次执行胡操作的玩家列表
    uint64 last_peng_player = 13; // 最近一次执行碰操作的玩家
    uint64 last_gang_player = 14;   // 最近一次执行杠操作的玩家
    uint64 last_chupai_player = 15; // 最近一次出牌的玩家
    uint64 mopai_player = 16;  // 需要摸牌的玩家，进入摸牌状态前设置
    uint64 last_mopai_player = 17;  // 上一个摸牌的玩家
    Card last_mopai_card = 18;    // 上一次摸的牌
    Card gang_card = 19;        // 杠的牌
    MopaiType mopai_type = 20;  // 摸牌类型
    ZixunType zixun_type = 21;  // 自询类型
    repeated uint32 dices = 22; // 骰子
    bool excuted_huansanzhang = 23; // 换三张是否已经执行完成
    uint32 card_total_num = 24; // 本局游戏的所有牌数量 
    uint64 last_chi_player = 25; // 最近一次执行吃操作的玩家
    uint32 next_banker_seat = 26;   // 下一局庄家座号
    bool fix_next_banker_seat = 27; // 是否已经确定下一局庄家位置

    uint32 xingpai_option_id = 251; // 行牌选项 ID 
    uint32 cardtype_option_id = 252;    // 牌型选项 ID 
    uint32 settle_option_id = 253;  // 结算选项 ID 
    MajongCommonOption option = 254; // 麻将通用玩法选项
    bytes majong_option = 255;   // 某个麻将特有的玩法选项
}

// MajongCommonOption 麻将通用玩法选项
message MajongCommonOption {
    uint32 max_cartoon_time = 1;    // 通用最大动画时间
    uint32 max_fapai_cartoon_time = 2;  // 发牌动画最大时间
    uint32 max_huansanzhang_cartoon_time = 3; // 换三张动画最大时间
    bool has_huansanzhang = 4; //配牌配置换三张开关
    string cards = 5;    //配牌的墙牌
    uint32 wallcards_length = 6;   //配牌配的墙牌长度
    Huansanzhangfx hsz_fx = 7;  //配置换三张方向
    // Zhuang zhuang = 8;  //配置庄家
}

// message Zhuang{
//     bool need_deploy_zhuang = 1; //是否需要配置庄家
//     int32 zhuang_index = 2; //庄家位置
// }

message Huansanzhangfx{
    bool need_deploy_fx = 1; //是否需要配置换三张方向
    int32 huansanzhang_fx = 2; //换三张方向
}

// SichuanxueliuOption 四川血流麻将玩法
message SichuanxueliuOption {
    bool open_huansanzhang = 1;
}
// SichuanxuezhanOption 四川血流麻将玩法
message SichuanxuezhanOption {
    bool open_huansanzhang = 1;
}

// InitMajongContextParams 麻将现场初始化参数
message InitMajongContextParams {
    int32 game_id = 1;              // 游戏 ID 
    repeated uint64 players = 2;    // 玩家 ID 列表
    MajongCommonOption option = 3;  // 麻将通用玩法选项
    bytes majong_option = 4;        // 和具体游戏相关的麻将玩法选项
    uint32 zhuang_index = 5;        // 庄家玩家索引
    bool fix_zhuang_index = 6;      // 是否固定庄家位置
}

// ReplyClientMessage 回复给客户端的消息
message ReplyClientMessage {
    repeated uint64 players = 1;    // 玩家列表
    int32 msg_id = 2;               // 消息 ID
    bytes msg = 3;    // 消息体
}

// TimeCheckInfo 时间检测信息
message TimeCheckInfo {
    uint64 duration = 1;            // 多久之后作检测
    int32 type = 2;                 // 检测类型
}

// 麻将组
message CardsGroup { 
    repeated uint32 cards = 1;  // 牌 
    CardsGroupType type = 2;    // 麻将组类型
    uint64 pid = 3;             // 吃碰杠谁的牌
    bool is_real = 4;           // 是否是实牌，仅用于胡牌
}
