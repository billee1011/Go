// Code generated by protoc-gen-go. DO NOT EDIT.
// source: doudizhu.proto

/*
Package ddz is a generated protocol buffer package.

It is generated from these files:
	doudizhu.proto
	events.proto
	states.proto

It has these top-level messages:
	Player
	DDZContext
	RequestEventHead
	GrabRequestEvent
	DoubleRequestEvent
	PlayCardRequestEvent
	ResumeRequestEvent
*/
package ddz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DDZStage int32

const (
	DDZStage_DDZ_STAGE_NONE    DDZStage = 0
	DDZStage_DDZ_STAGE_DEAL    DDZStage = 1
	DDZStage_DDZ_STAGE_CALL    DDZStage = 2
	DDZStage_DDZ_STAGE_GRAB    DDZStage = 3
	DDZStage_DDZ_STAGE_DOUBLE  DDZStage = 4
	DDZStage_DDZ_STAGE_PLAYING DDZStage = 5
	DDZStage_DDZ_STAGE_OVER    DDZStage = 6
)

var DDZStage_name = map[int32]string{
	0: "DDZ_STAGE_NONE",
	1: "DDZ_STAGE_DEAL",
	2: "DDZ_STAGE_CALL",
	3: "DDZ_STAGE_GRAB",
	4: "DDZ_STAGE_DOUBLE",
	5: "DDZ_STAGE_PLAYING",
	6: "DDZ_STAGE_OVER",
}
var DDZStage_value = map[string]int32{
	"DDZ_STAGE_NONE":    0,
	"DDZ_STAGE_DEAL":    1,
	"DDZ_STAGE_CALL":    2,
	"DDZ_STAGE_GRAB":    3,
	"DDZ_STAGE_DOUBLE":  4,
	"DDZ_STAGE_PLAYING": 5,
	"DDZ_STAGE_OVER":    6,
}

func (x DDZStage) String() string {
	return proto.EnumName(DDZStage_name, int32(x))
}
func (DDZStage) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Player 玩家数据
type Player struct {
	PlayerId    uint64   `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Lord        bool     `protobuf:"varint,2,opt,name=lord" json:"lord,omitempty"`
	Grab        bool     `protobuf:"varint,3,opt,name=grab" json:"grab,omitempty"`
	IsDouble    bool     `protobuf:"varint,4,opt,name=is_double,json=isDouble" json:"is_double,omitempty"`
	HandCards   []uint32 `protobuf:"varint,5,rep,packed,name=hand_cards,json=handCards" json:"hand_cards,omitempty"`
	OutCards    []uint32 `protobuf:"varint,6,rep,packed,name=out_cards,json=outCards" json:"out_cards,omitempty"`
	AllOutCards []uint32 `protobuf:"varint,7,rep,packed,name=all_out_cards,json=allOutCards" json:"all_out_cards,omitempty"`
	Win         bool     `protobuf:"varint,8,opt,name=win" json:"win,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Player) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Player) GetLord() bool {
	if m != nil {
		return m.Lord
	}
	return false
}

func (m *Player) GetGrab() bool {
	if m != nil {
		return m.Grab
	}
	return false
}

func (m *Player) GetIsDouble() bool {
	if m != nil {
		return m.IsDouble
	}
	return false
}

func (m *Player) GetHandCards() []uint32 {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *Player) GetOutCards() []uint32 {
	if m != nil {
		return m.OutCards
	}
	return nil
}

func (m *Player) GetAllOutCards() []uint32 {
	if m != nil {
		return m.AllOutCards
	}
	return nil
}

func (m *Player) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

// DDZContext 麻将现场
type DDZContext struct {
	GameId          int32     `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CurState        StateID   `protobuf:"varint,2,opt,name=cur_state,json=curState,enum=ddz.StateID" json:"cur_state,omitempty"`
	CurStage        DDZStage  `protobuf:"varint,3,opt,name=cur_stage,json=curStage,enum=ddz.DDZStage" json:"cur_stage,omitempty"`
	Players         []*Player `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	WallCards       []uint32  `protobuf:"varint,5,rep,packed,name=wall_cards,json=wallCards" json:"wall_cards,omitempty"`
	CurrentPlayerId uint64    `protobuf:"varint,6,opt,name=current_player_id,json=currentPlayerId" json:"current_player_id,omitempty"`
	// 叫地主阶段
	FirstGrabPlayerId uint64 `protobuf:"varint,7,opt,name=first_grab_player_id,json=firstGrabPlayerId" json:"first_grab_player_id,omitempty"`
	LastGrabPlayerId  uint64 `protobuf:"varint,8,opt,name=last_grab_player_id,json=lastGrabPlayerId" json:"last_grab_player_id,omitempty"`
	GrabbedCount      uint32 `protobuf:"varint,9,opt,name=grabbed_count,json=grabbedCount" json:"grabbed_count,omitempty"`
	LordPlayerId      uint64 `protobuf:"varint,10,opt,name=lord_player_id,json=lordPlayerId" json:"lord_player_id,omitempty"`
	AllAbandonCount   uint32 `protobuf:"varint,11,opt,name=all_abandon_count,json=allAbandonCount" json:"all_abandon_count,omitempty"`
	TotalGrab         uint32 `protobuf:"varint,12,opt,name=total_grab,json=totalGrab" json:"total_grab,omitempty"`
	// 加倍阶段
	DoubledCount uint32 `protobuf:"varint,13,opt,name=doubled_count,json=doubledCount" json:"doubled_count,omitempty"`
	TotalDouble  uint32 `protobuf:"varint,14,opt,name=total_double,json=totalDouble" json:"total_double,omitempty"`
	// 出牌阶段
	CurOutCards   []uint32 `protobuf:"varint,15,rep,packed,name=cur_out_cards,json=curOutCards" json:"cur_out_cards,omitempty"`
	CurCardType   CardType `protobuf:"varint,16,opt,name=cur_card_type,json=curCardType,enum=ddz.CardType" json:"cur_card_type,omitempty"`
	CardTypePivot uint32   `protobuf:"varint,17,opt,name=card_type_pivot,json=cardTypePivot" json:"card_type_pivot,omitempty"`
	PassCount     uint32   `protobuf:"varint,18,opt,name=pass_count,json=passCount" json:"pass_count,omitempty"`
	TotalBomb     uint32   `protobuf:"varint,19,opt,name=total_bomb,json=totalBomb" json:"total_bomb,omitempty"`
	// 结算阶段
	WinnerId   uint64 `protobuf:"varint,20,opt,name=winner_id,json=winnerId" json:"winner_id,omitempty"`
	Spring     bool   `protobuf:"varint,21,opt,name=spring" json:"spring,omitempty"`
	AntiSpring bool   `protobuf:"varint,22,opt,name=anti_spring,json=antiSpring" json:"anti_spring,omitempty"`
	// 恢复对局
	CallPlayerId   uint64   `protobuf:"varint,23,opt,name=call_player_id,json=callPlayerId" json:"call_player_id,omitempty"`
	GrabbedPlayers []uint64 `protobuf:"varint,24,rep,packed,name=grabbed_players,json=grabbedPlayers" json:"grabbed_players,omitempty"`
	DoubledPlayers []uint64 `protobuf:"varint,25,rep,packed,name=doubled_players,json=doubledPlayers" json:"doubled_players,omitempty"`
	Dipai          []uint32 `protobuf:"varint,26,rep,packed,name=dipai" json:"dipai,omitempty"`
	// 倒计时
	CountDownPlayers []uint64 `protobuf:"varint,27,rep,packed,name=count_down_players,json=countDownPlayers" json:"count_down_players,omitempty"`
	StartTime        []byte   `protobuf:"bytes,28,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration         uint32   `protobuf:"varint,29,opt,name=duration" json:"duration,omitempty"`
}

func (m *DDZContext) Reset()                    { *m = DDZContext{} }
func (m *DDZContext) String() string            { return proto.CompactTextString(m) }
func (*DDZContext) ProtoMessage()               {}
func (*DDZContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DDZContext) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *DDZContext) GetCurState() StateID {
	if m != nil {
		return m.CurState
	}
	return StateID_state_init
}

func (m *DDZContext) GetCurStage() DDZStage {
	if m != nil {
		return m.CurStage
	}
	return DDZStage_DDZ_STAGE_NONE
}

func (m *DDZContext) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *DDZContext) GetWallCards() []uint32 {
	if m != nil {
		return m.WallCards
	}
	return nil
}

func (m *DDZContext) GetCurrentPlayerId() uint64 {
	if m != nil {
		return m.CurrentPlayerId
	}
	return 0
}

func (m *DDZContext) GetFirstGrabPlayerId() uint64 {
	if m != nil {
		return m.FirstGrabPlayerId
	}
	return 0
}

func (m *DDZContext) GetLastGrabPlayerId() uint64 {
	if m != nil {
		return m.LastGrabPlayerId
	}
	return 0
}

func (m *DDZContext) GetGrabbedCount() uint32 {
	if m != nil {
		return m.GrabbedCount
	}
	return 0
}

func (m *DDZContext) GetLordPlayerId() uint64 {
	if m != nil {
		return m.LordPlayerId
	}
	return 0
}

func (m *DDZContext) GetAllAbandonCount() uint32 {
	if m != nil {
		return m.AllAbandonCount
	}
	return 0
}

func (m *DDZContext) GetTotalGrab() uint32 {
	if m != nil {
		return m.TotalGrab
	}
	return 0
}

func (m *DDZContext) GetDoubledCount() uint32 {
	if m != nil {
		return m.DoubledCount
	}
	return 0
}

func (m *DDZContext) GetTotalDouble() uint32 {
	if m != nil {
		return m.TotalDouble
	}
	return 0
}

func (m *DDZContext) GetCurOutCards() []uint32 {
	if m != nil {
		return m.CurOutCards
	}
	return nil
}

func (m *DDZContext) GetCurCardType() CardType {
	if m != nil {
		return m.CurCardType
	}
	return CardType_CT_NONE
}

func (m *DDZContext) GetCardTypePivot() uint32 {
	if m != nil {
		return m.CardTypePivot
	}
	return 0
}

func (m *DDZContext) GetPassCount() uint32 {
	if m != nil {
		return m.PassCount
	}
	return 0
}

func (m *DDZContext) GetTotalBomb() uint32 {
	if m != nil {
		return m.TotalBomb
	}
	return 0
}

func (m *DDZContext) GetWinnerId() uint64 {
	if m != nil {
		return m.WinnerId
	}
	return 0
}

func (m *DDZContext) GetSpring() bool {
	if m != nil {
		return m.Spring
	}
	return false
}

func (m *DDZContext) GetAntiSpring() bool {
	if m != nil {
		return m.AntiSpring
	}
	return false
}

func (m *DDZContext) GetCallPlayerId() uint64 {
	if m != nil {
		return m.CallPlayerId
	}
	return 0
}

func (m *DDZContext) GetGrabbedPlayers() []uint64 {
	if m != nil {
		return m.GrabbedPlayers
	}
	return nil
}

func (m *DDZContext) GetDoubledPlayers() []uint64 {
	if m != nil {
		return m.DoubledPlayers
	}
	return nil
}

func (m *DDZContext) GetDipai() []uint32 {
	if m != nil {
		return m.Dipai
	}
	return nil
}

func (m *DDZContext) GetCountDownPlayers() []uint64 {
	if m != nil {
		return m.CountDownPlayers
	}
	return nil
}

func (m *DDZContext) GetStartTime() []byte {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *DDZContext) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*Player)(nil), "ddz.Player")
	proto.RegisterType((*DDZContext)(nil), "ddz.DDZContext")
	proto.RegisterEnum("ddz.DDZStage", DDZStage_name, DDZStage_value)
}

func init() { proto.RegisterFile("doudizhu.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0xdf, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0xf1, 0x26, 0x4d, 0x9d, 0x13, 0xdb, 0x71, 0x66, 0xbb, 0xbb, 0x43, 0x77, 0x2b, 0x42,
	0x59, 0xd8, 0x50, 0x41, 0x11, 0xe5, 0x09, 0xd2, 0x3a, 0xaa, 0x22, 0x45, 0x6d, 0xe4, 0x14, 0x24,
	0x7a, 0x63, 0x8d, 0x3d, 0x26, 0x6b, 0xc9, 0xf1, 0x58, 0xf6, 0xb8, 0xa1, 0x7d, 0x15, 0x9e, 0x83,
	0xb7, 0xe1, 0x61, 0xd0, 0x9c, 0xb1, 0x9d, 0x04, 0xee, 0xe6, 0xfc, 0xce, 0xe7, 0x2f, 0x73, 0xfe,
	0x4c, 0xc0, 0xe1, 0xa2, 0xe2, 0xc9, 0xcb, 0xe7, 0xea, 0x32, 0x2f, 0x84, 0x14, 0xa4, 0xc3, 0xf9,
	0xcb, 0xa9, 0x55, 0x4a, 0x26, 0xe3, 0x52, 0xa3, 0x53, 0x2b, 0x7e, 0x8a, 0x33, 0x59, 0x47, 0xe7,
	0xff, 0x18, 0xd0, 0x5b, 0xa6, 0xec, 0x39, 0x2e, 0xc8, 0x7b, 0xe8, 0xe7, 0x78, 0x0a, 0x12, 0x4e,
	0x8d, 0xb1, 0x31, 0xe9, 0xfa, 0xa6, 0x06, 0x73, 0x4e, 0x08, 0x74, 0x53, 0x51, 0x70, 0xfa, 0x6a,
	0x6c, 0x4c, 0x4c, 0x1f, 0xcf, 0x8a, 0xad, 0x0b, 0x16, 0xd2, 0x8e, 0x66, 0xea, 0xac, 0x4c, 0x92,
	0x32, 0xe0, 0xa2, 0x0a, 0xd3, 0x98, 0x76, 0x31, 0x61, 0x26, 0xa5, 0x87, 0x31, 0x39, 0x03, 0xf8,
	0xcc, 0x32, 0x1e, 0x44, 0xac, 0xe0, 0x25, 0x3d, 0x1a, 0x77, 0x26, 0xb6, 0xdf, 0x57, 0xe4, 0x46,
	0x01, 0xf5, 0xad, 0xa8, 0x64, 0x9d, 0xed, 0x61, 0xd6, 0x14, 0x95, 0xd4, 0xc9, 0x73, 0xb0, 0x59,
	0x9a, 0x06, 0x3b, 0xc1, 0x31, 0x0a, 0x06, 0x2c, 0x4d, 0xef, 0x1b, 0x8d, 0x0b, 0x9d, 0x6d, 0x92,
	0x51, 0x13, 0x7f, 0x56, 0x1d, 0xcf, 0xff, 0x36, 0x01, 0x3c, 0xef, 0xf1, 0x46, 0x64, 0x32, 0xfe,
	0x53, 0x92, 0x77, 0x70, 0xbc, 0x66, 0x9b, 0xb8, 0x29, 0xf0, 0xc8, 0xef, 0xa9, 0x70, 0xce, 0xc9,
	0xf7, 0xd0, 0x8f, 0xaa, 0x22, 0xc0, 0x46, 0x61, 0x8d, 0xce, 0x95, 0x75, 0xc9, 0xf9, 0xcb, 0xe5,
	0x4a, 0x91, 0xb9, 0xe7, 0x9b, 0x51, 0x55, 0xe0, 0x99, 0x5c, 0xb4, 0xd2, 0x75, 0x8c, 0xa5, 0x3b,
	0x57, 0x36, 0x4a, 0x3d, 0xef, 0x71, 0xa5, 0x60, 0xa3, 0x5d, 0xc7, 0xe4, 0x5b, 0x38, 0xd6, 0x1d,
	0x2c, 0x69, 0x77, 0xdc, 0x99, 0x0c, 0xae, 0x06, 0xa8, 0xd4, 0x0d, 0xf7, 0x9b, 0x9c, 0xea, 0xcb,
	0x56, 0x15, 0x77, 0xd0, 0x17, 0x45, 0x74, 0x59, 0x17, 0x30, 0x8a, 0xaa, 0xa2, 0x88, 0x33, 0x19,
	0xec, 0x06, 0xd4, 0xc3, 0x01, 0x0d, 0xeb, 0xc4, 0xb2, 0x99, 0xd3, 0x4f, 0x70, 0xf2, 0x47, 0x52,
	0x94, 0x32, 0x50, 0xd3, 0xd8, 0x93, 0x1f, 0xa3, 0x7c, 0x84, 0xb9, 0xdb, 0x82, 0x85, 0xed, 0x07,
	0x3f, 0xc2, 0xeb, 0x94, 0xfd, 0x5f, 0x6f, 0xa2, 0xde, 0x55, 0xa9, 0x03, 0xf9, 0x37, 0x60, 0x2b,
	0x65, 0x18, 0xf3, 0x20, 0x12, 0x55, 0x26, 0x69, 0x7f, 0x6c, 0x4c, 0x6c, 0xdf, 0xaa, 0xe1, 0x8d,
	0x62, 0xe4, 0x23, 0x38, 0x6a, 0x41, 0xf6, 0xec, 0x00, 0xed, 0x2c, 0x45, 0x5b, 0xab, 0x0b, 0x18,
	0xa9, 0xa2, 0x59, 0xc8, 0x32, 0x2e, 0xb2, 0xda, 0x6e, 0x80, 0x76, 0x43, 0x96, 0xa6, 0x53, 0xcd,
	0xb5, 0xe3, 0x19, 0x80, 0x14, 0x92, 0xa5, 0x78, 0x4d, 0x6a, 0xa1, 0xa8, 0x8f, 0x44, 0xdd, 0x4e,
	0xdd, 0x4a, 0xaf, 0x5c, 0x73, 0x2b, 0x5b, 0xdf, 0xaa, 0x86, 0xda, 0xe3, 0x6b, 0xb0, 0xb4, 0x47,
	0xbd, 0x9d, 0x0e, 0x6a, 0x06, 0xc8, 0xea, 0x05, 0x3d, 0x07, 0x5b, 0xcd, 0x76, 0xb7, 0x64, 0x43,
	0xbd, 0x64, 0x51, 0x55, 0xb4, 0x4b, 0xf6, 0xb3, 0xd6, 0xa8, 0x7c, 0x20, 0x9f, 0xf3, 0x98, 0xba,
	0x7b, 0x3b, 0xa0, 0x24, 0x0f, 0xcf, 0x79, 0x8c, 0x9f, 0x34, 0x01, 0xf9, 0x0e, 0x86, 0xad, 0x3c,
	0xc8, 0x93, 0x27, 0x21, 0xe9, 0x08, 0x7f, 0xdc, 0x8e, 0x6a, 0xc9, 0x52, 0x41, 0x55, 0x65, 0xce,
	0xca, 0xb2, 0xae, 0x81, 0xe8, 0x2a, 0x15, 0xf9, 0x4f, 0x13, 0x42, 0xb1, 0x09, 0xe9, 0xeb, 0xbd,
	0x26, 0x5c, 0x8b, 0x0d, 0x3e, 0xbd, 0x6d, 0x92, 0x65, 0xba, 0xe1, 0x27, 0xfa, 0xfd, 0x6a, 0x30,
	0xe7, 0xe4, 0x2d, 0xf4, 0xca, 0xbc, 0x48, 0xb2, 0x35, 0x7d, 0x83, 0xaf, 0xa3, 0x8e, 0xc8, 0x57,
	0x30, 0x60, 0x99, 0x4c, 0x82, 0x3a, 0xf9, 0x16, 0x93, 0xa0, 0xd0, 0x4a, 0x0b, 0x3e, 0x82, 0x13,
	0xa9, 0x31, 0xed, 0x66, 0xf9, 0x4e, 0xcf, 0x52, 0xd1, 0x76, 0x96, 0x9f, 0x60, 0xd8, 0xac, 0x45,
	0xb3, 0xf0, 0x74, 0xdc, 0x99, 0x74, 0x7d, 0xa7, 0xc6, 0xcb, 0x7a, 0xd5, 0x3f, 0xc1, 0xb0, 0x99,
	0x54, 0x23, 0xfc, 0x52, 0x0b, 0x6b, 0xdc, 0x08, 0x4f, 0xe0, 0x88, 0x27, 0x39, 0x4b, 0xe8, 0x29,
	0x8e, 0x40, 0x07, 0xe4, 0x07, 0x20, 0xd8, 0x9c, 0x80, 0x8b, 0x6d, 0xd6, 0x3a, 0xbc, 0x47, 0x07,
	0x17, 0x33, 0x9e, 0xd8, 0x66, 0x8d, 0xc7, 0x07, 0xe8, 0x97, 0x92, 0x15, 0xf2, 0x21, 0xd9, 0xc4,
	0xf4, 0xc3, 0xd8, 0x98, 0x58, 0xfe, 0x0e, 0x90, 0x53, 0x30, 0x79, 0x55, 0x30, 0x99, 0x88, 0x8c,
	0x9e, 0x61, 0x33, 0xdb, 0xf8, 0xe2, 0x2f, 0x03, 0xcc, 0xe6, 0x3d, 0x13, 0x02, 0x8e, 0xe7, 0x3d,
	0x06, 0xab, 0x87, 0xe9, 0xed, 0x2c, 0xb8, 0xbb, 0xbf, 0x9b, 0xb9, 0x5f, 0x1c, 0x32, 0x6f, 0x36,
	0x5d, 0xb8, 0xc6, 0x21, 0xbb, 0x99, 0x2e, 0x16, 0xee, 0xab, 0x43, 0x76, 0xeb, 0x4f, 0xaf, 0xdd,
	0x0e, 0x39, 0x01, 0x77, 0xef, 0xdb, 0xfb, 0x5f, 0xaf, 0x17, 0x33, 0xb7, 0x4b, 0xde, 0xc0, 0x68,
	0x47, 0x97, 0x8b, 0xe9, 0xef, 0xf3, 0xbb, 0x5b, 0xf7, 0xe8, 0xd0, 0xe0, 0xfe, 0xb7, 0x99, 0xef,
	0xf6, 0xc2, 0x1e, 0xfe, 0x77, 0xff, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0xb8, 0x68,
	0x07, 0xee, 0x05, 0x00, 0x00,
}
