// Code generated by protoc-gen-go. DO NOT EDIT.
// source: doudizhu.proto

/*
Package ddz is a generated protocol buffer package.

It is generated from these files:
	doudizhu.proto
	events.proto
	states.proto

It has these top-level messages:
	Player
	DDZContext
	AutoEvent
	ReplyClientMessage
	TimeCheckInfo
	RequestEventHead
	GrabRequestEvent
	DoubleRequestEvent
	PlayCardRequestEvent
	TuoGuanRequestEvent
	ResumeRequestEvent
*/
package ddz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Player 玩家数据
type Player struct {
	PalyerId  uint64   `protobuf:"varint,1,opt,name=palyer_id,json=palyerId" json:"palyer_id,omitempty"`
	Lord      bool     `protobuf:"varint,2,opt,name=lord" json:"lord,omitempty"`
	Grab      bool     `protobuf:"varint,3,opt,name=grab" json:"grab,omitempty"`
	IsDouble  bool     `protobuf:"varint,4,opt,name=is_double,json=isDouble" json:"is_double,omitempty"`
	HandCards []uint32 `protobuf:"varint,5,rep,packed,name=hand_cards,json=handCards" json:"hand_cards,omitempty"`
	OutCards  []uint32 `protobuf:"varint,6,rep,packed,name=out_cards,json=outCards" json:"out_cards,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Player) GetPalyerId() uint64 {
	if m != nil {
		return m.PalyerId
	}
	return 0
}

func (m *Player) GetLord() bool {
	if m != nil {
		return m.Lord
	}
	return false
}

func (m *Player) GetGrab() bool {
	if m != nil {
		return m.Grab
	}
	return false
}

func (m *Player) GetIsDouble() bool {
	if m != nil {
		return m.IsDouble
	}
	return false
}

func (m *Player) GetHandCards() []uint32 {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *Player) GetOutCards() []uint32 {
	if m != nil {
		return m.OutCards
	}
	return nil
}

// DDZContext 麻将现场
type DDZContext struct {
	GameId          int32     `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CurState        StateID   `protobuf:"varint,2,opt,name=cur_state,json=curState,enum=ddz.StateID" json:"cur_state,omitempty"`
	Players         []*Player `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	WallCards       []uint32  `protobuf:"varint,4,rep,packed,name=wall_cards,json=wallCards" json:"wall_cards,omitempty"`
	CurrentPlayerId uint64    `protobuf:"varint,5,opt,name=current_player_id,json=currentPlayerId" json:"current_player_id,omitempty"`
	LastPlayerId    uint64    `protobuf:"varint,6,opt,name=last_player_id,json=lastPlayerId" json:"last_player_id,omitempty"`
	// 叫地主阶段
	FirstGrabPlayerId uint64 `protobuf:"varint,7,opt,name=first_grab_player_id,json=firstGrabPlayerId" json:"first_grab_player_id,omitempty"`
	GrabbedCount      uint32 `protobuf:"varint,8,opt,name=grabbed_count,json=grabbedCount" json:"grabbed_count,omitempty"`
	LordPlayerId      uint64 `protobuf:"varint,9,opt,name=lord_player_id,json=lordPlayerId" json:"lord_player_id,omitempty"`
	AllAbandonCount   uint32 `protobuf:"varint,10,opt,name=all_abandon_count,json=allAbandonCount" json:"all_abandon_count,omitempty"`
	// 加倍阶段
	DoubledCount uint32 `protobuf:"varint,11,opt,name=doubled_count,json=doubledCount" json:"doubled_count,omitempty"`
	// 出牌阶段
	CurOutCards   []uint32 `protobuf:"varint,12,rep,packed,name=cur_out_cards,json=curOutCards" json:"cur_out_cards,omitempty"`
	CurCardType   CardType `protobuf:"varint,13,opt,name=cur_card_type,json=curCardType,enum=ddz.CardType" json:"cur_card_type,omitempty"`
	CardTypePivot uint32   `protobuf:"varint,14,opt,name=card_type_pivot,json=cardTypePivot" json:"card_type_pivot,omitempty"`
	PassCount     uint32   `protobuf:"varint,15,opt,name=pass_count,json=passCount" json:"pass_count,omitempty"`
	TotalBomb     uint32   `protobuf:"varint,16,opt,name=total_bomb,json=totalBomb" json:"total_bomb,omitempty"`
	// 结算阶段
	WinnerId   uint64 `protobuf:"varint,17,opt,name=winner_id,json=winnerId" json:"winner_id,omitempty"`
	Spring     bool   `protobuf:"varint,18,opt,name=spring" json:"spring,omitempty"`
	AntiSpring bool   `protobuf:"varint,19,opt,name=anti_spring,json=antiSpring" json:"anti_spring,omitempty"`
	// 配牌
	Peipai string `protobuf:"bytes,20,opt,name=peipai" json:"peipai,omitempty"`
}

func (m *DDZContext) Reset()                    { *m = DDZContext{} }
func (m *DDZContext) String() string            { return proto.CompactTextString(m) }
func (*DDZContext) ProtoMessage()               {}
func (*DDZContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DDZContext) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *DDZContext) GetCurState() StateID {
	if m != nil {
		return m.CurState
	}
	return StateID_state_init
}

func (m *DDZContext) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *DDZContext) GetWallCards() []uint32 {
	if m != nil {
		return m.WallCards
	}
	return nil
}

func (m *DDZContext) GetCurrentPlayerId() uint64 {
	if m != nil {
		return m.CurrentPlayerId
	}
	return 0
}

func (m *DDZContext) GetLastPlayerId() uint64 {
	if m != nil {
		return m.LastPlayerId
	}
	return 0
}

func (m *DDZContext) GetFirstGrabPlayerId() uint64 {
	if m != nil {
		return m.FirstGrabPlayerId
	}
	return 0
}

func (m *DDZContext) GetGrabbedCount() uint32 {
	if m != nil {
		return m.GrabbedCount
	}
	return 0
}

func (m *DDZContext) GetLordPlayerId() uint64 {
	if m != nil {
		return m.LordPlayerId
	}
	return 0
}

func (m *DDZContext) GetAllAbandonCount() uint32 {
	if m != nil {
		return m.AllAbandonCount
	}
	return 0
}

func (m *DDZContext) GetDoubledCount() uint32 {
	if m != nil {
		return m.DoubledCount
	}
	return 0
}

func (m *DDZContext) GetCurOutCards() []uint32 {
	if m != nil {
		return m.CurOutCards
	}
	return nil
}

func (m *DDZContext) GetCurCardType() CardType {
	if m != nil {
		return m.CurCardType
	}
	return CardType_CT_NONE
}

func (m *DDZContext) GetCardTypePivot() uint32 {
	if m != nil {
		return m.CardTypePivot
	}
	return 0
}

func (m *DDZContext) GetPassCount() uint32 {
	if m != nil {
		return m.PassCount
	}
	return 0
}

func (m *DDZContext) GetTotalBomb() uint32 {
	if m != nil {
		return m.TotalBomb
	}
	return 0
}

func (m *DDZContext) GetWinnerId() uint64 {
	if m != nil {
		return m.WinnerId
	}
	return 0
}

func (m *DDZContext) GetSpring() bool {
	if m != nil {
		return m.Spring
	}
	return false
}

func (m *DDZContext) GetAntiSpring() bool {
	if m != nil {
		return m.AntiSpring
	}
	return false
}

func (m *DDZContext) GetPeipai() string {
	if m != nil {
		return m.Peipai
	}
	return ""
}

// AutoEvent 自动事件
type AutoEvent struct {
	EventId      EventID `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=ddz.EventID" json:"event_id,omitempty"`
	EventContext []byte  `protobuf:"bytes,2,opt,name=event_context,json=eventContext,proto3" json:"event_context,omitempty"`
	WaitTime     uint32  `protobuf:"varint,3,opt,name=wait_time,json=waitTime" json:"wait_time,omitempty"`
}

func (m *AutoEvent) Reset()                    { *m = AutoEvent{} }
func (m *AutoEvent) String() string            { return proto.CompactTextString(m) }
func (*AutoEvent) ProtoMessage()               {}
func (*AutoEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AutoEvent) GetEventId() EventID {
	if m != nil {
		return m.EventId
	}
	return EventID_event_invalid
}

func (m *AutoEvent) GetEventContext() []byte {
	if m != nil {
		return m.EventContext
	}
	return nil
}

func (m *AutoEvent) GetWaitTime() uint32 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

// ReplyClientMessage 回复给客户端的消息
type ReplyClientMessage struct {
	Players []uint64 `protobuf:"varint,1,rep,packed,name=players" json:"players,omitempty"`
	MsgId   int32    `protobuf:"varint,2,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Msg     []byte   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ReplyClientMessage) Reset()                    { *m = ReplyClientMessage{} }
func (m *ReplyClientMessage) String() string            { return proto.CompactTextString(m) }
func (*ReplyClientMessage) ProtoMessage()               {}
func (*ReplyClientMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReplyClientMessage) GetPlayers() []uint64 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ReplyClientMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyClientMessage) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

// TimeCheckInfo 时间检测信息
type TimeCheckInfo struct {
	Duration uint64 `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	Type     int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *TimeCheckInfo) Reset()                    { *m = TimeCheckInfo{} }
func (m *TimeCheckInfo) String() string            { return proto.CompactTextString(m) }
func (*TimeCheckInfo) ProtoMessage()               {}
func (*TimeCheckInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TimeCheckInfo) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TimeCheckInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func init() {
	proto.RegisterType((*Player)(nil), "ddz.Player")
	proto.RegisterType((*DDZContext)(nil), "ddz.DDZContext")
	proto.RegisterType((*AutoEvent)(nil), "ddz.AutoEvent")
	proto.RegisterType((*ReplyClientMessage)(nil), "ddz.ReplyClientMessage")
	proto.RegisterType((*TimeCheckInfo)(nil), "ddz.TimeCheckInfo")
}

func init() { proto.RegisterFile("doudizhu.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x54, 0x51, 0x6e, 0xdb, 0x38,
	0x10, 0x85, 0x63, 0x5b, 0x96, 0xc7, 0x92, 0x1d, 0x73, 0xb3, 0x59, 0x21, 0x8b, 0x60, 0x0d, 0x67,
	0x77, 0xeb, 0xe6, 0x23, 0x45, 0xd3, 0x03, 0x14, 0xa9, 0x5d, 0x14, 0xfa, 0x28, 0x1a, 0x28, 0x01,
	0x0a, 0xf4, 0x47, 0xa0, 0x44, 0xc6, 0x21, 0x2a, 0x89, 0x02, 0x49, 0x25, 0x75, 0x0e, 0xd4, 0x73,
	0xf5, 0x28, 0x05, 0x87, 0x92, 0x93, 0x3f, 0xce, 0x7b, 0x8f, 0x33, 0x43, 0x0e, 0x1f, 0x61, 0xca,
	0x64, 0xc3, 0xc4, 0xd3, 0x7d, 0x73, 0x51, 0x2b, 0x69, 0x24, 0xe9, 0x33, 0xf6, 0x74, 0x12, 0x68,
	0x43, 0x0d, 0xd7, 0x0e, 0x3a, 0x09, 0xf8, 0x03, 0xaf, 0x4c, 0x1b, 0x2d, 0x7f, 0xf6, 0xc0, 0xbb,
	0x2e, 0xe8, 0x8e, 0x2b, 0xf2, 0x37, 0x8c, 0x6b, 0x5a, 0xec, 0xb8, 0x4a, 0x05, 0x8b, 0x7a, 0x8b,
	0xde, 0x6a, 0x90, 0xf8, 0x0e, 0x88, 0x19, 0x21, 0x30, 0x28, 0xa4, 0x62, 0xd1, 0xc1, 0xa2, 0xb7,
	0xf2, 0x13, 0x5c, 0x5b, 0x6c, 0xab, 0x68, 0x16, 0xf5, 0x1d, 0x66, 0xd7, 0x36, 0x89, 0xd0, 0x29,
	0x93, 0x4d, 0x56, 0xf0, 0x68, 0x80, 0x84, 0x2f, 0xf4, 0x06, 0x63, 0x72, 0x0a, 0x70, 0x4f, 0x2b,
	0x96, 0xe6, 0x54, 0x31, 0x1d, 0x0d, 0x17, 0xfd, 0x55, 0x98, 0x8c, 0x2d, 0xb2, 0xb6, 0x80, 0xdd,
	0x2b, 0x1b, 0xd3, 0xb2, 0x1e, 0xb2, 0xbe, 0x6c, 0x0c, 0x92, 0xcb, 0x5f, 0x43, 0x80, 0xcd, 0xe6,
	0xdb, 0x5a, 0x56, 0x86, 0xff, 0x30, 0xe4, 0x2f, 0x18, 0x6d, 0x69, 0xc9, 0xbb, 0x56, 0x87, 0x89,
	0x67, 0xc3, 0x98, 0x91, 0xd7, 0x30, 0xce, 0x1b, 0x95, 0xe2, 0x91, 0xb1, 0xdb, 0xe9, 0x65, 0x70,
	0xc1, 0xd8, 0xd3, 0xc5, 0x8d, 0x45, 0xe2, 0x4d, 0xe2, 0xe7, 0x8d, 0xc2, 0x35, 0xf9, 0x0f, 0x46,
	0x35, 0x1e, 0x5d, 0x47, 0xfd, 0x45, 0x7f, 0x35, 0xb9, 0x9c, 0xa0, 0xd0, 0x5d, 0x47, 0xd2, 0x71,
	0xb6, 0xeb, 0x47, 0x5a, 0x14, 0x6d, 0x5f, 0x03, 0xd7, 0xb5, 0x45, 0x5c, 0xd7, 0xe7, 0x30, 0xcf,
	0x1b, 0xa5, 0x78, 0x65, 0x52, 0xb7, 0xc3, 0xf6, 0x34, 0xc4, 0xeb, 0x9b, 0xb5, 0x84, 0xcb, 0x18,
	0x33, 0xf2, 0x2f, 0x4c, 0x0b, 0xaa, 0x5f, 0x0a, 0x3d, 0x14, 0x06, 0x16, 0xdd, 0xab, 0xde, 0xc0,
	0xd1, 0x9d, 0x50, 0xda, 0xa4, 0xf6, 0x46, 0x5f, 0x68, 0x47, 0xa8, 0x9d, 0x23, 0xf7, 0x49, 0xd1,
	0x6c, 0xbf, 0xe1, 0x0c, 0x42, 0x2b, 0xcd, 0x38, 0x4b, 0x73, 0xd9, 0x54, 0x26, 0xf2, 0x17, 0xbd,
	0x55, 0x98, 0x04, 0x2d, 0xb8, 0xb6, 0x18, 0xd6, 0x96, 0x8a, 0xbd, 0xc8, 0x37, 0x6e, 0x6b, 0x4b,
	0xc5, 0xf6, 0xa9, 0xce, 0x61, 0x6e, 0xcf, 0x4a, 0x33, 0x5a, 0x31, 0x59, 0xb5, 0xe9, 0x00, 0xd3,
	0xcd, 0x68, 0x51, 0x5c, 0x39, 0xdc, 0x65, 0x3c, 0x83, 0xd0, 0x0d, 0xba, 0x2b, 0x3b, 0x71, 0x65,
	0x5b, 0xd0, 0x89, 0x96, 0x10, 0xda, 0x79, 0x3c, 0x0f, 0x36, 0xc0, 0x0b, 0x9c, 0xe4, 0x8d, 0xfa,
	0xd2, 0xce, 0x96, 0xbc, 0x75, 0x1a, 0xcb, 0xa7, 0x66, 0x57, 0xf3, 0x28, 0xc4, 0xb9, 0x85, 0x38,
	0x0e, 0x2b, 0xb9, 0xdd, 0xd5, 0x1c, 0xb7, 0x74, 0x01, 0xf9, 0x1f, 0x66, 0x7b, 0x79, 0x5a, 0x8b,
	0x07, 0x69, 0xa2, 0x29, 0x56, 0x0f, 0xf3, 0x56, 0x72, 0x6d, 0x41, 0x3b, 0xbc, 0x9a, 0x6a, 0xdd,
	0x36, 0x38, 0x43, 0xc9, 0xd8, 0x22, 0xae, 0xbb, 0x53, 0x00, 0x23, 0x0d, 0x2d, 0xd2, 0x4c, 0x96,
	0x59, 0x74, 0xe8, 0x68, 0x44, 0x3e, 0xc8, 0x12, 0x5f, 0xf3, 0xa3, 0xa8, 0x2a, 0x77, 0x5d, 0x73,
	0x67, 0x09, 0x07, 0xc4, 0x8c, 0x1c, 0x83, 0xa7, 0x6b, 0x25, 0xaa, 0x6d, 0x44, 0xf0, 0x9d, 0xb7,
	0x11, 0xf9, 0x07, 0x26, 0xb4, 0x32, 0x22, 0x6d, 0xc9, 0x3f, 0x90, 0x04, 0x0b, 0xdd, 0x38, 0xc1,
	0x31, 0x78, 0x35, 0x17, 0x35, 0x15, 0xd1, 0xd1, 0xa2, 0xb7, 0x1a, 0x27, 0x6d, 0xb4, 0x7c, 0x80,
	0xf1, 0x55, 0x63, 0xe4, 0x47, 0xeb, 0x4f, 0xf2, 0x0a, 0x7c, 0x34, 0x6a, 0xf7, 0xc2, 0xbb, 0x67,
	0x8c, 0x6c, 0xbc, 0x49, 0x46, 0xc8, 0xba, 0xe1, 0x3b, 0x61, 0xee, 0xac, 0x81, 0x8f, 0x3e, 0x48,
	0x9c, 0xcd, 0x3b, 0xbb, 0xd8, 0x83, 0x50, 0x61, 0x52, 0x23, 0x4a, 0x8e, 0x7e, 0x0d, 0x13, 0xdf,
	0x02, 0xb7, 0xa2, 0xe4, 0xcb, 0xaf, 0x40, 0x12, 0x5e, 0x17, 0xbb, 0x75, 0x21, 0x78, 0x65, 0x3e,
	0x73, 0xad, 0xe9, 0x96, 0x93, 0xe8, 0xd9, 0x1d, 0xbd, 0x45, 0x7f, 0x35, 0x78, 0x36, 0xc4, 0x9f,
	0xe0, 0x95, 0x7a, 0x6b, 0x1b, 0x3b, 0x40, 0xeb, 0x0d, 0x4b, 0xbd, 0x8d, 0x19, 0x39, 0x84, 0x7e,
	0xa9, 0xb7, 0x98, 0x3d, 0x48, 0xec, 0x72, 0xf9, 0x1e, 0x42, 0x5b, 0x60, 0x7d, 0xcf, 0xf3, 0xef,
	0x71, 0x75, 0x27, 0xc9, 0x09, 0xf8, 0xac, 0x51, 0xd4, 0x08, 0x59, 0x75, 0x3f, 0x4c, 0x17, 0xdb,
	0xdf, 0x04, 0x67, 0xef, 0x72, 0xe2, 0x3a, 0xf3, 0xf0, 0x93, 0x7a, 0xf7, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x95, 0x5f, 0x71, 0xd7, 0x04, 0x00, 0x00,
}
