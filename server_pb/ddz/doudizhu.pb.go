// Code generated by protoc-gen-go. DO NOT EDIT.
// source: doudizhu.proto

package ddz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DDZStage int32

const (
	DDZStage_DDZ_STAGE_NONE    DDZStage = 0
	DDZStage_DDZ_STAGE_DEAL    DDZStage = 1
	DDZStage_DDZ_STAGE_CALL    DDZStage = 2
	DDZStage_DDZ_STAGE_GRAB    DDZStage = 3
	DDZStage_DDZ_STAGE_DOUBLE  DDZStage = 4
	DDZStage_DDZ_STAGE_PLAYING DDZStage = 5
	DDZStage_DDZ_STAGE_OVER    DDZStage = 6
)

var DDZStage_name = map[int32]string{
	0: "DDZ_STAGE_NONE",
	1: "DDZ_STAGE_DEAL",
	2: "DDZ_STAGE_CALL",
	3: "DDZ_STAGE_GRAB",
	4: "DDZ_STAGE_DOUBLE",
	5: "DDZ_STAGE_PLAYING",
	6: "DDZ_STAGE_OVER",
}
var DDZStage_value = map[string]int32{
	"DDZ_STAGE_NONE":    0,
	"DDZ_STAGE_DEAL":    1,
	"DDZ_STAGE_CALL":    2,
	"DDZ_STAGE_GRAB":    3,
	"DDZ_STAGE_DOUBLE":  4,
	"DDZ_STAGE_PLAYING": 5,
	"DDZ_STAGE_OVER":    6,
}

func (x DDZStage) String() string {
	return proto.EnumName(DDZStage_name, int32(x))
}
func (DDZStage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_doudizhu_78947f1c1f12fcaf, []int{0}
}

// Player 玩家数据
type Player struct {
	PlayerId             uint64   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Lord                 bool     `protobuf:"varint,2,opt,name=lord,proto3" json:"lord,omitempty"`
	Grab                 bool     `protobuf:"varint,3,opt,name=grab,proto3" json:"grab,omitempty"`
	IsDouble             bool     `protobuf:"varint,4,opt,name=is_double,json=isDouble,proto3" json:"is_double,omitempty"`
	HandCards            []uint32 `protobuf:"varint,5,rep,packed,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`
	OutCards             []uint32 `protobuf:"varint,6,rep,packed,name=out_cards,json=outCards,proto3" json:"out_cards,omitempty"`
	AllOutCards          []uint32 `protobuf:"varint,7,rep,packed,name=all_out_cards,json=allOutCards,proto3" json:"all_out_cards,omitempty"`
	Win                  bool     `protobuf:"varint,8,opt,name=win,proto3" json:"win,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_doudizhu_78947f1c1f12fcaf, []int{0}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (dst *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(dst, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Player) GetLord() bool {
	if m != nil {
		return m.Lord
	}
	return false
}

func (m *Player) GetGrab() bool {
	if m != nil {
		return m.Grab
	}
	return false
}

func (m *Player) GetIsDouble() bool {
	if m != nil {
		return m.IsDouble
	}
	return false
}

func (m *Player) GetHandCards() []uint32 {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *Player) GetOutCards() []uint32 {
	if m != nil {
		return m.OutCards
	}
	return nil
}

func (m *Player) GetAllOutCards() []uint32 {
	if m != nil {
		return m.AllOutCards
	}
	return nil
}

func (m *Player) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

// DDZContext 麻将现场
type DDZContext struct {
	GameId          int32     `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	CurState        StateID   `protobuf:"varint,2,opt,name=cur_state,json=curState,proto3,enum=ddz.StateID" json:"cur_state,omitempty"`
	CurStage        DDZStage  `protobuf:"varint,3,opt,name=cur_stage,json=curStage,proto3,enum=ddz.DDZStage" json:"cur_stage,omitempty"`
	Players         []*Player `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	Dipai           []uint32  `protobuf:"varint,5,rep,packed,name=dipai,proto3" json:"dipai,omitempty"`
	CurrentPlayerId uint64    `protobuf:"varint,6,opt,name=current_player_id,json=currentPlayerId,proto3" json:"current_player_id,omitempty"`
	// 叫地主阶段
	CallPlayerId      uint64 `protobuf:"varint,7,opt,name=call_player_id,json=callPlayerId,proto3" json:"call_player_id,omitempty"`
	FirstGrabPlayerId uint64 `protobuf:"varint,8,opt,name=first_grab_player_id,json=firstGrabPlayerId,proto3" json:"first_grab_player_id,omitempty"`
	LastGrabPlayerId  uint64 `protobuf:"varint,9,opt,name=last_grab_player_id,json=lastGrabPlayerId,proto3" json:"last_grab_player_id,omitempty"`
	GrabbedCount      uint32 `protobuf:"varint,10,opt,name=grabbed_count,json=grabbedCount,proto3" json:"grabbed_count,omitempty"`
	LordPlayerId      uint64 `protobuf:"varint,11,opt,name=lord_player_id,json=lordPlayerId,proto3" json:"lord_player_id,omitempty"`
	AllAbandonCount   uint32 `protobuf:"varint,12,opt,name=all_abandon_count,json=allAbandonCount,proto3" json:"all_abandon_count,omitempty"`
	TotalGrab         uint32 `protobuf:"varint,13,opt,name=total_grab,json=totalGrab,proto3" json:"total_grab,omitempty"`
	// 加倍阶段
	DoubledPlayers []uint64 `protobuf:"varint,14,rep,packed,name=doubled_players,json=doubledPlayers,proto3" json:"doubled_players,omitempty"`
	TotalDouble    uint32   `protobuf:"varint,15,opt,name=total_double,json=totalDouble,proto3" json:"total_double,omitempty"`
	// 出牌阶段
	CurOutCards   []uint32 `protobuf:"varint,16,rep,packed,name=cur_out_cards,json=curOutCards,proto3" json:"cur_out_cards,omitempty"`
	CurCardType   CardType `protobuf:"varint,17,opt,name=cur_card_type,json=curCardType,proto3,enum=ddz.CardType" json:"cur_card_type,omitempty"`
	CardTypePivot uint32   `protobuf:"varint,18,opt,name=card_type_pivot,json=cardTypePivot,proto3" json:"card_type_pivot,omitempty"`
	PassCount     uint32   `protobuf:"varint,19,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`
	TotalBomb     uint32   `protobuf:"varint,20,opt,name=total_bomb,json=totalBomb,proto3" json:"total_bomb,omitempty"`
	// 结算阶段
	WinnerId   uint64 `protobuf:"varint,21,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`
	Spring     bool   `protobuf:"varint,22,opt,name=spring,proto3" json:"spring,omitempty"`
	AntiSpring bool   `protobuf:"varint,23,opt,name=anti_spring,json=antiSpring,proto3" json:"anti_spring,omitempty"`
	// 恢复对局
	GrabbedPlayers []uint64 `protobuf:"varint,24,rep,packed,name=grabbed_players,json=grabbedPlayers,proto3" json:"grabbed_players,omitempty"`
	// 倒计时
	CountDownPlayers     []uint64 `protobuf:"varint,25,rep,packed,name=count_down_players,json=countDownPlayers,proto3" json:"count_down_players,omitempty"`
	StartTime            []byte   `protobuf:"bytes,26,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration             uint32   `protobuf:"varint,27,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DDZContext) Reset()         { *m = DDZContext{} }
func (m *DDZContext) String() string { return proto.CompactTextString(m) }
func (*DDZContext) ProtoMessage()    {}
func (*DDZContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_doudizhu_78947f1c1f12fcaf, []int{1}
}
func (m *DDZContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DDZContext.Unmarshal(m, b)
}
func (m *DDZContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DDZContext.Marshal(b, m, deterministic)
}
func (dst *DDZContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDZContext.Merge(dst, src)
}
func (m *DDZContext) XXX_Size() int {
	return xxx_messageInfo_DDZContext.Size(m)
}
func (m *DDZContext) XXX_DiscardUnknown() {
	xxx_messageInfo_DDZContext.DiscardUnknown(m)
}

var xxx_messageInfo_DDZContext proto.InternalMessageInfo

func (m *DDZContext) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *DDZContext) GetCurState() StateID {
	if m != nil {
		return m.CurState
	}
	return StateID_state_init
}

func (m *DDZContext) GetCurStage() DDZStage {
	if m != nil {
		return m.CurStage
	}
	return DDZStage_DDZ_STAGE_NONE
}

func (m *DDZContext) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *DDZContext) GetDipai() []uint32 {
	if m != nil {
		return m.Dipai
	}
	return nil
}

func (m *DDZContext) GetCurrentPlayerId() uint64 {
	if m != nil {
		return m.CurrentPlayerId
	}
	return 0
}

func (m *DDZContext) GetCallPlayerId() uint64 {
	if m != nil {
		return m.CallPlayerId
	}
	return 0
}

func (m *DDZContext) GetFirstGrabPlayerId() uint64 {
	if m != nil {
		return m.FirstGrabPlayerId
	}
	return 0
}

func (m *DDZContext) GetLastGrabPlayerId() uint64 {
	if m != nil {
		return m.LastGrabPlayerId
	}
	return 0
}

func (m *DDZContext) GetGrabbedCount() uint32 {
	if m != nil {
		return m.GrabbedCount
	}
	return 0
}

func (m *DDZContext) GetLordPlayerId() uint64 {
	if m != nil {
		return m.LordPlayerId
	}
	return 0
}

func (m *DDZContext) GetAllAbandonCount() uint32 {
	if m != nil {
		return m.AllAbandonCount
	}
	return 0
}

func (m *DDZContext) GetTotalGrab() uint32 {
	if m != nil {
		return m.TotalGrab
	}
	return 0
}

func (m *DDZContext) GetDoubledPlayers() []uint64 {
	if m != nil {
		return m.DoubledPlayers
	}
	return nil
}

func (m *DDZContext) GetTotalDouble() uint32 {
	if m != nil {
		return m.TotalDouble
	}
	return 0
}

func (m *DDZContext) GetCurOutCards() []uint32 {
	if m != nil {
		return m.CurOutCards
	}
	return nil
}

func (m *DDZContext) GetCurCardType() CardType {
	if m != nil {
		return m.CurCardType
	}
	return CardType_CT_NONE
}

func (m *DDZContext) GetCardTypePivot() uint32 {
	if m != nil {
		return m.CardTypePivot
	}
	return 0
}

func (m *DDZContext) GetPassCount() uint32 {
	if m != nil {
		return m.PassCount
	}
	return 0
}

func (m *DDZContext) GetTotalBomb() uint32 {
	if m != nil {
		return m.TotalBomb
	}
	return 0
}

func (m *DDZContext) GetWinnerId() uint64 {
	if m != nil {
		return m.WinnerId
	}
	return 0
}

func (m *DDZContext) GetSpring() bool {
	if m != nil {
		return m.Spring
	}
	return false
}

func (m *DDZContext) GetAntiSpring() bool {
	if m != nil {
		return m.AntiSpring
	}
	return false
}

func (m *DDZContext) GetGrabbedPlayers() []uint64 {
	if m != nil {
		return m.GrabbedPlayers
	}
	return nil
}

func (m *DDZContext) GetCountDownPlayers() []uint64 {
	if m != nil {
		return m.CountDownPlayers
	}
	return nil
}

func (m *DDZContext) GetStartTime() []byte {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *DDZContext) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*Player)(nil), "ddz.Player")
	proto.RegisterType((*DDZContext)(nil), "ddz.DDZContext")
	proto.RegisterEnum("ddz.DDZStage", DDZStage_name, DDZStage_value)
}

func init() { proto.RegisterFile("doudizhu.proto", fileDescriptor_doudizhu_78947f1c1f12fcaf) }

var fileDescriptor_doudizhu_78947f1c1f12fcaf = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x94, 0xeb, 0x6e, 0xda, 0x4a,
	0x10, 0xc7, 0x0f, 0xe1, 0x66, 0x06, 0x03, 0x66, 0x73, 0xdb, 0x43, 0xce, 0xd1, 0xc9, 0x49, 0x6f,
	0x69, 0xd4, 0xa6, 0x6a, 0xfa, 0x04, 0x04, 0x10, 0x8a, 0x84, 0x02, 0x32, 0x69, 0xa5, 0xf6, 0x8b,
	0x65, 0xb0, 0x4b, 0x2c, 0x11, 0xdb, 0xb2, 0x97, 0xa4, 0xc9, 0xab, 0xf4, 0xd5, 0xfa, 0x12, 0x7d,
	0x83, 0xce, 0xce, 0xae, 0x0d, 0xb4, 0xdf, 0x76, 0x7f, 0xf3, 0xf7, 0xec, 0xce, 0x7f, 0x66, 0x0d,
	0x4d, 0x2f, 0x5a, 0x79, 0xc1, 0xd3, 0xed, 0xea, 0x3c, 0x4e, 0x22, 0x11, 0xb1, 0xa2, 0xe7, 0x3d,
	0x75, 0xcc, 0x54, 0xb8, 0xc2, 0x4f, 0x15, 0xea, 0x98, 0xfe, 0xbd, 0x1f, 0x0a, 0xbd, 0x3b, 0xf9,
	0x51, 0x80, 0xca, 0x64, 0xe9, 0x3e, 0xfa, 0x09, 0x3b, 0x82, 0x5a, 0x4c, 0x2b, 0x27, 0xf0, 0x78,
	0xe1, 0xb8, 0x70, 0x5a, 0xb2, 0x0d, 0x05, 0xae, 0x3c, 0xc6, 0xa0, 0xb4, 0x8c, 0x12, 0x8f, 0xef,
	0x20, 0x37, 0x6c, 0x5a, 0x4b, 0xb6, 0x48, 0xdc, 0x19, 0x2f, 0x2a, 0x26, 0xd7, 0x32, 0x49, 0x90,
	0x3a, 0x78, 0x8b, 0xd9, 0xd2, 0xe7, 0x25, 0x0a, 0x18, 0x41, 0xda, 0xa7, 0x3d, 0xfb, 0x17, 0xe0,
	0xd6, 0x0d, 0x3d, 0x67, 0xee, 0x26, 0x5e, 0xca, 0xcb, 0xc7, 0xc5, 0xd3, 0x86, 0x5d, 0x93, 0xa4,
	0x27, 0x81, 0xfc, 0x36, 0x5a, 0x09, 0x1d, 0xad, 0x50, 0xd4, 0x40, 0xa0, 0x82, 0x27, 0xd0, 0x70,
	0x97, 0x4b, 0x67, 0x2d, 0xa8, 0x92, 0xa0, 0x8e, 0x70, 0x9c, 0x69, 0x2c, 0x28, 0x3e, 0x04, 0x21,
	0x37, 0xe8, 0x58, 0xb9, 0x3c, 0xf9, 0x59, 0x05, 0xe8, 0xf7, 0xbf, 0xf4, 0xa2, 0x50, 0xf8, 0xdf,
	0x04, 0x3b, 0x84, 0xea, 0xc2, 0xbd, 0xf3, 0xb3, 0x02, 0xcb, 0x76, 0x45, 0x6e, 0xb1, 0xbc, 0xd7,
	0x50, 0x9b, 0xaf, 0x12, 0x87, 0x8c, 0xa2, 0x1a, 0x9b, 0x17, 0xe6, 0x39, 0x7a, 0x77, 0x3e, 0x95,
	0xe4, 0xaa, 0x6f, 0x1b, 0x18, 0xa6, 0x35, 0x3b, 0xcb, 0xa5, 0x0b, 0x9f, 0x4a, 0x6f, 0x5e, 0x34,
	0x48, 0x8a, 0xe7, 0x4c, 0x25, 0xcc, 0xb4, 0x0b, 0x9f, 0xbd, 0x80, 0xaa, 0x72, 0x30, 0x45, 0x2f,
	0x8a, 0xa7, 0xf5, 0x8b, 0x3a, 0x29, 0x95, 0xe1, 0x76, 0x16, 0x63, 0x7b, 0x50, 0xf6, 0x82, 0xd8,
	0x0d, 0xb4, 0x25, 0x6a, 0x83, 0x07, 0xb5, 0x31, 0x51, 0x82, 0xcd, 0x72, 0xd6, 0x7d, 0xa9, 0x50,
	0x5f, 0x5a, 0x3a, 0x30, 0xc9, 0xda, 0xf3, 0x1c, 0x9a, 0x73, 0x69, 0xcf, 0x5a, 0x58, 0x25, 0xa1,
	0x29, 0x69, 0xae, 0x7a, 0x07, 0x7b, 0x5f, 0x83, 0x24, 0x15, 0x8e, 0x6c, 0xd5, 0x86, 0xd6, 0x20,
	0x6d, 0x9b, 0x62, 0x43, 0x0c, 0xe5, 0x1f, 0xbc, 0x85, 0xdd, 0xa5, 0xfb, 0xa7, 0xbe, 0x46, 0x7a,
	0x4b, 0x86, 0xb6, 0xe4, 0xcf, 0xa0, 0x21, 0x95, 0x33, 0x1f, 0x5b, 0x1c, 0xad, 0x42, 0xc1, 0x01,
	0x85, 0x0d, 0xdb, 0xd4, 0xb0, 0x27, 0x99, 0xbc, 0xaa, 0x9c, 0x9e, 0x8d, 0x74, 0x75, 0x75, 0x55,
	0x49, 0xf3, 0x54, 0x58, 0xbc, 0xac, 0xc7, 0x9d, 0xe1, 0x74, 0x44, 0xa1, 0x4e, 0x67, 0x52, 0xba,
	0x16, 0x06, 0xba, 0x8a, 0xab, 0x8c, 0x38, 0x56, 0x22, 0x12, 0xee, 0x92, 0xae, 0xc9, 0x1b, 0x24,
	0xaa, 0x11, 0x91, 0xb7, 0x63, 0xaf, 0xa0, 0xa5, 0xe6, 0x31, 0x3b, 0x33, 0xe5, 0x4d, 0xf4, 0xb9,
	0x64, 0x37, 0x35, 0x9e, 0xe8, 0x36, 0xfc, 0x0f, 0xa6, 0xca, 0xa3, 0xc7, 0xb7, 0x45, 0x99, 0xea,
	0xc4, 0xf4, 0x04, 0xe3, 0x14, 0xca, 0xe6, 0xaf, 0xa7, 0xd0, 0x52, 0x53, 0x88, 0x30, 0x9f, 0xc2,
	0xf7, 0x4a, 0x23, 0xe3, 0x8e, 0x78, 0x8c, 0x7d, 0xde, 0xde, 0x18, 0x12, 0x29, 0xb9, 0x41, 0x48,
	0x9f, 0x64, 0x1b, 0xf6, 0x12, 0x5a, 0xb9, 0xdc, 0x89, 0x83, 0xfb, 0x48, 0x70, 0x46, 0x87, 0x37,
	0xe6, 0x5a, 0x32, 0x91, 0x50, 0x56, 0x1a, 0xbb, 0x69, 0xaa, 0xed, 0xd8, 0x55, 0x95, 0x4a, 0xf2,
	0x9b, 0x11, 0xb3, 0xe8, 0x6e, 0xc6, 0xf7, 0x36, 0x8c, 0xb8, 0x44, 0x20, 0xdf, 0x17, 0xbe, 0x89,
	0x50, 0x99, 0xbe, 0xaf, 0x1e, 0xb8, 0x02, 0x68, 0xf8, 0x01, 0x54, 0xd2, 0x38, 0x09, 0xc2, 0x05,
	0x3f, 0xa0, 0xe7, 0xa3, 0x77, 0xec, 0x3f, 0xa8, 0xbb, 0xa1, 0x08, 0x1c, 0x1d, 0x3c, 0xa4, 0x20,
	0x48, 0x34, 0x55, 0x02, 0xb4, 0x37, 0x6b, 0x7a, 0x66, 0x2f, 0x57, 0xf6, 0x6a, 0x9c, 0xd9, 0xfb,
	0x06, 0x18, 0xdd, 0x1b, 0xed, 0x7d, 0x08, 0x73, 0xed, 0xdf, 0xa4, 0xb5, 0x28, 0xd2, 0xc7, 0x40,
	0xa6, 0xfe, 0x07, 0x6a, 0xf8, 0xc4, 0x12, 0x71, 0x13, 0xdc, 0xf9, 0xbc, 0x83, 0xa7, 0x9a, 0xf6,
	0x1a, 0xb0, 0x0e, 0x18, 0xde, 0x2a, 0x71, 0x45, 0x10, 0x85, 0xfc, 0x88, 0xea, 0xcc, 0xf7, 0x67,
	0xdf, 0x0b, 0x60, 0x64, 0x6f, 0x11, 0xff, 0x51, 0x4d, 0x5c, 0x3b, 0xd3, 0x9b, 0xee, 0x70, 0xe0,
	0x5c, 0x8f, 0xaf, 0x07, 0xd6, 0x5f, 0xdb, 0xac, 0x3f, 0xe8, 0x8e, 0xac, 0xc2, 0x36, 0xeb, 0x75,
	0x47, 0x23, 0x6b, 0x67, 0x9b, 0x0d, 0xed, 0xee, 0xa5, 0x55, 0xc4, 0xa7, 0x6a, 0x6d, 0x7c, 0x3b,
	0xfe, 0x78, 0x39, 0x1a, 0x58, 0x25, 0xb6, 0x0f, 0xed, 0x35, 0x9d, 0x8c, 0xba, 0x9f, 0xaf, 0xae,
	0x87, 0x56, 0x79, 0x3b, 0xc1, 0xf8, 0xd3, 0xc0, 0xb6, 0x2a, 0xb3, 0x0a, 0xfd, 0x77, 0x3f, 0xfc,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x62, 0xd3, 0x17, 0x70, 0xaa, 0x05, 0x00, 0x00,
}
