// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

package ddz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// EventID 事件 ID
type EventID int32

const (
	EventID_event_invalid         EventID = 0
	EventID_event_start_game      EventID = 1
	EventID_event_deal_finish     EventID = 2
	EventID_event_grab_request    EventID = 3
	EventID_event_double_request  EventID = 4
	EventID_event_chupai_request  EventID = 5
	EventID_event_tuoguan_request EventID = 6
	EventID_event_timer           EventID = 7
	EventID_event_resume_request  EventID = 8
)

var EventID_name = map[int32]string{
	0: "event_invalid",
	1: "event_start_game",
	2: "event_deal_finish",
	3: "event_grab_request",
	4: "event_double_request",
	5: "event_chupai_request",
	6: "event_tuoguan_request",
	7: "event_timer",
	8: "event_resume_request",
}
var EventID_value = map[string]int32{
	"event_invalid":         0,
	"event_start_game":      1,
	"event_deal_finish":     2,
	"event_grab_request":    3,
	"event_double_request":  4,
	"event_chupai_request":  5,
	"event_tuoguan_request": 6,
	"event_timer":           7,
	"event_resume_request":  8,
}

func (x EventID) String() string {
	return proto.EnumName(EventID_name, int32(x))
}
func (EventID) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CardType int32

const (
	CardType_CT_NONE     CardType = 0
	CardType_CT_SINGLE   CardType = 1
	CardType_CT_PAIR     CardType = 2
	CardType_CT_SHUNZI   CardType = 3
	CardType_CT_PAIRS    CardType = 4
	CardType_CT_TRIPLE   CardType = 5
	CardType_CT_3AND1    CardType = 6
	CardType_CT_3AND2    CardType = 7
	CardType_CT_TRIPLES  CardType = 8
	CardType_CT_3SAND1S  CardType = 9
	CardType_CT_3SAND2S  CardType = 10
	CardType_CT_4SAND1S  CardType = 11
	CardType_CT_4SAND2S  CardType = 12
	CardType_CT_BOMB     CardType = 13
	CardType_CT_KINGBOMB CardType = 14
)

var CardType_name = map[int32]string{
	0:  "CT_NONE",
	1:  "CT_SINGLE",
	2:  "CT_PAIR",
	3:  "CT_SHUNZI",
	4:  "CT_PAIRS",
	5:  "CT_TRIPLE",
	6:  "CT_3AND1",
	7:  "CT_3AND2",
	8:  "CT_TRIPLES",
	9:  "CT_3SAND1S",
	10: "CT_3SAND2S",
	11: "CT_4SAND1S",
	12: "CT_4SAND2S",
	13: "CT_BOMB",
	14: "CT_KINGBOMB",
}
var CardType_value = map[string]int32{
	"CT_NONE":     0,
	"CT_SINGLE":   1,
	"CT_PAIR":     2,
	"CT_SHUNZI":   3,
	"CT_PAIRS":    4,
	"CT_TRIPLE":   5,
	"CT_3AND1":    6,
	"CT_3AND2":    7,
	"CT_TRIPLES":  8,
	"CT_3SAND1S":  9,
	"CT_3SAND2S":  10,
	"CT_4SAND1S":  11,
	"CT_4SAND2S":  12,
	"CT_BOMB":     13,
	"CT_KINGBOMB": 14,
}

func (x CardType) String() string {
	return proto.EnumName(CardType_name, int32(x))
}
func (CardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// RequestEventHead 请求事件通用头
type RequestEventHead struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *RequestEventHead) Reset()                    { *m = RequestEventHead{} }
func (m *RequestEventHead) String() string            { return proto.CompactTextString(m) }
func (*RequestEventHead) ProtoMessage()               {}
func (*RequestEventHead) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RequestEventHead) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// GrabRequestEvent 叫/抢地主请求事件
type GrabRequestEvent struct {
	Head *RequestEventHead `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	Grab bool              `protobuf:"varint,2,opt,name=grab" json:"grab,omitempty"`
}

func (m *GrabRequestEvent) Reset()                    { *m = GrabRequestEvent{} }
func (m *GrabRequestEvent) String() string            { return proto.CompactTextString(m) }
func (*GrabRequestEvent) ProtoMessage()               {}
func (*GrabRequestEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GrabRequestEvent) GetHead() *RequestEventHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GrabRequestEvent) GetGrab() bool {
	if m != nil {
		return m.Grab
	}
	return false
}

// DoubleRequestEvent 加倍请求事件
type DoubleRequestEvent struct {
	Head     *RequestEventHead `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	IsDouble bool              `protobuf:"varint,2,opt,name=is_double,json=isDouble" json:"is_double,omitempty"`
}

func (m *DoubleRequestEvent) Reset()                    { *m = DoubleRequestEvent{} }
func (m *DoubleRequestEvent) String() string            { return proto.CompactTextString(m) }
func (*DoubleRequestEvent) ProtoMessage()               {}
func (*DoubleRequestEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DoubleRequestEvent) GetHead() *RequestEventHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *DoubleRequestEvent) GetIsDouble() bool {
	if m != nil {
		return m.IsDouble
	}
	return false
}

// PlayCardRequestEvent 出牌请求事件
type PlayCardRequestEvent struct {
	Head     *RequestEventHead `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	Cards    []uint32          `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
	CardType CardType          `protobuf:"varint,3,opt,name=card_type,json=cardType,enum=ddz.CardType" json:"card_type,omitempty"`
}

func (m *PlayCardRequestEvent) Reset()                    { *m = PlayCardRequestEvent{} }
func (m *PlayCardRequestEvent) String() string            { return proto.CompactTextString(m) }
func (*PlayCardRequestEvent) ProtoMessage()               {}
func (*PlayCardRequestEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PlayCardRequestEvent) GetHead() *RequestEventHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *PlayCardRequestEvent) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *PlayCardRequestEvent) GetCardType() CardType {
	if m != nil {
		return m.CardType
	}
	return CardType_CT_NONE
}

// TuoGuanRequestEvent 托管请求事件
type TuoGuanRequestEvent struct {
	Head    *RequestEventHead `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	Tuoguan bool              `protobuf:"varint,2,opt,name=tuoguan" json:"tuoguan,omitempty"`
}

func (m *TuoGuanRequestEvent) Reset()                    { *m = TuoGuanRequestEvent{} }
func (m *TuoGuanRequestEvent) String() string            { return proto.CompactTextString(m) }
func (*TuoGuanRequestEvent) ProtoMessage()               {}
func (*TuoGuanRequestEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *TuoGuanRequestEvent) GetHead() *RequestEventHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *TuoGuanRequestEvent) GetTuoguan() bool {
	if m != nil {
		return m.Tuoguan
	}
	return false
}

// ResumeRequestEvent 恢复对局请求事件
type ResumeRequestEvent struct {
	Head *RequestEventHead `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
}

func (m *ResumeRequestEvent) Reset()                    { *m = ResumeRequestEvent{} }
func (m *ResumeRequestEvent) String() string            { return proto.CompactTextString(m) }
func (*ResumeRequestEvent) ProtoMessage()               {}
func (*ResumeRequestEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ResumeRequestEvent) GetHead() *RequestEventHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestEventHead)(nil), "ddz.RequestEventHead")
	proto.RegisterType((*GrabRequestEvent)(nil), "ddz.GrabRequestEvent")
	proto.RegisterType((*DoubleRequestEvent)(nil), "ddz.DoubleRequestEvent")
	proto.RegisterType((*PlayCardRequestEvent)(nil), "ddz.PlayCardRequestEvent")
	proto.RegisterType((*TuoGuanRequestEvent)(nil), "ddz.TuoGuanRequestEvent")
	proto.RegisterType((*ResumeRequestEvent)(nil), "ddz.ResumeRequestEvent")
	proto.RegisterEnum("ddz.EventID", EventID_name, EventID_value)
	proto.RegisterEnum("ddz.CardType", CardType_name, CardType_value)
}

func init() { proto.RegisterFile("events.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4b, 0x6f, 0xda, 0x4e,
	0x14, 0xc5, 0x63, 0x9e, 0xe6, 0xf2, 0xf8, 0xdf, 0xdc, 0x3f, 0x54, 0xae, 0xb2, 0x41, 0x5e, 0x51,
	0x16, 0x54, 0x85, 0xee, 0xab, 0x04, 0x10, 0xb1, 0x9a, 0x3a, 0xd4, 0x76, 0x37, 0x51, 0x25, 0x6b,
	0x60, 0xa6, 0x60, 0x89, 0x57, 0xfd, 0x88, 0x44, 0xb6, 0xfd, 0x98, 0xfd, 0x04, 0xfd, 0x16, 0x95,
	0xc7, 0x83, 0x83, 0xba, 0x64, 0x37, 0xe7, 0xfc, 0x0e, 0x67, 0x1e, 0x17, 0x43, 0x43, 0x3c, 0x8b,
	0x5d, 0x1c, 0x0d, 0x0e, 0xe1, 0x3e, 0xde, 0x53, 0x91, 0xf3, 0x17, 0xf3, 0x3d, 0xa0, 0x23, 0x7e,
	0x26, 0x22, 0x8a, 0xa7, 0x29, 0xbb, 0x17, 0x8c, 0xd3, 0x0d, 0xd4, 0x0e, 0x1b, 0x76, 0x14, 0xa1,
	0x1f, 0x70, 0x43, 0xeb, 0x6a, 0xbd, 0x92, 0xa3, 0x67, 0x86, 0xc5, 0xcd, 0xaf, 0x80, 0xb3, 0x90,
	0x2d, 0xce, 0x7f, 0x44, 0xef, 0xa0, 0xb4, 0x16, 0x2c, 0xcb, 0xd6, 0x87, 0x9d, 0x01, 0xe7, 0x2f,
	0x83, 0x7f, 0x5b, 0x1d, 0x19, 0x21, 0x82, 0xd2, 0x2a, 0x64, 0x0b, 0xa3, 0xd0, 0xd5, 0x7a, 0xba,
	0x23, 0xd7, 0xe6, 0x77, 0xa0, 0xc9, 0x3e, 0x59, 0x6c, 0xc4, 0xa5, 0xa5, 0x37, 0x50, 0x0b, 0x22,
	0x9f, 0xcb, 0x0e, 0xd5, 0xac, 0x07, 0x51, 0xd6, 0x69, 0xfe, 0xd2, 0xa0, 0x3d, 0xdf, 0xb0, 0xe3,
	0x98, 0x85, 0xfc, 0xd2, 0x0d, 0xda, 0x50, 0x5e, 0xb2, 0x90, 0x47, 0x46, 0xa1, 0x5b, 0xec, 0x35,
	0x9d, 0x4c, 0x50, 0x1f, 0x6a, 0xe9, 0xc2, 0x8f, 0x8f, 0x07, 0x61, 0x14, 0xbb, 0x5a, 0xaf, 0x35,
	0x6c, 0xca, 0x96, 0x74, 0x2b, 0xef, 0x78, 0x10, 0x8e, 0xbe, 0x54, 0x2b, 0xf3, 0x09, 0xfe, 0xf7,
	0x92, 0xfd, 0x2c, 0x61, 0xbb, 0x4b, 0xcf, 0x60, 0x40, 0x35, 0x4e, 0xf6, 0xab, 0x84, 0xed, 0xd4,
	0x15, 0x4f, 0xd2, 0xfc, 0x04, 0xe4, 0x88, 0x28, 0xd9, 0x5e, 0xfa, 0x7e, 0xfd, 0xdf, 0x1a, 0x54,
	0xa5, 0x67, 0x4d, 0xe8, 0x1a, 0x9a, 0xf2, 0x5f, 0xe2, 0x07, 0xbb, 0x67, 0xb6, 0x09, 0x38, 0x5e,
	0x51, 0x1b, 0x30, 0xb3, 0xa2, 0x98, 0x85, 0xb1, 0xbf, 0x62, 0x5b, 0x81, 0x1a, 0x75, 0xe0, 0x3a,
	0x73, 0xb9, 0x60, 0x1b, 0xff, 0x47, 0xb0, 0x0b, 0xa2, 0x35, 0x16, 0xe8, 0x0d, 0x50, 0x66, 0xa7,
	0xa3, 0xf5, 0xc3, 0x6c, 0x43, 0x2c, 0x92, 0x01, 0x6d, 0x15, 0x97, 0x63, 0xc9, 0x49, 0xe9, 0x95,
	0x2c, 0xd7, 0xc9, 0x81, 0x05, 0x39, 0x29, 0xd3, 0x5b, 0xe8, 0x64, 0x44, 0xdd, 0x34, 0x47, 0x15,
	0xfa, 0x0f, 0xea, 0x0a, 0x05, 0x5b, 0x11, 0x62, 0xf5, 0xb5, 0x25, 0x94, 0x4f, 0x91, 0x47, 0xf5,
	0xfe, 0x1f, 0x0d, 0xf4, 0xd3, 0x44, 0xa8, 0x0e, 0xd5, 0xb1, 0xe7, 0xdb, 0x8f, 0xf6, 0x14, 0xaf,
	0xa8, 0x09, 0xb5, 0xb1, 0xe7, 0xbb, 0x96, 0x3d, 0x7b, 0x98, 0xa2, 0xa6, 0xd8, 0xfc, 0xd6, 0x72,
	0xb0, 0x70, 0x62, 0xf7, 0xdf, 0xec, 0x27, 0x0b, 0x8b, 0xd4, 0x00, 0x5d, 0x31, 0x17, 0x4b, 0x0a,
	0x7a, 0x8e, 0x35, 0x7f, 0x98, 0x62, 0x59, 0xc1, 0xd1, 0xad, 0x3d, 0xf9, 0x80, 0x95, 0x33, 0x35,
	0xc4, 0x2a, 0xb5, 0x00, 0xf2, 0xa8, 0x8b, 0xba, 0xd2, 0x23, 0x37, 0x0d, 0xbb, 0x58, 0x3b, 0xd7,
	0x43, 0x17, 0x41, 0xe9, 0x8f, 0x8a, 0xd7, 0xcf, 0xf5, 0xd0, 0xc5, 0x86, 0x3a, 0xe4, 0xdd, 0xe3,
	0x97, 0x3b, 0x6c, 0xa6, 0xaf, 0x30, 0xf6, 0xfc, 0xcf, 0x96, 0x3d, 0x93, 0x46, 0x6b, 0x51, 0x91,
	0x9f, 0xf6, 0xe8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x56, 0x88, 0x33, 0xea, 0x03, 0x00,
	0x00,
}
