// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match.proto

/*
Package match is a generated protocol buffer package.

It is generated from these files:
	match.proto

It has these top-level messages:
	AddContinueDeskReq
	AddContinueDeskRsp
*/
package match

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// AddContinueDeskReq 添加续局牌桌请求
type AddContinueDeskReq struct {
	Players []uint64 `protobuf:"varint,1,rep,packed,name=players" json:"players,omitempty"`
	GameId  int32    `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (m *AddContinueDeskReq) Reset()                    { *m = AddContinueDeskReq{} }
func (m *AddContinueDeskReq) String() string            { return proto.CompactTextString(m) }
func (*AddContinueDeskReq) ProtoMessage()               {}
func (*AddContinueDeskReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddContinueDeskReq) GetPlayers() []uint64 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *AddContinueDeskReq) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// AddContinueDeskRsp 添加续局牌桌应答
type AddContinueDeskRsp struct {
}

func (m *AddContinueDeskRsp) Reset()                    { *m = AddContinueDeskRsp{} }
func (m *AddContinueDeskRsp) String() string            { return proto.CompactTextString(m) }
func (*AddContinueDeskRsp) ProtoMessage()               {}
func (*AddContinueDeskRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*AddContinueDeskReq)(nil), "match.AddContinueDeskReq")
	proto.RegisterType((*AddContinueDeskRsp)(nil), "match.AddContinueDeskRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Match service

type MatchClient interface {
	AddContinueDesk(ctx context.Context, in *AddContinueDeskReq, opts ...grpc.CallOption) (*AddContinueDeskRsp, error)
}

type matchClient struct {
	cc *grpc.ClientConn
}

func NewMatchClient(cc *grpc.ClientConn) MatchClient {
	return &matchClient{cc}
}

func (c *matchClient) AddContinueDesk(ctx context.Context, in *AddContinueDeskReq, opts ...grpc.CallOption) (*AddContinueDeskRsp, error) {
	out := new(AddContinueDeskRsp)
	err := grpc.Invoke(ctx, "/match.Match/AddContinueDesk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Match service

type MatchServer interface {
	AddContinueDesk(context.Context, *AddContinueDeskReq) (*AddContinueDeskRsp, error)
}

func RegisterMatchServer(s *grpc.Server, srv MatchServer) {
	s.RegisterService(&_Match_serviceDesc, srv)
}

func _Match_AddContinueDesk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContinueDeskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).AddContinueDesk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.Match/AddContinueDesk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).AddContinueDesk(ctx, req.(*AddContinueDeskReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Match_serviceDesc = grpc.ServiceDesc{
	ServiceName: "match.Match",
	HandlerType: (*MatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContinueDesk",
			Handler:    _Match_AddContinueDesk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match.proto",
}

func init() { proto.RegisterFile("match.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4d, 0x2c, 0x49,
	0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xdc, 0xb9, 0x84, 0x1c,
	0x53, 0x52, 0x9c, 0xf3, 0xf3, 0x4a, 0x32, 0xf3, 0x4a, 0x53, 0x5d, 0x52, 0x8b, 0xb3, 0x83, 0x52,
	0x0b, 0x85, 0x24, 0xb8, 0xd8, 0x0b, 0x72, 0x12, 0x2b, 0x53, 0x8b, 0x8a, 0x25, 0x18, 0x15, 0x98,
	0x35, 0x58, 0x82, 0x60, 0x5c, 0x21, 0x71, 0x2e, 0xf6, 0xf4, 0xc4, 0xdc, 0xd4, 0xf8, 0xcc, 0x14,
	0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x36, 0x10, 0xd7, 0x33, 0x45, 0x49, 0x04, 0xd3, 0xa0,
	0xe2, 0x02, 0xa3, 0x20, 0x2e, 0x56, 0x5f, 0x90, 0x3d, 0x42, 0x9e, 0x5c, 0xfc, 0x68, 0xd2, 0x42,
	0x92, 0x7a, 0x10, 0xf7, 0x60, 0xda, 0x2f, 0x85, 0x4b, 0xaa, 0xb8, 0x40, 0x89, 0x21, 0x89, 0x0d,
	0xec, 0x01, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0xd6, 0xa5, 0x68, 0xcf, 0x00, 0x00,
	0x00,
}
