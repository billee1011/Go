// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match.proto

/*
Package match is a generated protocol buffer package.

It is generated from these files:
	match.proto

It has these top-level messages:
	ContinuePlayer
	AddContinueDeskReq
	AddContinueDeskRsp
	ClearAllMatchReq
	ClearAllMatchRsp
*/
package match

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ContinuePlayer 牌桌续局玩家
type ContinuePlayer struct {
	PlayerId   uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Seat       int32  `protobuf:"varint,2,opt,name=seat" json:"seat,omitempty"`
	Win        bool   `protobuf:"varint,3,opt,name=win" json:"win,omitempty"`
	RobotLevel int32  `protobuf:"varint,4,opt,name=robot_level,json=robotLevel" json:"robot_level,omitempty"`
}

func (m *ContinuePlayer) Reset()                    { *m = ContinuePlayer{} }
func (m *ContinuePlayer) String() string            { return proto.CompactTextString(m) }
func (*ContinuePlayer) ProtoMessage()               {}
func (*ContinuePlayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ContinuePlayer) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ContinuePlayer) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ContinuePlayer) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *ContinuePlayer) GetRobotLevel() int32 {
	if m != nil {
		return m.RobotLevel
	}
	return 0
}

// AddContinueDeskReq 添加续局牌桌请求
type AddContinueDeskReq struct {
	Players    []*ContinuePlayer `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	GameId     int32             `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	FixBanker  bool              `protobuf:"varint,3,opt,name=fix_banker,json=fixBanker" json:"fix_banker,omitempty"`
	BankerSeat int32             `protobuf:"varint,4,opt,name=banker_seat,json=bankerSeat" json:"banker_seat,omitempty"`
}

func (m *AddContinueDeskReq) Reset()                    { *m = AddContinueDeskReq{} }
func (m *AddContinueDeskReq) String() string            { return proto.CompactTextString(m) }
func (*AddContinueDeskReq) ProtoMessage()               {}
func (*AddContinueDeskReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddContinueDeskReq) GetPlayers() []*ContinuePlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *AddContinueDeskReq) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *AddContinueDeskReq) GetFixBanker() bool {
	if m != nil {
		return m.FixBanker
	}
	return false
}

func (m *AddContinueDeskReq) GetBankerSeat() int32 {
	if m != nil {
		return m.BankerSeat
	}
	return 0
}

// AddContinueDeskRsp 添加续局牌桌应答
type AddContinueDeskRsp struct {
}

func (m *AddContinueDeskRsp) Reset()                    { *m = AddContinueDeskRsp{} }
func (m *AddContinueDeskRsp) String() string            { return proto.CompactTextString(m) }
func (*AddContinueDeskRsp) ProtoMessage()               {}
func (*AddContinueDeskRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ClearAllMatchReq 请求清空所有的匹配
type ClearAllMatchReq struct {
}

func (m *ClearAllMatchReq) Reset()                    { *m = ClearAllMatchReq{} }
func (m *ClearAllMatchReq) String() string            { return proto.CompactTextString(m) }
func (*ClearAllMatchReq) ProtoMessage()               {}
func (*ClearAllMatchReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// ClearAllMatchRsp 应答清空所有的匹配
type ClearAllMatchRsp struct {
}

func (m *ClearAllMatchRsp) Reset()                    { *m = ClearAllMatchRsp{} }
func (m *ClearAllMatchRsp) String() string            { return proto.CompactTextString(m) }
func (*ClearAllMatchRsp) ProtoMessage()               {}
func (*ClearAllMatchRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*ContinuePlayer)(nil), "match.ContinuePlayer")
	proto.RegisterType((*AddContinueDeskReq)(nil), "match.AddContinueDeskReq")
	proto.RegisterType((*AddContinueDeskRsp)(nil), "match.AddContinueDeskRsp")
	proto.RegisterType((*ClearAllMatchReq)(nil), "match.ClearAllMatchReq")
	proto.RegisterType((*ClearAllMatchRsp)(nil), "match.ClearAllMatchRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Match service

type MatchClient interface {
	AddContinueDesk(ctx context.Context, in *AddContinueDeskReq, opts ...grpc.CallOption) (*AddContinueDeskRsp, error)
	ClearAllMatch(ctx context.Context, in *ClearAllMatchReq, opts ...grpc.CallOption) (*ClearAllMatchRsp, error)
}

type matchClient struct {
	cc *grpc.ClientConn
}

func NewMatchClient(cc *grpc.ClientConn) MatchClient {
	return &matchClient{cc}
}

func (c *matchClient) AddContinueDesk(ctx context.Context, in *AddContinueDeskReq, opts ...grpc.CallOption) (*AddContinueDeskRsp, error) {
	out := new(AddContinueDeskRsp)
	err := grpc.Invoke(ctx, "/match.Match/AddContinueDesk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchClient) ClearAllMatch(ctx context.Context, in *ClearAllMatchReq, opts ...grpc.CallOption) (*ClearAllMatchRsp, error) {
	out := new(ClearAllMatchRsp)
	err := grpc.Invoke(ctx, "/match.Match/ClearAllMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Match service

type MatchServer interface {
	AddContinueDesk(context.Context, *AddContinueDeskReq) (*AddContinueDeskRsp, error)
	ClearAllMatch(context.Context, *ClearAllMatchReq) (*ClearAllMatchRsp, error)
}

func RegisterMatchServer(s *grpc.Server, srv MatchServer) {
	s.RegisterService(&_Match_serviceDesc, srv)
}

func _Match_AddContinueDesk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContinueDeskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).AddContinueDesk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.Match/AddContinueDesk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).AddContinueDesk(ctx, req.(*AddContinueDeskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Match_ClearAllMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAllMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).ClearAllMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.Match/ClearAllMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).ClearAllMatch(ctx, req.(*ClearAllMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Match_serviceDesc = grpc.ServiceDesc{
	ServiceName: "match.Match",
	HandlerType: (*MatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContinueDesk",
			Handler:    _Match_AddContinueDesk_Handler,
		},
		{
			MethodName: "ClearAllMatch",
			Handler:    _Match_ClearAllMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match.proto",
}

func init() { proto.RegisterFile("match.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4e, 0xf3, 0x30,
	0x0c, 0xc0, 0xbf, 0x7c, 0xfb, 0xef, 0x09, 0x98, 0x2c, 0xd0, 0xca, 0x10, 0xa2, 0xea, 0xa9, 0xa7,
	0x21, 0x8d, 0x27, 0x18, 0xe3, 0x32, 0x09, 0x24, 0x14, 0x1e, 0xa0, 0x4a, 0xa9, 0x07, 0xd5, 0xb2,
	0xb6, 0x6b, 0x02, 0x8c, 0x27, 0xe1, 0xc6, 0xb3, 0xa2, 0x24, 0xed, 0x61, 0x2b, 0xdc, 0xec, 0x9f,
	0x2d, 0xfb, 0xe7, 0x04, 0x86, 0x1b, 0xa1, 0x9f, 0x5f, 0xa7, 0x45, 0x99, 0xeb, 0x1c, 0x3b, 0x36,
	0x09, 0x34, 0x1c, 0x2f, 0xf2, 0x4c, 0xa7, 0xd9, 0x1b, 0x3d, 0x4a, 0xf1, 0x49, 0x25, 0x5e, 0xc0,
	0xa0, 0xb0, 0x51, 0x94, 0x26, 0x1e, 0xf3, 0x59, 0xd8, 0xe6, 0x7d, 0x07, 0x96, 0x09, 0x22, 0xb4,
	0x15, 0x09, 0xed, 0xfd, 0xf7, 0x59, 0xd8, 0xe1, 0x36, 0xc6, 0x11, 0xb4, 0x3e, 0xd2, 0xcc, 0x6b,
	0xf9, 0x2c, 0xec, 0x73, 0x13, 0xe2, 0x15, 0x0c, 0xcb, 0x3c, 0xce, 0x75, 0x24, 0xe9, 0x9d, 0xa4,
	0xd7, 0xb6, 0xcd, 0x60, 0xd1, 0xbd, 0x21, 0xc1, 0x37, 0x03, 0x9c, 0x27, 0x49, 0xbd, 0xf9, 0x8e,
	0xd4, 0x9a, 0xd3, 0x16, 0xaf, 0xa1, 0xe7, 0x36, 0x29, 0x8f, 0xf9, 0xad, 0x70, 0x38, 0x3b, 0x9b,
	0x3a, 0xe5, 0x7d, 0x45, 0x5e, 0x77, 0xe1, 0x18, 0x7a, 0x2f, 0x62, 0x43, 0xc6, 0xd4, 0x19, 0x75,
	0x4d, 0xba, 0x4c, 0xf0, 0x12, 0x60, 0x95, 0xee, 0xa2, 0x58, 0x64, 0x6b, 0x2a, 0x2b, 0xb5, 0xc1,
	0x2a, 0xdd, 0xdd, 0x5a, 0x60, 0x04, 0x5d, 0x29, 0xb2, 0xd7, 0x54, 0x82, 0x0e, 0x3d, 0x91, 0xd0,
	0xc1, 0x69, 0xd3, 0x4f, 0x15, 0x01, 0xc2, 0x68, 0x21, 0x49, 0x94, 0x73, 0x29, 0x1f, 0x8c, 0x17,
	0xa7, 0x6d, 0x93, 0xa9, 0x62, 0xf6, 0xc5, 0xa0, 0x63, 0x13, 0x5c, 0xc2, 0xc9, 0xc1, 0x1c, 0x3c,
	0xaf, 0x6e, 0x6a, 0xde, 0x3f, 0xf9, 0xab, 0xa4, 0x8a, 0xe0, 0x1f, 0x2e, 0xe0, 0x68, 0x6f, 0x11,
	0x8e, 0xeb, 0xc7, 0x39, 0x50, 0x9a, 0xfc, 0x5e, 0x30, 0x43, 0xe2, 0xae, 0xfd, 0xfc, 0x9b, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x32, 0xe3, 0xcc, 0x0b, 0x02, 0x00, 0x00,
}
