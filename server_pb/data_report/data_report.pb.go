// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data_report.proto

package datareport

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 创建桌子的请求
type ReportRequest struct {
	LogType              int32    `protobuf:"varint,1,opt,name=LogType,proto3" json:"LogType,omitempty"`
	Province             int32    `protobuf:"varint,2,opt,name=Province,proto3" json:"Province,omitempty"`
	City                 int32    `protobuf:"varint,3,opt,name=City,proto3" json:"City,omitempty"`
	Channel              int32    `protobuf:"varint,4,opt,name=Channel,proto3" json:"Channel,omitempty"`
	PlayerId             uint64   `protobuf:"varint,5,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Value                string   `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportRequest) Reset()         { *m = ReportRequest{} }
func (m *ReportRequest) String() string { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()    {}
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_report_2e86c65607d2e5f5, []int{0}
}
func (m *ReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRequest.Unmarshal(m, b)
}
func (m *ReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRequest.Marshal(b, m, deterministic)
}
func (dst *ReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRequest.Merge(dst, src)
}
func (m *ReportRequest) XXX_Size() int {
	return xxx_messageInfo_ReportRequest.Size(m)
}
func (m *ReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRequest proto.InternalMessageInfo

func (m *ReportRequest) GetLogType() int32 {
	if m != nil {
		return m.LogType
	}
	return 0
}

func (m *ReportRequest) GetProvince() int32 {
	if m != nil {
		return m.Province
	}
	return 0
}

func (m *ReportRequest) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *ReportRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *ReportRequest) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ReportRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// 创建桌子的回复
type ReportResponse struct {
	ErrCode              uint32   `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportResponse) Reset()         { *m = ReportResponse{} }
func (m *ReportResponse) String() string { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()    {}
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_report_2e86c65607d2e5f5, []int{1}
}
func (m *ReportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportResponse.Unmarshal(m, b)
}
func (m *ReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportResponse.Marshal(b, m, deterministic)
}
func (dst *ReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResponse.Merge(dst, src)
}
func (m *ReportResponse) XXX_Size() int {
	return xxx_messageInfo_ReportResponse.Size(m)
}
func (m *ReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResponse proto.InternalMessageInfo

func (m *ReportResponse) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func init() {
	proto.RegisterType((*ReportRequest)(nil), "datareport.ReportRequest")
	proto.RegisterType((*ReportResponse)(nil), "datareport.ReportResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportServiceClient interface {
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type reportServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportServiceClient(cc *grpc.ClientConn) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/datareport.ReportService/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
type ReportServiceServer interface {
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datareport.ReportService/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datareport.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _ReportService_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_report.proto",
}

func init() { proto.RegisterFile("data_report.proto", fileDescriptor_data_report_2e86c65607d2e5f5) }

var fileDescriptor_data_report_2e86c65607d2e5f5 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x5d, 0x4d, 0xd2, 0x3a, 0x50, 0xc1, 0xc1, 0xc3, 0x36, 0xa7, 0x90, 0x53, 0x40, 0xc8,
	0x41, 0x9f, 0x40, 0x72, 0x12, 0x3c, 0xc8, 0x2a, 0x5e, 0xcb, 0x9a, 0x0c, 0x1a, 0x08, 0x99, 0x38,
	0xd9, 0x16, 0xf2, 0x40, 0xbe, 0xa7, 0x74, 0xd7, 0x44, 0x84, 0xde, 0xe6, 0xfb, 0x06, 0xfe, 0x9d,
	0x7f, 0xe1, 0xba, 0xb1, 0xce, 0xee, 0x84, 0x06, 0x16, 0x57, 0x0e, 0xc2, 0x8e, 0x11, 0x8e, 0x2a,
	0x98, 0xfc, 0x5b, 0xc1, 0xc6, 0xf8, 0xd1, 0xd0, 0xd7, 0x9e, 0x46, 0x87, 0x1a, 0x56, 0x4f, 0xfc,
	0xf1, 0x3a, 0x0d, 0xa4, 0x55, 0xa6, 0x8a, 0xd8, 0xcc, 0x88, 0x29, 0xac, 0x9f, 0x85, 0x0f, 0x6d,
	0x5f, 0x93, 0x3e, 0xf7, 0xab, 0x85, 0x11, 0x21, 0xaa, 0x5a, 0x37, 0xe9, 0x0b, 0xef, 0xfd, 0x7c,
	0x4c, 0xaa, 0x3e, 0x6d, 0xdf, 0x53, 0xa7, 0xa3, 0x90, 0xf4, 0x8b, 0x3e, 0xa9, 0xb3, 0x13, 0xc9,
	0x63, 0xa3, 0xe3, 0x4c, 0x15, 0x91, 0x59, 0x18, 0x6f, 0x20, 0x7e, 0xb3, 0xdd, 0x9e, 0x74, 0x92,
	0xa9, 0xe2, 0xd2, 0x04, 0xc8, 0x6f, 0xe1, 0x6a, 0x3e, 0x73, 0x1c, 0xb8, 0x1f, 0x09, 0xb7, 0xb0,
	0x26, 0x91, 0x5d, 0xcd, 0x4d, 0x38, 0x74, 0x63, 0x56, 0x24, 0x52, 0x71, 0x43, 0x77, 0x66, 0xee,
	0xf4, 0x42, 0x72, 0x68, 0x6b, 0xc2, 0x07, 0x48, 0x82, 0xc0, 0x6d, 0xf9, 0x57, 0xbe, 0xfc, 0x57,
	0x3c, 0x4d, 0x4f, 0xad, 0xc2, 0x63, 0xf9, 0xd9, 0x7b, 0xe2, 0xff, 0xee, 0xfe, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x57, 0x55, 0xef, 0x36, 0x50, 0x01, 0x00, 0x00,
}
