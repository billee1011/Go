// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	ConfigUpdate
	GetConfigReq
	GetConfigRsp
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigUpdate 配置更新通知
type ConfigUpdate struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Subkey string `protobuf:"bytes,2,opt,name=subkey" json:"subkey,omitempty"`
	Val    string `protobuf:"bytes,3,opt,name=val" json:"val,omitempty"`
}

func (m *ConfigUpdate) Reset()                    { *m = ConfigUpdate{} }
func (m *ConfigUpdate) String() string            { return proto.CompactTextString(m) }
func (*ConfigUpdate) ProtoMessage()               {}
func (*ConfigUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigUpdate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigUpdate) GetSubkey() string {
	if m != nil {
		return m.Subkey
	}
	return ""
}

func (m *ConfigUpdate) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

// GetConfigReq 获取配置请求
type GetConfigReq struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Subkey string `protobuf:"bytes,2,opt,name=subkey" json:"subkey,omitempty"`
}

func (m *GetConfigReq) Reset()                    { *m = GetConfigReq{} }
func (m *GetConfigReq) String() string            { return proto.CompactTextString(m) }
func (*GetConfigReq) ProtoMessage()               {}
func (*GetConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetConfigReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetConfigReq) GetSubkey() string {
	if m != nil {
		return m.Subkey
	}
	return ""
}

// GetConfigRsp 获取配置应答
type GetConfigRsp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *GetConfigRsp) Reset()                    { *m = GetConfigRsp{} }
func (m *GetConfigRsp) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRsp) ProtoMessage()               {}
func (*GetConfigRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetConfigRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetConfigRsp) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigUpdate)(nil), "config.ConfigUpdate")
	proto.RegisterType((*GetConfigReq)(nil), "config.GetConfigReq")
	proto.RegisterType((*GetConfigRsp)(nil), "config.GetConfigRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Config service

type ConfigClient interface {
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigRsp, error)
}

type configClient struct {
	cc *grpc.ClientConn
}

func NewConfigClient(cc *grpc.ClientConn) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigRsp, error) {
	out := new(GetConfigRsp)
	err := grpc.Invoke(ctx, "/config.Config/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigServer interface {
	GetConfig(context.Context, *GetConfigReq) (*GetConfigRsp, error)
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.Config/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Config_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xbc, 0xb8, 0x78,
	0x9c, 0xc1, 0xac, 0xd0, 0x82, 0x94, 0xc4, 0x92, 0x54, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x48, 0x8c, 0x8b, 0xad, 0xb8, 0x34, 0x09,
	0x24, 0xc8, 0x04, 0x16, 0x84, 0xf2, 0x40, 0x2a, 0xcb, 0x12, 0x73, 0x24, 0x98, 0x21, 0x2a, 0xcb,
	0x12, 0x73, 0x94, 0x2c, 0xb8, 0x78, 0xdc, 0x53, 0x4b, 0x20, 0xc6, 0x05, 0xa5, 0x16, 0x12, 0x6f,
	0x96, 0x92, 0x3d, 0xb2, 0xce, 0xe2, 0x02, 0x21, 0x49, 0x2e, 0x8e, 0xd4, 0xa2, 0xa2, 0xf8, 0xe4,
	0xfc, 0x94, 0x54, 0xb0, 0x76, 0xd6, 0x20, 0xf6, 0xd4, 0xa2, 0x22, 0xe7, 0xfc, 0x94, 0x54, 0x21,
	0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0xa8, 0x09, 0x10, 0x8e, 0x91, 0x33, 0x17, 0x1b,
	0x44, 0xb7, 0x90, 0x25, 0x17, 0x27, 0xdc, 0x28, 0x21, 0x11, 0x3d, 0xa8, 0xa7, 0x91, 0xdd, 0x25,
	0x85, 0x45, 0xb4, 0xb8, 0x40, 0x89, 0x21, 0x89, 0x0d, 0x1c, 0x34, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd1, 0xa5, 0x29, 0xfc, 0x2a, 0x01, 0x00, 0x00,
}
